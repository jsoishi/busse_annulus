%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: rank_vs_t_run_A_DSS_max_ig_kx.pdf
%%Creator: (Adobe Acrobat 22.2.0)
%%For: daniellecastronovo
%%CreationDate: 9/13/22, 11:21 AM
%%BoundingBox: 0 0 530 581
%%HiResBoundingBox: 0 0 530 581
%%CropBox: 0 0 530 581
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 761 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.cb7c5a1, 2022/04/14-05:22:35        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2022-06-30T10:32:23-04:00"
   xmp:CreatorTool="TeX"
   xmp:ModifyDate="2022-06-30T10:32:23-04:00"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.14159265-2.6-1.40.20 (TeX Live 2019/Debian) kpathsea version 6.3.1"
   pdf:Producer="pdfTeX-1.40.20"
   pdf:Trapped="False"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -581 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 581 li
530 581 li
530 0 li
cp
clp
gsave
-537.983 571 mo
522.017 571 li
522.017 10.0001 li
-537.983 10.0001 li
-537.983 571 li
clp
-562.983 584 mo
589.017 584 li
589.017 7.99998 li
-562.983 7.99998 li
-562.983 584 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
-486.183 526.4 mo
-25.383 526.4 li
-25.383 65.6 li
-486.183 65.6 li
cp
f
gsave
-486.183 526.4 mo
-25.3829 526.4 li
-25.3829 65.6 li
-486.183 65.6 li
-486.183 526.4 li
clp
-486.183 526.4 mo
-25.183 526.4 li
-25.183 65.4 li
-486.183 65.4 li
cp
/1 
[/DeviceRGB] /CSA add_res
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 581 ]ct
[461 0 0 461 -486.183 54.6 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 4000 
/H 16 
/M[4000 0 0 -16 0 16 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 4000 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 4000 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 4000 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
!<%O<Jjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2Y
_F+CeK)pQ)JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(
JcW^h!$m1rJlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$
JlI>$_Got%rQkA5r(6i<ru^_QkpPCA!@KMn-i#+j/gp?Fr?hdl-S?c!-SG*?!?`K_+93M^+9<Q,n0d<M
kr/Q+\Ne5+Jjun4eO]7%O[OdhJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2Y
Jjb2Y_F3hTrSdY,r5&?:s.SqDl$hQ-!IenZIeeEnD1;1qrI+s4IVjONIVne-!Ka#RO8u!QO9)&:n:'J9
l!+0X\OXdsJhaD_eJdusOTC%7JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(
JcUH(_?''Mr>b\or,)C\s+g*&]8l*8!0$E-!K;g4Mu\Y3Mue]me;idPs+n4Ab'nqkY("o;nnaFfJlI>$
JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlKTd!<%O<Jjb2YJjb2YJjb2Y
Jjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2Y_F+CeK)pQ)JcUH(JcUH(
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcW^h!$m1rJlI>$JlI>$
JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$_Gon#rQkA5s)S!.
s"+*jn0$g?!A5c!/d3UT-S?c!p*U4j-RU#Y+<M^K-Qjf9+Sm2_-QaH^llQ9[/0FX<rZC;S![&R-rZD%h
r#bt]q&fqb+!;XJ+<M^Km3hKQnLb"n/hSM(/gnanp-7h#r&0<pQ9Xb+Jjt>]Jk"3YYXm;8Y!dk0Jjb2Y
Jjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2Y_F3bRrSdY,s3LSYs0;Nrn;ua\!H!;bD$>B*
IVjONp3mC2IX[BPOJ.btIZT$XOSY%@I\Dk.m%FKcZ(^rtrh8M[!g'+;rh97pr/^oPq2blUTobt0OJ.bt
m=+YUnSJJZD/F`=D19TDp.+CPr*+qHQ:L<sJh_j3Jhb_/YSu%1XoX+TJcUH(JcUH(JcUH(JcUH(JcUH(
JcUH(JcUH(JcUH(JcUH(JcUH(_?'!Kr>b\os&Jr5s*aj$n;P\R$]L++N/*@IN/WdUNrG"6N!#)qN.(&J
!e#KPpjN-skC!DjLQ)4fr-eL%!/LB/#`"1oLQ%1IN/[.aUlP/)lAYY"LPV7Pm='Y9Jpr<#dseN;eSMBf
JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlKTd!<&`^hakIP`C,;GJjb2YJjb2Y
Jjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2Y_F+CeV#fHl^)FrkJcUH(
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcW^h!$nC?he^#C
`DhFgJlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$_Goh!
r6P>6r,V[+!%dsgnf[QP"s>9@+=A9Zp)s8\"s>9@+=A9Sp)j,^oITo3m;hommW.iirc/$2TBgM.T5ntE
EhAtEE_/hR8LuDapFQ56pal.]r@@t@/H&09/H-^n+<M^JrZD1_rZDpt+<N-V+"SKb+"SKb+"SKb+"SKU
/H-^k/Fstg+!;[J+<W67+9!A_+8R,P+93M_+93M_+93M^+93M[+93M]+93M_+<;OH+<M^J+<M^J+<M^J
-QjcZ-QjcZ-Qjca+=ANZr[.[gr?hRfpa>VTm3fXr"YM/T-S?di/c[fO2Xip22XEZk2Z#^j5Cu+O5Cu+^
5Oq9q7Y4*]7Y4*]7c-\28:jBa8:jD'8<H;l7"RgY7"RgY7"RgY7"RgY7"RhD7-`t5iVhI-chkNYZ210b
OS!u+OFDY?IZT$POSjP3OFDY?IZTZbU&)%dZ2DH*ch?&[cgf]fcN1l8ld$*pcd1:jg"F]t_83CmZ*D.>
Z2DH5Z1jsjYlV\GrPA<7rh0FUTobuIO8u!RO;4INTs:;bZ(\FrZ(\FrZ(\FrZ([krrh0=so8j0MOH?/t
OKneYrf@,RqN1?2!29CR!29CR!29@Q!297N!29=P!29CR*MJRVTobt0Tobt0TobssOFE:?OFE:?OFDY?
IX[CXIK5K.IK5K)Ie&TfI_U=8D16>ND19ZF!*dQLn4*I_lpp5CqaZ6.Jk(D_Jk(qnnhG_NJh_j3Jh_j3
h_CoFJf94ZJf=1uOTC%7JcUH(JcUH(JcUH(JcUH(JcW^hl6Q9IrAa^TqeZ=]qM4X#oSs-7NfK'YN/mUj
r/Lu?NfK'YN/[IcqL/!ar,(h$p,MJ?nMpMJ!Gsg^<=_&h<B*u<3)rsqD1-8LI;S_,r,)4WpP8]q!H!8`
D>AVZLBEKjN/.Ck!/LQ4'o.a'I><T+LOFr+LOFr+LOFr+LPL<WLB)boN!>&rN/*@NIK#$$Mu\Y0N:`&/
L]354L]354L]*/3L\cr0L]!)2L]35QLQ%1IN/*@IN/*@IN/*FPNf9!WNf9!WNfK'YNf<st!0$l:!0$]5
nr2srK8oqjac,_F!0$9#kD]:oJr##7Jr##7ObiRWJpr<#Jpr<#JpuU+UhkX!Jo$$TnnaFfJlI>$JlI>$
JlI>$JlI>$JlI>$_GgO6eO6T3Jk1JaJk3(9e3nmVJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2Y
Jjb2YJjb2YJjb2YJjb2YJjdID!9_l5Y8W!2Jf94ZY8YmkJcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(_>sW^ePr_gJo$$TJo%W,e5V$!JlI>$JlI>$JlI>$JlI>$JlI>$
JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlKTdkl(D)s.B%+s%3)=qB,DRr?hdl-RU#a+=HV#!$D1_
![f*5p`K5]r^l`Ro5`l`k0O%!kg0$rqf;[V"eTh-EcRfNEX8:XE_1:C8TIE"ErM^0EW\mR8P/n4!(m)>
!(m,?(J-//8LuDa/4hC58TICC8Y:$D8TIBoErJW2E_54@#Y?Qu8M!Fa/4ogl!(l6&$:ud"8M!Fa8P(Ha
j%8Yi&0EGF/0?Db/0?Db/0?Db/0FjBmiMQQ+9!DI+8R,T+1iZp-hneh-Qjca+=A9ZmND*KefY/E+=A9Z
-QrC9#TtKB+=A9Z+=HV#"YM/T-S?bH0$ksO/gi8!/gi8(-iP_*-S@"o-QjcZ-Qjf5+=Jii/gi8(2D-m?
2D-mG/iGU?2E!0G2D-m?2D-m?2CC+)/gi8!/gi:K-h\nu/gi8!/gi8!/gi8(-S@#!r@S'tq(;Xpr%7ss
r@S'tr@S'tq_%b(!&".,!&"1-!&"4.!&"7/!&"7/""lJi0)da/0)[[.0((Xc2?5@q2VL'g5Cu+O5Cu+O
5Cu+O5Cu+O5Cu+O5IWl$7Y4*]7Y4*]7Y4*]7Y4*]7Y4*]7`%XYkPO6<g%Whm_>CM6U%XTHIKkm_IZT#?
Id`?uU&L,TIZTZdU%bhk_=YS8cf<^@iVqNoiV;+'ci25og!A?tce89C#hdPM_9]s6cb]M)rn77r"2W="
_>^\>_>LP<_>UVT_6L8]Z*D-M_6M>&cb[rDg!A!\cb[HDrkSW]_;VX)_6L8]Z,*]M_>^\>_;qj._6L8]
Z,*]]_6L9*_="Q>Ts:;rTs:;rTs:;rTs:;rU&M=cT`L7KrfHB<qN1KG]9*#@plG`0OFDY?IZT$HORmqP
O9U/qIZT#-OT'\7OFDY?IZT#?Id`@%D16>ND12J%d!c7;IVjONIViqNrbW!kD/GA`OFE:?OFI%f-uFEM
IViq+D-Lj]D-L4]>?brK>A[SKD-Lj]D-Lj]IVjONIVjONIVnt2p3mNhIVjONIVjONIViqND/Fb#D#f%\
D#f%_D#f%`D#f%`D#f%^D>RN;D>RN;D>[T<D>dZ=D>m`>D>m`AD-L4]r`]A>rEB8=mT]*`!,\$+g0:OH
Jk(D_Jk(D_Jk(D_Jk(D_Jk(D_[n"XsJh_j3Jh_j3Jh_j3Jh_j3Jh_j3_D17"q],VqpJq61qgJ<rp5Js1
#)nS&N/ijWmu.7%repo=N/[OepO3$XoPO2"j#H0@r]'*]pc/.Nr`'+]<B*uY3;lh_3)rsq<GcSQD>R?4
3;lhZD,kFird=c`r-\Q^rI#K!I=5s\I;OCLI8t,aD,kF4<E3m9D/E;PD#mXRiI(uKI=5s\D1-hLrd=c`
jF%API=5s\D1-8<I=:-mmX5Y%I><6+I><6+I><6+I><6+rdF6j!K;g5N9Q,oN;/1?N;ek4N!GB%NfK'Y
N/m=bo8_C\#*+Y&N/ipWrf.8CNfK'YN/ijWmu7.(^lAYYNf9!WNf9"pN;JVPN/ijWN/ijUNf8pWN/WdU
N/ijWN/ijWN:DqFNr+b8Nr+b8Nr4h9Nr=n:NrFt;NrFt>Nf8pWrepi;rJU`:mYpRm!03A(g5N"eJr##7
Jr##7Jr##7Jr##7Jr##7[tr7WJpr<#Jpr<#Jpr<#Jpr<#Jpr<#_L;L`ksV"3Jk1JaJk1JaJk1Jaejuo2
Jjb2YJjb2YQUCgEm6lOoJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YPXOt2_FO[iklI7lJf94Z
Jf94ZJf94Zef(XkJcUH(JcUH(QN7()m/_e>JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(PQC4k
_AWD"ku=-gJo$$TJo$$TJo$$TenhHfJlI>$JlI>$QW*s$m8S[:JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$
JlI>$JlI>$PZ7*f_JJB5qp,87p2^+'odoq]rZDIo-Qjca+=A9ZmN;TR+<Vd*+SQuP/-&948beqMEqc4%
ErM]oci!b>chX4/cg[RgTDNZHTBgOmTCecFErASoEWD`qEqW*&EqN#pEr0nMT*B=V8TJjDEpoY!EqDrq
En!\UEqN!(EpZHZEqN#gEpQBnEqFA[8TICC8TICC8TICCqapB1oL\=!i^s)"r^d>G8M!Fa/0?DI+"SKb
+"SN"/--hDrZ;Y%+!2UI+<M^J+=nWW+<Ma**sEc//0?Dbkq!&]/0?Db+=nZ7*rmG_*s3W-+"[=3!%e$i
!%e'j!%e'j!%e*krZ;+kr#Yq^+8m;^+8m;d+!;[J+=nZ4*rmkk*sO8<+<M^K+9!D]-iP4l-QjcZ+<UM(
!$D.^$QgK5+!;XV+"SKb/GUC[+;Z+A-Qa]X-QaEQ+!2UI+!;[W+<M^J+=mR:+!CM(nK7r^+=ANhq^;%Z
!ZrO4rZD7i+"-q-!?`KZ-NYnJ0)[-t+S[;a+T<_m+=A9Z+=A91+:]bH+=ANZ-QjcZ-Qk#a0)d4%/gi8(
-SG-Gr[7Ur!%7^t!%7au&LT1`-S@#!/gi8!/gi8!/hSOH0)$ak0)I"-+=ANh+>,#h/hSM(/gi8(-f-HV
/gpQL!%7au!%7au!%7[s!%7Xr!%7Xr!%7^t!$M4m!%7au!%7Xr!%6PS"t);e/iGU?rAOR+!%7[s!%7Ln
YqGr4!&"++oI^.l0)[[.0(Ut$2UX5X2X*F+2Z#]?2E!2W2Wl^_/c[fU5K,O;2YoZ+5Kbt.5M%g)5P$db
5Cu+O5Cu+O5Cu+O5Cu+O5Cu+O5Cu,P5H@8j7crn2i;hR)ci(]QZ210nO9g;aOFDY?IZT$HO9;2<OJ2Z8
pS%>d!5\6Bpt>;cpY#Agrn6Jnr9+":q:YT&nCcpVqp315ld,@Zo\&`[rP@aE!86S^p;-[Qotg4Fqp4rg
#1(W3cd1:jn(IZcoYL1GeA:q+ot^XSmD7l0otfn=m(rMDoZmo]cb[rDcb[rDcb[s)_=Or(_<S;b_>UY<
_$@6]Z,*]MTs4fqZ(\FrZ(^Kg!MQdtTb"E%Tobt0Tobt0Z&kZ@Tof8I"d#F_Ts:<UYm6u-Ts:;QZ&nsY
!0I2R"-B4MZ2C9qZ2C9qZ2L?rZ2L?rZ2UHrT`D@qT`L7KrK%#QrK%5WOH?/tZ&njV!3uNs#-jk`TobA0
rfI)-rf@;4OFE:QU&9uPU&C&\TobtAOJ/qQZ(\G-q4[GB(SROOTmi\aTqRRATobtAOH?`/Tobt0Yl^#\
OStmCO9C#oIXZ/2IeAd(Toaa&O90m)If#f>OJ2Gu!c<C'rI+a.pjN4)rdG'5IZT#?I\Hb&%XrkgIX[B-
OFE:?ODU(rrdG#fIViqND>.oHIf+$_If4*`If=0rIViqND/F`=IVjONIVjOND1;7spO<$WqgK*<IXZ-q
D16qND16>=IViqNhJE:1If+$_If=0aIf=0aIf+$_If!s^If!s^If4*`OSs"rIf=0aIf!s^Ib\cEITp#n
>?btC>Pr=<If+$_IeR]aD>[T<D>IK/D#o*&rEB8=o323!dV]"gksk_XqaU]l>A`k6kABa+!*dc>`ES1'
qFBsDb?N.[f3>gVo36f:Jk(D_Jk(D_Jk(D_Jk(D_Jk(D_Jk+H`X"hIGjs9gD!''[PrGD4UqM5'/#`aq(
NfK'YN/m=b",DhoL]38,L\H2sD=VQ=3:p5F3;HSR39M:Z,lAYX3;FQ`39<-s<Ppf^<VSQG3:KrHD<Y%#
39XB9D>[E,D=U^(<V8<U<E3m9<B+"I3;lkLD=giXD>7-(D#dT'D<+^iD<Y'eD>@3(<=<YDD,kFQD,kFQ
D,pIMo6p7Jl@%Z/rI+Z^#CUH;D1-hfI0PITLOFr+L[0?hLOK/W%t04gN/*@IN/*@?N/*@IN;eS9N/)h:
I>@'8#D[__I><c0N;eS4N;eS7N/*1:r.b9#r.b9#rJ(B$rJ(B$reLK.!.Fd#!K;g4Mu\Y3N!>&rN/*@?
N;JA1IK#!+I><c:N/WPkN;\e9N!56#Nf8pPr/:W2rJV,>N/*1ILOFr+LOFUHL\-NALPLnFNe`XMLQ%"D
N/*1IN.$Y?N/*@?!fVnnrJ0p%!KN-6NqJ>4LQ%8mMuo#pNr+S4N/-q`!0$]5!0$o;#)nS$Nf9!Rreq;H
Nf9!YN/ijWN/ijWN;&@@NW>%;NW>$dNnKEmN6@4bN/WdUN/mjql]/61r/:W9qMb!*rJU`:o8E[.dZ4?d
l%f=uqhP<4N/mCdkDo(m!0#6[`JfY4qM=QqbDaW#f8R:so8J9WJr##7Jr##7Jr##7Jr##7Jr##7Jr&'8
X+%p7!W>RY7$U;p8:jBa8:jBa8:jBa8:jBa8:jBa8:jBa8:jBa8:jBa8:jBa8:jBa8:jBa8:jBa8:jBa
8:jBa8:jCL8-.lln,\dmJf94ZJf94ZJf94ZJf94ZJf94ZJf94ZJf94ZJf94ZJf94ZJf94ZJf94ZJf94Z
Jf94ZJf94ZJf94Z_AWG#D"(DhCk?JTCk?JTCk?JTCk?JTCk?JTCk?JTCk?JTCk?JTCk?JTCk?JTCk?JT
Ck?JTCk?JTCk?JTCk?JTCr1#RrV4_:TDEU+8aJ#*+7gTX+!;[J+Sm2[+T3Yp+=ANZ+!;[J+<Ma%*rmDX
/G;[)/FZ4=/4hBa/4hBa/4hBDr^dB98P*qoE_1:CqJuG)#'+`UE_/iCr^doH8P*qo8TIBoE_1:&E\)5^
E\'d(8KUM*+%[RR/-m=K/0?Db+"U"Y/.E[C/1_ko/0>s*+"SL*r%.dg!%e*k!%e*k!%dIY+WqjL+!;XJ
+!;XJ+<M^K+!;[J+<M^J+<M^J+<M^J+<Ma)*t'25+<M^J+<M^K+!:n5+!;[J+<VaK+!C1tr?)Fp+=A9Z
+=A6R+<UM(g`QG:"t(N@+=ANZr?hUg+8m;d+!;[J+<Ma*+7gWQ+9<i4mjA)Xr[.^h-fuNU-RUMo/hSON
/c[9k0(gRl+T3Yg+=H_&"=G<>-Qr:6k9gBT-RU#aqB-+m+=A9a/gi8!-Qr@8!$M7g$QpfE+=ANZ-QjcZ
-gVuS-O;=P/gi8!/hSOK0)-do+T<_k+=ANZ/d*dS/hSON/c[9r0(1.h+=A<(-i>S&2D-m?2D-mG0)[^)
/c[9u/d<[U/gi8!0)-gl/d"!a2D4qd!&"7/o.L%jpEoq`r[.so-QjcZ-QjcZr?qOrni$7q!]DYhq(;k0
/iG=?2D3`B"thel/iGU?pboZ@%PBXt/iG=?/iG=?/iGU?r\aa/h)>6j!&"4.!%uh\!C&L@56*V=5NF^&
0)da/0)da/0)\$%2WZjh5NOg"56*V65Nas#56<`-5P78"2X*Ht2Xs!32Xs$)2YK&p5Q"":5O:l'5O:jk
7e]C85Ggp*7cQ_P7Y4*]7asp(8,u-O8An!r7K>[K8<ZOA8,u-T8>J`=8H25]7bUD68D$Dc7f#XU7eTBe
7fP^*5Oq:T5O:VR7K>[&7f,ZL5O(`;8C9uj7a4JU8>o)67`@j28A[p_kP4$6g%s%m_<eH(U%=?KTobA0
OSY[NOSsV8OFDY?TobA0OJ.d3T`Ce]Z1c$'Z1,R;Z,*]]Z,*]]Z,*]MrkSld_84I6cb[rDqTo#k#1(W3
cb[HDrkTDs_84I6_9]s6cb[r4c`tg$c`t<[_4e[HTu!H%Ym@&.Z(\FrTs;H/YmmD#Z*C"-Z([l-Ts:<-
r3?3o!3uNs!3uNs!3tma+crCZTobt0Tobt0OJ.btTobA0OJ.c0OJ.c0OJ.c0OJ.d7TaQsUOJ.c0OJ.bt
To]VCTobA0OH?/tToeo?rK%A8OFE:?OFEmbOJ2T6gnFY-#(DY_OFDY?rI+d/U&C&WTobA0OJ.d8U%=BD
O9'flmsY7urdFm0Icc^rIXZ-_D/Fb$D#f%WD=r>XOSsV/OFHb^"FcG]IZXGUkC*PqIX[B-qN)&5OFE:.
D16>NIZXMW!0I2/$]ogdOFDY?IZT#?IdE0pIL'e>D16>ND/Fb!D>8P[OT'\3OFDY?D$4^)D/Fb$D#f%^
D=;oTOFE;`If+$g>A[S]>A[SKD>d]8D#f%aD$GH+D16>ND>8SXD$+!Z>Aa=C!,_^>o54MVpO3+(rdG-7
IZT#?IZT#?rI4]^nltm+!aBMGq/$=?D-Lj]>A`,!#&RRKD-L4]pfk:5%W,ESD-Lj]D-Lj]D-L4]r`]A>
h-9k_!,_[=!,^:k!CpAm7fZcj8*!kSD>m`>D>m`>D>cul>NK)]8**tO7fZcc8*=+P7flmb8+fC2>NnZL
>Ob2`>Ob5V>P;:e8,P+-8*hto8*hs^1&!Ec8#A#r1#kdC0nM-31"7rS)?;Ma)T4B/0`X`>)NuoS)?;Mf
)Pf+O)ZL_V1"mPH)V?du1&;dg1%lO"1&jbr8+JCG8*iab0`X_n1&E]"8*Vi.)UTJc1!LVg)Q4S/0uYl]
)T!EX,krAW3;QYQD<u]JL\$H-LQ%1IN;A>0N;\bDN/ipWLQ%1IN/*AfLB*,)IJ.OIIIM(]I;OCLI;OCL
I;OC\rbVp@D/E9i<Gb`QqGmAO#$"Z?<GcSQrbWHOD/E9iD,kFi<Gb`a<IIkq<IJ_>D22s0LM_hGI0bUV
I><6+LOF%7I1:seI=6m!I><SpLOFqpr-eO!!.Fj%!.Fj%!.F3h+cM28LQ%"ILQ%"IN/*@NLQ%1IN/*@I
N/*@IN/*@IN/*AjLC9&rN/*@IN/*@NLPuS!LQ%1IN/WONLQ(k\rJV)DN/ijWN/i[PN/.=igkYfd#*+Y&
N/ipWrJgo;L]*/9LQ%1IN/*AkL\$K&Muertmu@C,rf.#<Nol;VNW>%:NWG*!nr*^3N/ipWqi9j""H8A$
N/man"-/>#N;JV8N;\b:N;ehFN/ipWNfK'YN/ijWm#:%d!0$o;"H8A$N/lhV!fW.umu@[4Nf9!WNf8pW
rJ]]q",r8!Nr=n:NrG"-Nq\P6N;ehCN/ijWN/ijWN;8M)N;/D7N/ikmNWtH&N/ijUNn]KsNf8pWN/Wel
N4FlWNf8pWN/ijWN/ijWN/WerMu\moN;eb9Nr=n:Nn0-iLlD:g!0$f2jGX)!repi;repi;rJ9j"jc&hf
jc'%l!0$Q+kD]4m!fVqkon_Rcl%nqinV@1(nVHjsp5J<nr-msfm!e/Sm!aP8pO;:]VLI<Lj+t['Jpr<#
e:.71!.OQV`.%Z6!/UGePCEIH!.O`[UjhNDs(n`bg2*g+fRDP'qJ6.\p2%Hls+o<`np\0+m"iW0!/T-R
qgP8ql@/_Kd;7roc"quJW,14;`I>O;_JB8O7dEUK7f>mI7a=L%8@_3A7bC3"8A%Fj7a4K\7bpUe8:jBa
8:jBa8:jD+8<$#h7"RgY7"RgY7"RgY7"RgY7"RgY7"RgY7"RgY7"RgY7"RgY7)D=mk:u9@Y;,ton1i3C
r>N4$Jhbn4n/Aqor@uP8hD*h)Jf94ZJf94ZJf94Zp)8nkJcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(
JcUH(JcUH(JcW^h!@3-[Cp/<dD")o!If4)nIY*%$Idh0dIf4`?Cu0WsCk?JTCk?JTCk?JTD"_\)<.\)$
<.\)$<.\)$<.\)$<.\)$<.\)$<.\)$<.\)$<.\)$<.\)d<:0Vccd2RgcN4!jqOdb-!(lB*i#hk>kpP14
!$M7g"!8m5-fuKO+<UP)!ZrO-m2tR8ruf</nh0>Xpb)7uoe,niN])JIqDO0pJj4iOJj4iOJj5G`n4&"!
Jjt>]Jjt>]Jjt>]Jjt>]^dc44Jk1JaJk1JaJk1JaJk4-W[R>^8_F3eS!o`,$rS[e?iVM7,cN(fFZ/D>R
OQh5JIK5K/IKQ9mOFH>c!Ka#RO92,;OR8b+OT1E^Ie%@DIe[dR>P2k+D2qhP>P_Q\7tO6_7tO6_7tO6p
8+86b0nM-30nM-30nM-30nM-30u,N])M/lZ)M/lZ)M/lZ)M/mP)R]Zu!Q"m),Q\r*,lJ\`,TQY?r`&r8
k^DBEr/Bm#g5Z/lrf.)9Nf9"\LB3?hrJUf5N/[.Zl&>Y$Ru[3$ooA^*Nf8RKqM^8eJr##7Jr##7Jr#VH
n:#t<Jpr<#Jpr<#Jpr<#Jpr<#^ja1;Jo$$TJo$$TJo$$TJo&\J[T%iX_GgO6j[?dQj$^pUmRYYlJjb2Y
Jjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjdID!9`GE]c,o3
`rYTHcN/UuJcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(
_>sW^j]&p0j&F&umVL3KJlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$
JlI>$JlI>$JlKTdJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2YJjb2Y
Jjb2YJjb2YJjdIDJcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(
JcUH(JcUH(JcW^hJlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$JlI>$
JlI>$JlI>$JlKTdJ,~>

%%EndBinary
grestore
np
grestore
-486.183 526.4 mo
-486.183 529.9 li
.162506 .156372 .158264 rgb
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
-486.183 526.4 mo
-486.183 529.9 li
@
-488.567 543.542 mo
-488.567 544.262 -488.647 544.934 -488.775 545.574 cv
-488.919 546.214 -489.127 546.79 -489.399 547.318 cv
-489.671 547.862 -490.039 548.278 -490.519 548.582 cv
-490.999 548.87 -491.559 549.03 -492.183 549.03 cv
-492.839 549.03 -493.415 548.87 -493.895 548.55 cv
-494.391 548.23 -494.775 547.782 -495.031 547.222 cv
-495.303 546.678 -495.495 546.086 -495.623 545.446 cv
-495.751 544.822 -495.799 544.15 -495.799 543.446 cv
-495.799 542.454 -495.687 541.574 -495.431 540.774 cv
-495.191 539.974 -494.791 539.318 -494.215 538.79 cv
-493.639 538.278 -492.951 538.006 -492.119 538.006 cv
-491.079 538.006 -490.231 538.518 -489.559 539.542 cv
-488.903 540.566 -488.567 541.91 -488.567 543.542 cv
-490.103 543.622 mo
-490.103 541.942 -490.295 540.662 -490.647 539.766 cv
-490.999 538.87 -491.527 538.422 -492.215 538.422 cv
-492.887 538.422 -493.383 538.87 -493.735 539.766 cv
-494.087 540.662 -494.263 541.926 -494.263 543.558 cv
-494.263 545.206 -494.087 546.47 -493.735 547.334 cv
-493.383 548.198 -492.871 548.63 -492.183 548.63 cv
-491.511 548.63 -490.999 548.198 -490.647 547.334 cv
-490.295 546.47 -490.103 545.222 -490.103 543.622 cv
f
-485.287 548.134 mo
-485.287 548.374 -485.383 548.582 -485.559 548.742 cv
-485.735 548.902 -485.943 548.982 -486.183 548.982 cv
-486.439 548.982 -486.647 548.902 -486.807 548.742 cv
-486.983 548.582 -487.063 548.374 -487.063 548.118 cv
-487.063 547.878 -486.983 547.67 -486.807 547.494 cv
-486.631 547.318 -486.423 547.222 -486.167 547.222 cv
-485.943 547.222 -485.735 547.318 -485.559 547.494 cv
-485.383 547.686 -485.287 547.894 -485.287 548.134 cv
f
-476.567 543.542 mo
-476.567 544.262 -476.647 544.934 -476.775 545.574 cv
-476.919 546.214 -477.127 546.79 -477.399 547.318 cv
-477.671 547.862 -478.039 548.278 -478.519 548.582 cv
-478.999 548.87 -479.559 549.03 -480.183 549.03 cv
-480.839 549.03 -481.415 548.87 -481.895 548.55 cv
-482.391 548.23 -482.775 547.782 -483.031 547.222 cv
-483.303 546.678 -483.495 546.086 -483.623 545.446 cv
-483.751 544.822 -483.799 544.15 -483.799 543.446 cv
-483.799 542.454 -483.687 541.574 -483.431 540.774 cv
-483.191 539.974 -482.791 539.318 -482.215 538.79 cv
-481.639 538.278 -480.951 538.006 -480.119 538.006 cv
-479.079 538.006 -478.231 538.518 -477.559 539.542 cv
-476.903 540.566 -476.567 541.91 -476.567 543.542 cv
-478.103 543.622 mo
-478.103 541.942 -478.295 540.662 -478.647 539.766 cv
-478.999 538.87 -479.527 538.422 -480.215 538.422 cv
-480.887 538.422 -481.383 538.87 -481.735 539.766 cv
-482.087 540.662 -482.263 541.926 -482.263 543.558 cv
-482.263 545.206 -482.087 546.47 -481.735 547.334 cv
-481.383 548.198 -480.871 548.63 -480.183 548.63 cv
-479.511 548.63 -478.999 548.198 -478.647 547.334 cv
-478.295 546.47 -478.103 545.222 -478.103 543.622 cv
f
-394.023 526.4 mo
-394.023 529.9 li
f
-394.023 526.4 mo
-394.023 529.9 li
@
-396.407 543.542 mo
-396.407 544.262 -396.487 544.934 -396.615 545.574 cv
-396.759 546.214 -396.967 546.79 -397.239 547.318 cv
-397.511 547.862 -397.879 548.278 -398.359 548.582 cv
-398.839 548.87 -399.399 549.03 -400.023 549.03 cv
-400.679 549.03 -401.255 548.87 -401.735 548.55 cv
-402.231 548.23 -402.615 547.782 -402.871 547.222 cv
-403.143 546.678 -403.335 546.086 -403.463 545.446 cv
-403.591 544.822 -403.639 544.15 -403.639 543.446 cv
-403.639 542.454 -403.527 541.574 -403.271 540.774 cv
-403.031 539.974 -402.631 539.318 -402.055 538.79 cv
-401.479 538.278 -400.791 538.006 -399.959 538.006 cv
-398.919 538.006 -398.071 538.518 -397.399 539.542 cv
-396.743 540.566 -396.407 541.91 -396.407 543.542 cv
-397.943 543.622 mo
-397.943 541.942 -398.135 540.662 -398.487 539.766 cv
-398.839 538.87 -399.367 538.422 -400.055 538.422 cv
-400.727 538.422 -401.223 538.87 -401.575 539.766 cv
-401.927 540.662 -402.103 541.926 -402.103 543.558 cv
-402.103 545.206 -401.927 546.47 -401.575 547.334 cv
-401.223 548.198 -400.711 548.63 -400.023 548.63 cv
-399.351 548.63 -398.839 548.198 -398.487 547.334 cv
-398.135 546.47 -397.943 545.222 -397.943 543.622 cv
f
-393.127 548.134 mo
-393.127 548.374 -393.223 548.582 -393.399 548.742 cv
-393.575 548.902 -393.783 548.982 -394.023 548.982 cv
-394.279 548.982 -394.487 548.902 -394.647 548.742 cv
-394.823 548.582 -394.903 548.374 -394.903 548.118 cv
-394.903 547.878 -394.823 547.67 -394.647 547.494 cv
-394.471 547.318 -394.263 547.222 -394.007 547.222 cv
-393.783 547.222 -393.575 547.318 -393.399 547.494 cv
-393.223 547.686 -393.127 547.894 -393.127 548.134 cv
f
-384.439 546.63 mo
-385.303 548.822 li
-391.559 548.822 li
-391.559 548.63 li
-388.711 545.606 li
-387.975 544.838 -387.431 544.118 -387.111 543.462 cv
-386.791 542.822 -386.631 542.15 -386.631 541.446 cv
-386.631 540.742 -386.839 540.182 -387.223 539.782 cv
-387.623 539.398 -388.167 539.19 -388.855 539.19 cv
-389.431 539.19 -389.895 539.35 -390.231 539.638 cv
-390.567 539.942 -390.887 540.486 -391.207 541.27 cv
-391.543 541.19 li
-391.367 540.198 -390.999 539.43 -390.455 538.854 cv
-389.911 538.294 -389.159 538.006 -388.215 538.006 cv
-387.335 538.006 -386.615 538.278 -386.071 538.806 cv
-385.527 539.35 -385.255 540.022 -385.255 540.822 cv
-385.255 542.038 -385.943 543.35 -387.303 544.79 cv
-389.943 547.606 li
-386.199 547.606 li
-385.847 547.606 -385.575 547.542 -385.367 547.398 cv
-385.159 547.27 -384.919 546.982 -384.663 546.534 cv
-384.439 546.63 li
f
-301.863 526.4 mo
-301.863 529.9 li
f
-301.863 526.4 mo
-301.863 529.9 li
@
-304.247 543.542 mo
-304.247 544.262 -304.327 544.934 -304.455 545.574 cv
-304.599 546.214 -304.807 546.79 -305.079 547.318 cv
-305.351 547.862 -305.719 548.278 -306.199 548.582 cv
-306.679 548.87 -307.239 549.03 -307.863 549.03 cv
-308.519 549.03 -309.095 548.87 -309.575 548.55 cv
-310.071 548.23 -310.455 547.782 -310.711 547.222 cv
-310.983 546.678 -311.175 546.086 -311.303 545.446 cv
-311.431 544.822 -311.479 544.15 -311.479 543.446 cv
-311.479 542.454 -311.367 541.574 -311.111 540.774 cv
-310.871 539.974 -310.471 539.318 -309.895 538.79 cv
-309.319 538.278 -308.631 538.006 -307.799 538.006 cv
-306.759 538.006 -305.911 538.518 -305.239 539.542 cv
-304.583 540.566 -304.247 541.91 -304.247 543.542 cv
-305.783 543.622 mo
-305.783 541.942 -305.975 540.662 -306.327 539.766 cv
-306.679 538.87 -307.207 538.422 -307.895 538.422 cv
-308.567 538.422 -309.063 538.87 -309.415 539.766 cv
-309.767 540.662 -309.943 541.926 -309.943 543.558 cv
-309.943 545.206 -309.767 546.47 -309.415 547.334 cv
-309.063 548.198 -308.551 548.63 -307.863 548.63 cv
-307.191 548.63 -306.679 548.198 -306.327 547.334 cv
-305.975 546.47 -305.783 545.222 -305.783 543.622 cv
f
-300.967 548.134 mo
-300.967 548.374 -301.063 548.582 -301.239 548.742 cv
-301.415 548.902 -301.623 548.982 -301.863 548.982 cv
-302.119 548.982 -302.327 548.902 -302.487 548.742 cv
-302.663 548.582 -302.743 548.374 -302.743 548.118 cv
-302.743 547.878 -302.663 547.67 -302.487 547.494 cv
-302.311 547.318 -302.103 547.222 -301.847 547.222 cv
-301.623 547.222 -301.415 547.318 -301.239 547.494 cv
-301.063 547.686 -300.967 547.894 -300.967 548.134 cv
f
-292.295 546.15 mo
-293.943 546.15 li
-293.943 548.822 li
-295.191 548.822 li
-295.191 546.15 li
-299.671 546.15 li
-299.671 545.126 li
-294.647 538.006 li
-293.943 538.006 li
-293.943 545.126 li
-292.295 545.126 li
-292.295 546.15 li
-295.191 545.126 mo
-295.191 539.638 li
-299.031 545.126 li
-295.191 545.126 li
f
-209.703 526.4 mo
-209.703 529.9 li
f
-209.703 526.4 mo
-209.703 529.9 li
@
-212.087 543.542 mo
-212.087 544.262 -212.167 544.934 -212.295 545.574 cv
-212.439 546.214 -212.647 546.79 -212.919 547.318 cv
-213.191 547.862 -213.559 548.278 -214.039 548.582 cv
-214.519 548.87 -215.079 549.03 -215.703 549.03 cv
-216.359 549.03 -216.935 548.87 -217.415 548.55 cv
-217.911 548.23 -218.295 547.782 -218.551 547.222 cv
-218.823 546.678 -219.015 546.086 -219.143 545.446 cv
-219.271 544.822 -219.319 544.15 -219.319 543.446 cv
-219.319 542.454 -219.207 541.574 -218.951 540.774 cv
-218.711 539.974 -218.311 539.318 -217.735 538.79 cv
-217.159 538.278 -216.471 538.006 -215.639 538.006 cv
-214.599 538.006 -213.751 538.518 -213.079 539.542 cv
-212.423 540.566 -212.087 541.91 -212.087 543.542 cv
-213.623 543.622 mo
-213.623 541.942 -213.815 540.662 -214.167 539.766 cv
-214.519 538.87 -215.047 538.422 -215.735 538.422 cv
-216.407 538.422 -216.903 538.87 -217.255 539.766 cv
-217.607 540.662 -217.783 541.926 -217.783 543.558 cv
-217.783 545.206 -217.607 546.47 -217.255 547.334 cv
-216.903 548.198 -216.391 548.63 -215.703 548.63 cv
-215.031 548.63 -214.519 548.198 -214.167 547.334 cv
-213.815 546.47 -213.623 545.222 -213.623 543.622 cv
f
-208.807 548.134 mo
-208.807 548.374 -208.903 548.582 -209.079 548.742 cv
-209.255 548.902 -209.463 548.982 -209.703 548.982 cv
-209.959 548.982 -210.167 548.902 -210.327 548.742 cv
-210.503 548.582 -210.583 548.374 -210.583 548.118 cv
-210.583 547.878 -210.503 547.67 -210.327 547.494 cv
-210.151 547.318 -209.943 547.222 -209.687 547.222 cv
-209.463 547.222 -209.255 547.318 -209.079 547.494 cv
-208.903 547.686 -208.807 547.894 -208.807 548.134 cv
f
-200.567 537.878 mo
-200.535 538.134 li
-201.799 538.342 -202.855 538.854 -203.687 539.67 cv
-204.535 540.486 -205.063 541.494 -205.271 542.694 cv
-204.663 542.214 -203.975 541.974 -203.239 541.974 cv
-202.311 541.974 -201.575 542.278 -201.031 542.87 cv
-200.487 543.478 -200.215 544.294 -200.215 545.318 cv
-200.215 546.374 -200.487 547.222 -201.031 547.878 cv
-201.671 548.646 -202.519 549.03 -203.575 549.03 cv
-204.887 549.03 -205.831 548.502 -206.407 547.43 cv
-206.919 546.518 -207.159 545.494 -207.159 544.358 cv
-207.159 542.614 -206.583 541.142 -205.415 539.942 cv
-204.759 539.27 -204.087 538.79 -203.383 538.502 cv
-202.679 538.214 -201.751 538.006 -200.567 537.878 cv
-201.655 545.814 mo
-201.655 543.75 -202.375 542.71 -203.815 542.71 cv
-204.359 542.71 -204.791 542.854 -205.143 543.142 cv
-205.495 543.43 -205.671 543.894 -205.671 544.566 cv
-205.671 545.814 -205.479 546.806 -205.095 547.526 cv
-204.711 548.246 -204.135 548.598 -203.399 548.598 cv
-202.839 548.598 -202.407 548.358 -202.103 547.846 cv
-201.815 547.334 -201.655 546.662 -201.655 545.814 cv
f
-117.543 526.4 mo
-117.543 529.9 li
f
-117.543 526.4 mo
-117.543 529.9 li
@
-119.927 543.542 mo
-119.927 544.262 -120.007 544.934 -120.135 545.574 cv
-120.279 546.214 -120.487 546.79 -120.759 547.318 cv
-121.031 547.862 -121.399 548.278 -121.879 548.582 cv
-122.359 548.87 -122.919 549.03 -123.543 549.03 cv
-124.199 549.03 -124.775 548.87 -125.255 548.55 cv
-125.751 548.23 -126.135 547.782 -126.391 547.222 cv
-126.663 546.678 -126.855 546.086 -126.983 545.446 cv
-127.111 544.822 -127.159 544.15 -127.159 543.446 cv
-127.159 542.454 -127.047 541.574 -126.791 540.774 cv
-126.551 539.974 -126.151 539.318 -125.575 538.79 cv
-124.999 538.278 -124.311 538.006 -123.479 538.006 cv
-122.439 538.006 -121.591 538.518 -120.919 539.542 cv
-120.263 540.566 -119.927 541.91 -119.927 543.542 cv
-121.463 543.622 mo
-121.463 541.942 -121.655 540.662 -122.007 539.766 cv
-122.359 538.87 -122.887 538.422 -123.575 538.422 cv
-124.247 538.422 -124.743 538.87 -125.095 539.766 cv
-125.447 540.662 -125.623 541.926 -125.623 543.558 cv
-125.623 545.206 -125.447 546.47 -125.095 547.334 cv
-124.743 548.198 -124.231 548.63 -123.543 548.63 cv
-122.871 548.63 -122.359 548.198 -122.007 547.334 cv
-121.655 546.47 -121.463 545.222 -121.463 543.622 cv
f
-116.647 548.134 mo
-116.647 548.374 -116.743 548.582 -116.919 548.742 cv
-117.095 548.902 -117.303 548.982 -117.543 548.982 cv
-117.799 548.982 -118.007 548.902 -118.167 548.742 cv
-118.343 548.582 -118.423 548.374 -118.423 548.118 cv
-118.423 547.878 -118.343 547.67 -118.167 547.494 cv
-117.991 547.318 -117.783 547.222 -117.527 547.222 cv
-117.303 547.222 -117.095 547.318 -116.919 547.494 cv
-116.743 547.686 -116.647 547.894 -116.647 548.134 cv
f
-108.423 546.342 mo
-108.423 547.174 -108.711 547.83 -109.287 548.31 cv
-109.863 548.79 -110.615 549.03 -111.575 549.03 cv
-112.471 549.03 -113.207 548.79 -113.783 548.31 cv
-114.359 547.83 -114.647 547.206 -114.647 546.438 cv
-114.647 545.878 -114.519 545.398 -114.231 544.998 cv
-113.959 544.598 -113.399 544.102 -112.567 543.51 cv
-113.367 542.854 -113.911 542.326 -114.167 541.91 cv
-114.423 541.51 -114.551 541.046 -114.551 540.502 cv
-114.551 539.75 -114.263 539.142 -113.687 538.694 cv
-113.111 538.246 -112.359 538.006 -111.447 538.006 cv
-110.679 538.006 -110.039 538.23 -109.527 538.678 cv
-109.015 539.126 -108.759 539.654 -108.759 540.294 cv
-108.759 540.886 -108.919 541.35 -109.223 541.702 cv
-109.527 542.054 -110.087 542.454 -110.903 542.886 cv
-109.943 543.526 -109.303 544.102 -108.951 544.598 cv
-108.599 545.11 -108.423 545.686 -108.423 546.342 cv
-109.863 540.294 mo
-109.863 539.75 -110.023 539.302 -110.327 538.966 cv
-110.647 538.63 -111.063 538.454 -111.607 538.454 cv
-112.151 538.454 -112.583 538.598 -112.903 538.886 cv
-113.223 539.174 -113.367 539.558 -113.367 540.038 cv
-113.367 540.534 -113.223 540.982 -112.903 541.382 cv
-112.583 541.782 -112.071 542.182 -111.367 542.598 cv
-110.823 542.278 -110.439 541.942 -110.215 541.59 cv
-109.991 541.238 -109.863 540.806 -109.863 540.294 cv
-111.207 544.47 mo
-112.151 543.83 li
-112.631 544.214 -112.951 544.598 -113.143 544.966 cv
-113.335 545.334 -113.431 545.782 -113.431 546.294 cv
-113.431 547.03 -113.255 547.59 -112.887 547.99 cv
-112.519 548.406 -112.023 548.598 -111.399 548.598 cv
-110.887 548.598 -110.455 548.438 -110.135 548.118 cv
-109.815 547.798 -109.639 547.366 -109.639 546.838 cv
-109.639 546.358 -109.767 545.942 -110.007 545.574 cv
-110.263 545.222 -110.663 544.854 -111.207 544.47 cv
f
-25.383 526.4 mo
-25.383 529.9 li
f
-25.383 526.4 mo
-25.383 529.9 li
@
-29.079 548.822 mo
-33.495 548.822 li
-33.495 548.582 li
-32.919 548.55 -32.519 548.454 -32.295 548.262 cv
-32.087 548.07 -31.975 547.75 -31.975 547.302 cv
-31.975 540.118 li
-31.975 539.606 -32.135 539.334 -32.455 539.334 cv
-32.615 539.334 -32.855 539.398 -33.175 539.526 cv
-33.607 539.686 li
-33.607 539.462 li
-30.743 538.006 li
-30.599 538.054 li
-30.599 547.606 li
-30.599 547.958 -30.503 548.214 -30.279 548.358 cv
-30.071 548.518 -29.671 548.582 -29.079 548.582 cv
-29.079 548.822 li
f
-24.487 548.134 mo
-24.487 548.374 -24.583 548.582 -24.759 548.742 cv
-24.935 548.902 -25.143 548.982 -25.383 548.982 cv
-25.639 548.982 -25.847 548.902 -26.007 548.742 cv
-26.183 548.582 -26.263 548.374 -26.263 548.118 cv
-26.263 547.878 -26.183 547.67 -26.007 547.494 cv
-25.831 547.318 -25.623 547.222 -25.367 547.222 cv
-25.143 547.222 -24.935 547.318 -24.759 547.494 cv
-24.583 547.686 -24.487 547.894 -24.487 548.134 cv
f
-15.767 543.542 mo
-15.767 544.262 -15.847 544.934 -15.975 545.574 cv
-16.119 546.214 -16.327 546.79 -16.599 547.318 cv
-16.871 547.862 -17.239 548.278 -17.719 548.582 cv
-18.199 548.87 -18.759 549.03 -19.383 549.03 cv
-20.039 549.03 -20.615 548.87 -21.095 548.55 cv
-21.591 548.23 -21.975 547.782 -22.231 547.222 cv
-22.503 546.678 -22.695 546.086 -22.823 545.446 cv
-22.951 544.822 -22.999 544.15 -22.999 543.446 cv
-22.999 542.454 -22.887 541.574 -22.631 540.774 cv
-22.391 539.974 -21.991 539.318 -21.415 538.79 cv
-20.839 538.278 -20.151 538.006 -19.319 538.006 cv
-18.279 538.006 -17.431 538.518 -16.759 539.542 cv
-16.103 540.566 -15.767 541.91 -15.767 543.542 cv
-17.303 543.622 mo
-17.303 541.942 -17.495 540.662 -17.847 539.766 cv
-18.199 538.87 -18.727 538.422 -19.415 538.422 cv
-20.087 538.422 -20.583 538.87 -20.935 539.766 cv
-21.287 540.662 -21.463 541.926 -21.463 543.558 cv
-21.463 545.206 -21.287 546.47 -20.935 547.334 cv
-20.583 548.198 -20.071 548.63 -19.383 548.63 cv
-18.711 548.63 -18.199 548.198 -17.847 547.334 cv
-17.495 546.47 -17.303 545.222 -17.303 543.622 cv
f
-268.244 568.407 mo
-267.984 568.627 li
-268.624 569.627 -269.444 570.127 -270.404 570.127 cv
-271.584 570.127 -272.164 569.287 -272.164 567.607 cv
-272.164 561.587 li
-273.224 561.587 li
-273.304 561.447 li
-273.304 561.347 -273.204 561.227 -272.964 561.067 cv
-272.464 560.787 -271.824 560.067 -271.024 558.927 cv
-271.004 558.887 -270.944 558.807 -270.844 558.687 cv
-270.744 558.567 -270.664 558.447 -270.624 558.367 cv
-270.544 558.367 -270.484 558.467 -270.484 558.627 cv
-270.484 560.947 li
-268.464 560.947 li
-268.464 561.587 li
-270.484 561.587 li
-270.484 567.307 li
-270.484 567.947 -270.404 568.407 -270.244 568.687 cv
-270.084 568.967 -269.824 569.107 -269.444 569.107 cv
-269.044 569.107 -268.644 568.887 -268.244 568.407 cv
f
-264.404 557.307 mo
-264.404 557.607 -264.504 557.847 -264.704 558.047 cv
-264.904 558.247 -265.164 558.327 -265.444 558.327 cv
-265.724 558.327 -265.964 558.247 -266.164 558.047 cv
-266.364 557.847 -266.444 557.607 -266.444 557.307 cv
-266.444 557.027 -266.344 556.787 -266.144 556.587 cv
-265.944 556.387 -265.704 556.287 -265.424 556.287 cv
-265.144 556.287 -264.904 556.387 -264.704 556.587 cv
-264.504 556.787 -264.404 557.027 -264.404 557.307 cv
-262.944 569.947 mo
-267.684 569.947 li
-267.684 569.647 li
-267.004 569.607 -266.564 569.487 -266.384 569.287 cv
-266.204 569.087 -266.104 568.627 -266.104 567.867 cv
-266.104 563.327 li
-266.104 562.867 -266.164 562.547 -266.244 562.347 cv
-266.344 562.167 -266.524 562.067 -266.764 562.067 cv
-267.084 562.067 -267.364 562.107 -267.604 562.167 cv
-267.604 561.847 li
-264.504 560.747 li
-264.424 560.827 li
-264.424 567.847 li
-264.424 568.607 -264.344 569.067 -264.184 569.267 cv
-264.024 569.467 -263.604 569.607 -262.944 569.647 cv
-262.944 569.947 li
f
-246.944 569.947 mo
-251.304 569.947 li
-251.304 569.647 li
-250.744 569.607 -250.404 569.487 -250.244 569.307 cv
-250.084 569.127 -250.004 568.747 -250.004 568.147 cv
-250.004 564.027 li
-250.004 563.227 -250.124 562.667 -250.364 562.307 cv
-250.604 561.967 -250.984 561.787 -251.544 561.787 cv
-252.024 561.787 -252.424 561.887 -252.744 562.067 cv
-253.064 562.267 -253.384 562.567 -253.684 563.007 cv
-253.684 568.047 li
-253.684 568.687 -253.604 569.127 -253.404 569.327 cv
-253.204 569.527 -252.824 569.647 -252.244 569.647 cv
-252.244 569.947 li
-256.724 569.947 li
-256.724 569.647 li
-256.144 569.607 -255.764 569.527 -255.604 569.367 cv
-255.444 569.207 -255.364 568.827 -255.364 568.227 cv
-255.364 564.007 li
-255.364 562.527 -255.804 561.787 -256.664 561.787 cv
-257.044 561.787 -257.444 561.887 -257.864 562.047 cv
-258.284 562.207 -258.584 562.407 -258.784 562.647 cv
-258.964 562.847 -259.044 562.967 -259.044 562.987 cv
-259.044 568.547 li
-259.044 568.987 -258.964 569.267 -258.764 569.407 cv
-258.584 569.547 -258.224 569.627 -257.684 569.647 cv
-257.684 569.947 li
-262.124 569.947 li
-262.124 569.647 li
-261.564 569.647 -261.204 569.547 -261.004 569.347 cv
-260.824 569.147 -260.724 568.767 -260.724 568.187 cv
-260.724 563.227 li
-260.724 562.747 -260.784 562.407 -260.884 562.207 cv
-261.004 562.007 -261.184 561.907 -261.424 561.907 cv
-261.624 561.907 -261.844 561.947 -262.064 561.987 cv
-262.064 561.647 li
-261.164 561.407 -260.244 561.107 -259.284 560.747 cv
-259.124 560.807 li
-259.124 562.287 li
-259.084 562.287 li
-258.484 561.667 -257.964 561.247 -257.504 561.047 cv
-257.044 560.847 -256.544 560.747 -256.024 560.747 cv
-254.984 560.747 -254.264 561.307 -253.904 562.427 cv
-252.864 561.307 -251.784 560.747 -250.644 560.747 cv
-249.104 560.747 -248.324 561.947 -248.324 564.347 cv
-248.324 568.407 li
-248.324 568.847 -248.264 569.167 -248.124 569.327 cv
-248.004 569.487 -247.784 569.587 -247.464 569.607 cv
-246.944 569.647 li
-246.944 569.947 li
f
-238.724 566.667 mo
-238.404 566.807 li
-239.204 569.027 -240.604 570.127 -242.584 570.127 cv
-243.764 570.127 -244.684 569.727 -245.364 568.907 cv
-246.044 568.107 -246.384 567.007 -246.384 565.607 cv
-246.384 564.187 -246.004 563.027 -245.244 562.107 cv
-244.484 561.207 -243.484 560.747 -242.244 560.747 cv
-241.044 560.747 -240.124 561.207 -239.464 562.127 cv
-239.084 562.667 -238.864 563.427 -238.784 564.407 cv
-244.944 564.407 li
-244.904 565.247 -244.824 565.887 -244.704 566.327 cv
-244.584 566.767 -244.364 567.227 -244.024 567.667 cv
-243.464 568.407 -242.724 568.767 -241.804 568.767 cv
-241.164 568.767 -240.604 568.607 -240.164 568.287 cv
-239.724 567.967 -239.244 567.427 -238.724 566.667 cv
-244.904 563.767 mo
-240.824 563.767 li
-240.944 562.927 -241.144 562.347 -241.424 561.987 cv
-241.704 561.647 -242.144 561.467 -242.784 561.467 cv
-243.344 561.467 -243.824 561.667 -244.184 562.067 cv
-244.564 562.467 -244.804 563.027 -244.904 563.767 cv
f
-486.183 526.4 mo
-489.683 526.4 li
f
-486.183 526.4 mo
-489.683 526.4 li
@
-498.067 526.581 mo
-498.067 527.301 -498.147 527.973 -498.275 528.613 cv
-498.419 529.253 -498.627 529.829 -498.899 530.357 cv
-499.171 530.901 -499.539 531.317 -500.019 531.621 cv
-500.499 531.909 -501.059 532.069 -501.683 532.069 cv
-502.339 532.069 -502.915 531.909 -503.395 531.589 cv
-503.891 531.269 -504.275 530.821 -504.531 530.261 cv
-504.803 529.717 -504.995 529.125 -505.123 528.485 cv
-505.251 527.861 -505.299 527.189 -505.299 526.485 cv
-505.299 525.493 -505.187 524.613 -504.931 523.813 cv
-504.691 523.013 -504.291 522.357 -503.715 521.829 cv
-503.139 521.317 -502.451 521.045 -501.619 521.045 cv
-500.579 521.045 -499.731 521.557 -499.059 522.581 cv
-498.403 523.605 -498.067 524.949 -498.067 526.581 cv
-499.603 526.661 mo
-499.603 524.981 -499.795 523.701 -500.147 522.805 cv
-500.499 521.909 -501.027 521.461 -501.715 521.461 cv
-502.387 521.461 -502.883 521.909 -503.235 522.805 cv
-503.587 523.701 -503.763 524.965 -503.763 526.597 cv
-503.763 528.245 -503.587 529.509 -503.235 530.373 cv
-502.883 531.237 -502.371 531.669 -501.683 531.669 cv
-501.011 531.669 -500.499 531.237 -500.147 530.373 cv
-499.795 529.509 -499.603 528.261 -499.603 526.661 cv
f
-486.183 464.96 mo
-489.683 464.96 li
f
-486.183 464.96 mo
-489.683 464.96 li
@
-498.099 468.229 mo
-498.963 470.421 li
-505.219 470.421 li
-505.219 470.229 li
-502.371 467.205 li
-501.635 466.437 -501.091 465.717 -500.771 465.061 cv
-500.451 464.421 -500.291 463.749 -500.291 463.045 cv
-500.291 462.341 -500.499 461.781 -500.883 461.381 cv
-501.283 460.997 -501.827 460.789 -502.515 460.789 cv
-503.091 460.789 -503.555 460.949 -503.891 461.237 cv
-504.227 461.541 -504.547 462.085 -504.867 462.869 cv
-505.203 462.789 li
-505.027 461.797 -504.659 461.029 -504.115 460.453 cv
-503.571 459.893 -502.819 459.605 -501.875 459.605 cv
-500.995 459.605 -500.275 459.877 -499.731 460.405 cv
-499.187 460.949 -498.915 461.621 -498.915 462.421 cv
-498.915 463.637 -499.603 464.949 -500.963 466.389 cv
-503.603 469.205 li
-499.859 469.205 li
-499.507 469.205 -499.235 469.141 -499.027 468.997 cv
-498.819 468.869 -498.579 468.581 -498.323 468.133 cv
-498.099 468.229 li
f
-486.183 403.52 mo
-489.683 403.52 li
f
-486.183 403.52 mo
-489.683 403.52 li
@
-498.115 406.309 mo
-499.763 406.309 li
-499.763 408.981 li
-501.011 408.981 li
-501.011 406.309 li
-505.491 406.309 li
-505.491 405.285 li
-500.467 398.165 li
-499.763 398.165 li
-499.763 405.285 li
-498.115 405.285 li
-498.115 406.309 li
-501.011 405.285 mo
-501.011 399.797 li
-504.851 405.285 li
-501.011 405.285 li
f
-486.183 342.08 mo
-489.683 342.08 li
f
-486.183 342.08 mo
-489.683 342.08 li
@
-498.547 336.597 mo
-498.515 336.853 li
-499.779 337.061 -500.835 337.573 -501.667 338.389 cv
-502.515 339.205 -503.043 340.213 -503.251 341.413 cv
-502.643 340.933 -501.955 340.693 -501.219 340.693 cv
-500.291 340.693 -499.555 340.997 -499.011 341.589 cv
-498.467 342.197 -498.195 343.013 -498.195 344.037 cv
-498.195 345.093 -498.467 345.941 -499.011 346.597 cv
-499.651 347.365 -500.499 347.749 -501.555 347.749 cv
-502.867 347.749 -503.811 347.221 -504.387 346.149 cv
-504.899 345.237 -505.139 344.213 -505.139 343.077 cv
-505.139 341.333 -504.563 339.861 -503.395 338.661 cv
-502.739 337.989 -502.067 337.509 -501.363 337.221 cv
-500.659 336.933 -499.731 336.725 -498.547 336.597 cv
-499.635 344.533 mo
-499.635 342.469 -500.355 341.429 -501.795 341.429 cv
-502.339 341.429 -502.771 341.573 -503.123 341.861 cv
-503.475 342.149 -503.651 342.613 -503.651 343.285 cv
-503.651 344.533 -503.459 345.525 -503.075 346.245 cv
-502.691 346.965 -502.115 347.317 -501.379 347.317 cv
-500.819 347.317 -500.387 347.077 -500.083 346.565 cv
-499.795 346.053 -499.635 345.381 -499.635 344.533 cv
f
-486.183 280.64 mo
-489.683 280.64 li
f
-486.183 280.64 mo
-489.683 280.64 li
@
-498.563 283.621 mo
-498.563 284.453 -498.851 285.109 -499.427 285.589 cv
-500.003 286.069 -500.755 286.309 -501.715 286.309 cv
-502.611 286.309 -503.347 286.069 -503.923 285.589 cv
-504.499 285.109 -504.787 284.485 -504.787 283.717 cv
-504.787 283.157 -504.659 282.677 -504.371 282.277 cv
-504.099 281.877 -503.539 281.381 -502.707 280.789 cv
-503.507 280.133 -504.051 279.605 -504.307 279.189 cv
-504.563 278.789 -504.691 278.325 -504.691 277.781 cv
-504.691 277.029 -504.403 276.421 -503.827 275.973 cv
-503.251 275.525 -502.499 275.285 -501.587 275.285 cv
-500.819 275.285 -500.179 275.509 -499.667 275.957 cv
-499.155 276.405 -498.899 276.933 -498.899 277.573 cv
-498.899 278.165 -499.059 278.629 -499.363 278.981 cv
-499.667 279.333 -500.227 279.733 -501.043 280.165 cv
-500.083 280.805 -499.443 281.381 -499.091 281.877 cv
-498.739 282.389 -498.563 282.965 -498.563 283.621 cv
-500.003 277.573 mo
-500.003 277.029 -500.163 276.581 -500.467 276.245 cv
-500.787 275.909 -501.203 275.733 -501.747 275.733 cv
-502.291 275.733 -502.723 275.877 -503.043 276.165 cv
-503.363 276.453 -503.507 276.837 -503.507 277.317 cv
-503.507 277.813 -503.363 278.261 -503.043 278.661 cv
-502.723 279.061 -502.211 279.461 -501.507 279.877 cv
-500.963 279.557 -500.579 279.221 -500.355 278.869 cv
-500.131 278.517 -500.003 278.085 -500.003 277.573 cv
-501.347 281.749 mo
-502.291 281.109 li
-502.771 281.493 -503.091 281.877 -503.283 282.245 cv
-503.475 282.613 -503.571 283.061 -503.571 283.573 cv
-503.571 284.309 -503.395 284.869 -503.027 285.269 cv
-502.659 285.685 -502.163 285.877 -501.539 285.877 cv
-501.027 285.877 -500.595 285.717 -500.275 285.397 cv
-499.955 285.077 -499.779 284.645 -499.779 284.117 cv
-499.779 283.637 -499.907 283.221 -500.147 282.853 cv
-500.403 282.501 -500.803 282.133 -501.347 281.749 cv
f
-486.183 219.2 mo
-489.683 219.2 li
f
-486.183 219.2 mo
-489.683 219.2 li
@
-507.379 224.661 mo
-511.795 224.661 li
-511.795 224.421 li
-511.219 224.389 -510.819 224.293 -510.595 224.101 cv
-510.387 223.909 -510.275 223.589 -510.275 223.141 cv
-510.275 215.957 li
-510.275 215.445 -510.435 215.173 -510.755 215.173 cv
-510.915 215.173 -511.155 215.237 -511.475 215.365 cv
-511.907 215.525 li
-511.907 215.301 li
-509.043 213.845 li
-508.899 213.893 li
-508.899 223.445 li
-508.899 223.797 -508.803 224.053 -508.579 224.197 cv
-508.371 224.357 -507.971 224.421 -507.379 224.421 cv
-507.379 224.661 li
f
-498.067 219.381 mo
-498.067 220.101 -498.147 220.773 -498.275 221.413 cv
-498.419 222.053 -498.627 222.629 -498.899 223.157 cv
-499.171 223.701 -499.539 224.117 -500.019 224.421 cv
-500.499 224.709 -501.059 224.869 -501.683 224.869 cv
-502.339 224.869 -502.915 224.709 -503.395 224.389 cv
-503.891 224.069 -504.275 223.621 -504.531 223.061 cv
-504.803 222.517 -504.995 221.925 -505.123 221.285 cv
-505.251 220.661 -505.299 219.989 -505.299 219.285 cv
-505.299 218.293 -505.187 217.413 -504.931 216.613 cv
-504.691 215.813 -504.291 215.157 -503.715 214.629 cv
-503.139 214.117 -502.451 213.845 -501.619 213.845 cv
-500.579 213.845 -499.731 214.357 -499.059 215.381 cv
-498.403 216.405 -498.067 217.749 -498.067 219.381 cv
-499.603 219.461 mo
-499.603 217.781 -499.795 216.501 -500.147 215.605 cv
-500.499 214.709 -501.027 214.261 -501.715 214.261 cv
-502.387 214.261 -502.883 214.709 -503.235 215.605 cv
-503.587 216.501 -503.763 217.765 -503.763 219.397 cv
-503.763 221.045 -503.587 222.309 -503.235 223.173 cv
-502.883 224.037 -502.371 224.469 -501.683 224.469 cv
-501.011 224.469 -500.499 224.037 -500.147 223.173 cv
-499.795 222.309 -499.603 221.061 -499.603 219.461 cv
f
-486.183 157.76 mo
-489.683 157.76 li
f
-486.183 157.76 mo
-489.683 157.76 li
@
-507.379 163.221 mo
-511.795 163.221 li
-511.795 162.981 li
-511.219 162.949 -510.819 162.853 -510.595 162.661 cv
-510.387 162.469 -510.275 162.149 -510.275 161.701 cv
-510.275 154.517 li
-510.275 154.005 -510.435 153.733 -510.755 153.733 cv
-510.915 153.733 -511.155 153.797 -511.475 153.925 cv
-511.907 154.085 li
-511.907 153.861 li
-509.043 152.405 li
-508.899 152.453 li
-508.899 162.005 li
-508.899 162.357 -508.803 162.613 -508.579 162.757 cv
-508.371 162.917 -507.971 162.981 -507.379 162.981 cv
-507.379 163.221 li
f
-498.099 161.029 mo
-498.963 163.221 li
-505.219 163.221 li
-505.219 163.029 li
-502.371 160.005 li
-501.635 159.237 -501.091 158.517 -500.771 157.861 cv
-500.451 157.221 -500.291 156.549 -500.291 155.845 cv
-500.291 155.141 -500.499 154.581 -500.883 154.181 cv
-501.283 153.797 -501.827 153.589 -502.515 153.589 cv
-503.091 153.589 -503.555 153.749 -503.891 154.037 cv
-504.227 154.341 -504.547 154.885 -504.867 155.669 cv
-505.203 155.589 li
-505.027 154.597 -504.659 153.829 -504.115 153.253 cv
-503.571 152.693 -502.819 152.405 -501.875 152.405 cv
-500.995 152.405 -500.275 152.677 -499.731 153.205 cv
-499.187 153.749 -498.915 154.421 -498.915 155.221 cv
-498.915 156.437 -499.603 157.749 -500.963 159.189 cv
-503.603 162.005 li
-499.859 162.005 li
-499.507 162.005 -499.235 161.941 -499.027 161.797 cv
-498.819 161.669 -498.579 161.381 -498.323 160.933 cv
-498.099 161.029 li
f
-486.183 96.32 mo
-489.683 96.32 li
f
-486.183 96.32 mo
-489.683 96.32 li
@
-507.379 101.781 mo
-511.795 101.781 li
-511.795 101.541 li
-511.219 101.509 -510.819 101.413 -510.595 101.221 cv
-510.387 101.029 -510.275 100.709 -510.275 100.261 cv
-510.275 93.0769 li
-510.275 92.5649 -510.435 92.2929 -510.755 92.2929 cv
-510.915 92.2929 -511.155 92.3569 -511.475 92.4849 cv
-511.907 92.6449 li
-511.907 92.4209 li
-509.043 90.9649 li
-508.899 91.0129 li
-508.899 100.565 li
-508.899 100.917 -508.803 101.173 -508.579 101.317 cv
-508.371 101.477 -507.971 101.541 -507.379 101.541 cv
-507.379 101.781 li
f
-498.115 99.1089 mo
-499.763 99.1089 li
-499.763 101.781 li
-501.011 101.781 li
-501.011 99.1089 li
-505.491 99.1089 li
-505.491 98.0849 li
-500.467 90.9649 li
-499.763 90.9649 li
-499.763 98.0849 li
-498.115 98.0849 li
-498.115 99.1089 li
-501.011 98.0849 mo
-501.011 92.5969 li
-504.851 98.0849 li
-501.011 98.0849 li
f
-532.587 295.28 mo
-532.267 295.28 li
-532.227 295.76 -532.027 296.28 -531.667 296.8 cv
-531.307 297.34 -530.467 298.34 -529.187 299.78 cv
-527.427 299.04 li
-525.707 298.32 -524.847 297.78 -524.847 297.42 cv
-524.847 297.14 -525.127 296.84 -525.687 296.52 cv
-525.787 296.46 -525.967 296.36 -526.207 296.22 cv
-525.987 295.92 li
-525.147 296.4 -524.567 296.78 -524.267 297.08 cv
-523.987 297.4 -523.827 297.74 -523.827 298.14 cv
-523.827 298.44 -523.947 298.7 -524.167 298.94 cv
-524.387 299.18 -524.807 299.44 -525.447 299.76 cv
-526.207 300.16 -527.147 300.56 -528.267 300.96 cv
-527.627 301.76 li
-524.027 302.72 li
-524.027 304.22 li
-534.587 301.4 li
-535.247 301.22 -535.827 301.1 -536.347 301.04 cv
-536.667 301.08 -536.827 301.42 -536.827 302.06 cv
-536.827 302.42 li
-537.147 302.42 li
-537.267 301.42 -537.447 300.38 -537.687 299.28 cv
-537.567 299.16 li
-528.447 301.56 li
-529.107 300.7 li
-530.567 298.8 -531.507 297.84 -531.907 297.84 cv
-532.147 297.84 -532.267 298.1 -532.267 298.58 cv
-532.267 298.86 li
-532.587 298.86 li
-532.587 295.28 li
f
-530.945 291.476 mo
-530.721 291.42 li
-530.497 292.106 -530.161 292.442 -529.713 292.442 cv
-529.489 292.442 -529.349 292.316 -529.307 292.036 cv
-529.867 291.196 -530.161 290.524 -530.161 290.034 cv
-530.161 289.6 -530.007 289.376 -529.727 289.376 cv
-529.447 289.376 -529.223 289.572 -529.055 289.936 cv
-528.887 290.3 -528.817 290.846 -528.817 291.56 cv
-528.817 291.91 -528.649 292.19 -528.341 292.414 cv
-528.019 292.638 -527.739 292.75 -527.487 292.75 cv
-527.165 292.75 -526.913 292.638 -526.745 292.386 cv
-527.123 291.84 -527.319 291.196 -527.319 290.454 cv
-527.319 289.964 -527.179 289.712 -526.899 289.712 cv
-526.731 289.712 -526.577 289.782 -526.465 289.894 cv
-526.353 290.02 -526.269 290.174 -526.213 290.356 cv
-526.157 290.552 -526.115 290.72 -526.087 290.874 cv
-526.059 291.042 -526.059 291.182 -526.059 291.322 cv
-526.059 291.602 -526.115 291.938 -526.241 292.33 cv
-526.073 292.834 -525.723 293.324 -525.191 293.786 cv
-524.659 294.248 -524.141 294.486 -523.665 294.486 cv
-523.203 294.486 -522.867 294.36 -522.671 294.108 cv
-522.461 293.856 -522.363 293.464 -522.363 292.96 cv
-522.363 292.904 -522.363 292.806 -522.363 292.666 cv
-522.363 292.54 -522.377 292.456 -522.377 292.428 cv
-522.377 291.84 -522.251 291.392 -522.027 291.07 cv
-521.789 290.762 -521.481 290.594 -521.103 290.594 cv
-520.683 290.594 -520.291 290.734 -519.913 290.986 cv
-519.605 291.196 -519.339 291.476 -519.129 291.84 cv
-518.919 292.204 -518.807 292.554 -518.807 292.862 cv
-518.807 293.128 -518.877 293.352 -518.989 293.534 cv
-519.115 293.716 -519.297 293.8 -519.535 293.8 cv
-519.703 293.8 -519.843 293.744 -519.955 293.632 cv
-520.067 293.52 -520.123 293.38 -520.123 293.198 cv
-520.123 293.058 -520.067 292.89 -519.927 292.722 cv
-519.787 292.554 -519.717 292.4 -519.717 292.288 cv
-519.717 291.98 -519.815 291.714 -519.997 291.49 cv
-520.179 291.266 -520.403 291.154 -520.683 291.154 cv
-521.159 291.154 -521.383 291.518 -521.383 292.218 cv
-521.383 292.344 -521.369 292.554 -521.313 292.848 cv
-521.271 293.142 -521.243 293.352 -521.243 293.492 cv
-521.243 294.64 -521.789 295.2 -522.881 295.2 cv
-523.637 295.2 -524.351 294.962 -524.995 294.514 cv
-525.639 294.066 -526.129 293.478 -526.493 292.75 cv
-526.717 293.1 -527.011 293.268 -527.375 293.268 cv
-527.921 293.268 -528.425 293.002 -528.873 292.456 cv
-528.873 292.582 -528.929 292.722 -529.055 292.876 cv
-529.181 293.044 -529.335 293.114 -529.503 293.114 cv
-530.175 293.114 -530.665 292.568 -530.945 291.476 cv
f
2 lc
0 lj
-486.183 526.4 mo
-486.183 65.6 li
@
-25.383 526.4 mo
-25.383 65.6 li
@
-486.183 526.4 mo
-25.383 526.4 li
@
-486.183 65.6 mo
-25.383 65.6 li
@
gsave
-486.183 65.6 mo
-25.3829 65.6 li
-25.3829 54.08 li
-486.183 54.08 li
-486.183 65.6 li
clp
-486.183 65.6 mo
-455.463 65.6 li
-56.103 65.6 li
-25.383 65.6 li
-25.383 54.08 li
-56.103 54.08 li
-455.463 54.08 li
-486.183 54.08 li
cp
1 1 1 rgb
f
.01 lw
0 lc
-486.183 65.6 mo
-455.463 65.6 li
-56.103 65.6 li
-25.383 65.6 li
-25.383 54.08 li
-56.103 54.08 li
-455.463 54.08 li
-486.183 54.08 li
cp
@
grestore
-486.183 65.6 mo
-455.463 65.6 li
-455.463 54.08 li
-486.183 54.08 li
-486.183 65.6 li
.267004 .004874 .329415 rgb
f
-455.463 65.6 mo
-424.743 65.6 li
-424.743 54.08 li
-455.463 54.08 li
-455.463 65.6 li
.28291 .105393 .426902 rgb
f
-424.743 65.6 mo
-394.023 65.6 li
-394.023 54.08 li
-424.743 54.08 li
-424.743 65.6 li
.275191 .194905 .496005 rgb
f
-394.023 65.6 mo
-363.303 65.6 li
-363.303 54.08 li
-394.023 54.08 li
-394.023 65.6 li
.248629 .278775 .534556 rgb
f
-363.303 65.6 mo
-332.583 65.6 li
-332.583 54.08 li
-363.303 54.08 li
-363.303 65.6 li
.212395 .359683 .55171 rgb
f
-332.583 65.6 mo
-301.863 65.6 li
-301.863 54.08 li
-332.583 54.08 li
-332.583 65.6 li
.180629 .429975 .557282 rgb
f
-301.863 65.6 mo
-271.143 65.6 li
-271.143 54.08 li
-301.863 54.08 li
-301.863 65.6 li
.153364 .497 .557724 rgb
f
-271.143 65.6 mo
-240.423 65.6 li
-240.423 54.08 li
-271.143 54.08 li
-271.143 65.6 li
.127568 .566949 .550556 rgb
f
-240.423 65.6 mo
-209.703 65.6 li
-209.703 54.08 li
-240.423 54.08 li
-240.423 65.6 li
.122312 .633153 .530398 rgb
f
-209.703 65.6 mo
-178.983 65.6 li
-178.983 54.08 li
-209.703 54.08 li
-209.703 65.6 li
.175707 .6979 .491033 rgb
f
-178.983 65.6 mo
-148.263 65.6 li
-148.263 54.08 li
-178.983 54.08 li
-178.983 65.6 li
.288921 .758394 .428426 rgb
f
-148.263 65.6 mo
-117.543 65.6 li
-117.543 54.08 li
-148.263 54.08 li
-148.263 65.6 li
.449368 .813768 .335384 rgb
f
-117.543 65.6 mo
-86.823 65.6 li
-86.823 54.08 li
-117.543 54.08 li
-117.543 65.6 li
.626579 .854645 .223353 rgb
f
-86.823 65.6 mo
-56.103 65.6 li
-56.103 54.08 li
-86.823 54.08 li
-86.823 65.6 li
.814576 .883393 .110347 rgb
f
-56.103 65.6 mo
-25.383 65.6 li
-25.383 54.08 li
-56.103 54.08 li
-56.103 65.6 li
.993248 .906157 .143936 rgb
f
-470.823 54.08 mo
-470.823 50.58 li
.162506 .156372 .158264 rgb
f
0 lc
1 lj
-470.823 54.08 mo
-470.823 50.58 li
@
-467.207 33.8313 mo
-467.207 34.5513 -467.287 35.2233 -467.415 35.8633 cv
-467.559 36.5033 -467.767 37.0793 -468.039 37.6073 cv
-468.311 38.1513 -468.679 38.5673 -469.159 38.8713 cv
-469.639 39.1593 -470.199 39.3193 -470.823 39.3193 cv
-471.479 39.3193 -472.055 39.1593 -472.535 38.8393 cv
-473.031 38.5193 -473.415 38.0713 -473.671 37.5113 cv
-473.943 36.9673 -474.135 36.3753 -474.263 35.7353 cv
-474.391 35.1113 -474.439 34.4393 -474.439 33.7353 cv
-474.439 32.7433 -474.327 31.8633 -474.071 31.0633 cv
-473.831 30.2633 -473.431 29.6073 -472.855 29.0793 cv
-472.279 28.5673 -471.591 28.2953 -470.759 28.2953 cv
-469.719 28.2953 -468.871 28.8073 -468.199 29.8313 cv
-467.543 30.8553 -467.207 32.1993 -467.207 33.8313 cv
-468.743 33.9113 mo
-468.743 32.2313 -468.935 30.9513 -469.287 30.0553 cv
-469.639 29.1593 -470.167 28.7113 -470.855 28.7113 cv
-471.527 28.7113 -472.023 29.1593 -472.375 30.0553 cv
-472.727 30.9513 -472.903 32.2153 -472.903 33.8473 cv
-472.903 35.4953 -472.727 36.7593 -472.375 37.6233 cv
-472.023 38.4873 -471.511 38.9193 -470.823 38.9193 cv
-470.151 38.9193 -469.639 38.4873 -469.287 37.6233 cv
-468.935 36.7593 -468.743 35.5113 -468.743 33.9113 cv
f
-440.103 54.08 mo
-440.103 50.58 li
f
-440.103 54.08 mo
-440.103 50.58 li
@
-437.799 39.1113 mo
-442.215 39.1113 li
-442.215 38.8713 li
-441.639 38.8393 -441.239 38.7433 -441.015 38.5513 cv
-440.807 38.3593 -440.695 38.0393 -440.695 37.5913 cv
-440.695 30.4073 li
-440.695 29.8953 -440.855 29.6233 -441.175 29.6233 cv
-441.335 29.6233 -441.575 29.6873 -441.895 29.8153 cv
-442.327 29.9753 li
-442.327 29.7513 li
-439.463 28.2953 li
-439.319 28.3433 li
-439.319 37.8953 li
-439.319 38.2473 -439.223 38.5033 -438.999 38.6473 cv
-438.791 38.8073 -438.391 38.8713 -437.799 38.8713 cv
-437.799 39.1113 li
f
-409.383 54.08 mo
-409.383 50.58 li
f
-409.383 54.08 mo
-409.383 50.58 li
@
-405.799 36.9193 mo
-406.663 39.1113 li
-412.919 39.1113 li
-412.919 38.9193 li
-410.071 35.8953 li
-409.335 35.1273 -408.791 34.4073 -408.471 33.7513 cv
-408.151 33.1113 -407.991 32.4393 -407.991 31.7353 cv
-407.991 31.0313 -408.199 30.4713 -408.583 30.0713 cv
-408.983 29.6873 -409.527 29.4793 -410.215 29.4793 cv
-410.791 29.4793 -411.255 29.6393 -411.591 29.9273 cv
-411.927 30.2313 -412.247 30.7753 -412.567 31.5593 cv
-412.903 31.4793 li
-412.727 30.4873 -412.359 29.7193 -411.815 29.1433 cv
-411.271 28.5833 -410.519 28.2953 -409.575 28.2953 cv
-408.695 28.2953 -407.975 28.5673 -407.431 29.0953 cv
-406.887 29.6393 -406.615 30.3113 -406.615 31.1113 cv
-406.615 32.3273 -407.303 33.6393 -408.663 35.0793 cv
-411.303 37.8953 li
-407.559 37.8953 li
-407.207 37.8953 -406.935 37.8313 -406.727 37.6873 cv
-406.519 37.5593 -406.279 37.2713 -406.023 36.8233 cv
-405.799 36.9193 li
f
-378.663 54.08 mo
-378.663 50.58 li
f
-378.663 54.08 mo
-378.663 50.58 li
@
-381.687 30.9513 mo
-381.943 30.8873 li
-381.703 30.0873 -381.319 29.4633 -380.791 28.9993 cv
-380.279 28.5353 -379.607 28.2953 -378.807 28.2953 cv
-378.071 28.2953 -377.463 28.5033 -376.999 28.9033 cv
-376.551 29.3193 -376.311 29.8473 -376.311 30.4873 cv
-376.311 31.3673 -376.807 32.1033 -377.799 32.6953 cv
-377.223 32.9513 -376.775 33.2393 -376.471 33.5433 cv
-376.007 34.0713 -375.767 34.7593 -375.767 35.6073 cv
-375.767 36.4713 -376.023 37.2073 -376.503 37.8473 cv
-376.871 38.3433 -377.399 38.7113 -378.071 38.9513 cv
-378.743 39.1913 -379.463 39.3193 -380.215 39.3193 cv
-381.415 39.3193 -382.007 39.0313 -382.007 38.4233 cv
-382.007 38.2633 -381.943 38.1193 -381.815 38.0073 cv
-381.687 37.9113 -381.543 37.8473 -381.351 37.8473 cv
-381.095 37.8473 -380.759 37.9913 -380.375 38.2633 cv
-379.911 38.5993 -379.447 38.7593 -378.999 38.7593 cv
-378.423 38.7593 -377.927 38.5353 -377.527 38.0553 cv
-377.127 37.5753 -376.919 36.9993 -376.919 36.3113 cv
-376.919 35.0953 -377.479 34.3113 -378.583 33.9913 cv
-378.919 33.8953 -379.463 33.8313 -380.215 33.8313 cv
-380.215 33.6073 li
-379.623 33.4153 -379.175 33.2233 -378.871 33.0313 cv
-378.007 32.5513 -377.575 31.8313 -377.575 30.8873 cv
-377.575 30.3593 -377.735 29.9593 -378.039 29.6713 cv
-378.343 29.3993 -378.759 29.2553 -379.303 29.2553 cv
-380.263 29.2553 -381.063 29.8313 -381.687 30.9513 cv
f
-347.943 54.08 mo
-347.943 50.58 li
f
-347.943 54.08 mo
-347.943 50.58 li
@
-344.375 36.4393 mo
-346.023 36.4393 li
-346.023 39.1113 li
-347.271 39.1113 li
-347.271 36.4393 li
-351.751 36.4393 li
-351.751 35.4153 li
-346.727 28.2953 li
-346.023 28.2953 li
-346.023 35.4153 li
-344.375 35.4153 li
-344.375 36.4393 li
-347.271 35.4153 mo
-347.271 29.9273 li
-351.111 35.4153 li
-347.271 35.4153 li
f
-317.223 54.08 mo
-317.223 50.58 li
f
-317.223 54.08 mo
-317.223 50.58 li
@
-314.215 28.2153 mo
-314.791 29.5753 li
-314.855 29.7193 -314.999 29.7833 -315.223 29.7833 cv
-318.327 29.7833 li
-318.967 31.1433 li
-317.799 31.3673 -316.951 31.6233 -316.423 31.8793 cv
-315.911 32.1353 -315.415 32.5833 -314.967 33.1913 cv
-314.599 33.7033 -314.407 34.3913 -314.407 35.2233 cv
-314.407 35.9913 -314.535 36.6473 -314.791 37.1593 cv
-315.047 37.6873 -315.431 38.1513 -315.975 38.5513 cv
-316.711 39.0633 -317.607 39.3193 -318.695 39.3193 cv
-319.303 39.3193 -319.799 39.2233 -320.167 39.0633 cv
-320.551 38.8873 -320.727 38.6473 -320.727 38.3433 cv
-320.727 37.9433 -320.487 37.7353 -320.007 37.7353 cv
-319.623 37.7353 -319.239 37.9113 -318.823 38.2313 cv
-318.407 38.5833 -318.039 38.7433 -317.687 38.7433 cv
-317.143 38.7433 -316.647 38.4713 -316.199 37.9113 cv
-315.751 37.3673 -315.527 36.7433 -315.527 36.0393 cv
-315.527 35.0153 -315.895 34.2153 -316.599 33.6393 cv
-317.527 32.9033 -318.663 32.5193 -320.007 32.5193 cv
-320.135 32.5193 -320.199 32.4873 -320.199 32.3913 cv
-320.183 32.3113 li
-318.439 28.5193 li
-315.127 28.5193 li
-314.951 28.5193 -314.807 28.5033 -314.711 28.4393 cv
-314.615 28.3913 -314.487 28.2793 -314.359 28.1033 cv
-314.215 28.2153 li
f
-286.503 54.08 mo
-286.503 50.58 li
f
-286.503 54.08 mo
-286.503 50.58 li
@
-283.367 28.1673 mo
-283.335 28.4233 li
-284.599 28.6313 -285.655 29.1433 -286.487 29.9593 cv
-287.335 30.7753 -287.863 31.7833 -288.071 32.9833 cv
-287.463 32.5033 -286.775 32.2633 -286.039 32.2633 cv
-285.111 32.2633 -284.375 32.5673 -283.831 33.1593 cv
-283.287 33.7673 -283.015 34.5833 -283.015 35.6073 cv
-283.015 36.6633 -283.287 37.5113 -283.831 38.1673 cv
-284.471 38.9353 -285.319 39.3193 -286.375 39.3193 cv
-287.687 39.3193 -288.631 38.7913 -289.207 37.7193 cv
-289.719 36.8073 -289.959 35.7833 -289.959 34.6473 cv
-289.959 32.9033 -289.383 31.4313 -288.215 30.2313 cv
-287.559 29.5593 -286.887 29.0793 -286.183 28.7913 cv
-285.479 28.5033 -284.551 28.2953 -283.367 28.1673 cv
-284.455 36.1033 mo
-284.455 34.0393 -285.175 32.9993 -286.615 32.9993 cv
-287.159 32.9993 -287.591 33.1433 -287.943 33.4313 cv
-288.295 33.7193 -288.471 34.1833 -288.471 34.8553 cv
-288.471 36.1033 -288.279 37.0953 -287.895 37.8153 cv
-287.511 38.5353 -286.935 38.8873 -286.199 38.8873 cv
-285.639 38.8873 -285.207 38.6473 -284.903 38.1353 cv
-284.615 37.6233 -284.455 36.9513 -284.455 36.1033 cv
f
-255.783 54.08 mo
-255.783 50.58 li
f
-255.783 54.08 mo
-255.783 50.58 li
@
-252.599 28.7753 mo
-255.991 39.2233 li
-257.031 39.2233 li
-253.863 29.7033 li
-257.303 29.7033 li
-257.767 29.7033 -258.103 29.7833 -258.327 29.9433 cv
-258.551 30.1033 -258.839 30.4713 -259.175 31.0153 cv
-259.463 30.8713 li
-258.503 28.5193 li
-252.599 28.5193 li
-252.599 28.7753 li
f
-225.063 54.08 mo
-225.063 50.58 li
f
-225.063 54.08 mo
-225.063 50.58 li
@
-221.943 36.6313 mo
-221.943 37.4633 -222.231 38.1193 -222.807 38.5993 cv
-223.383 39.0793 -224.135 39.3193 -225.095 39.3193 cv
-225.991 39.3193 -226.727 39.0793 -227.303 38.5993 cv
-227.879 38.1193 -228.167 37.4953 -228.167 36.7273 cv
-228.167 36.1673 -228.039 35.6873 -227.751 35.2873 cv
-227.479 34.8873 -226.919 34.3913 -226.087 33.7993 cv
-226.887 33.1433 -227.431 32.6153 -227.687 32.1993 cv
-227.943 31.7993 -228.071 31.3353 -228.071 30.7913 cv
-228.071 30.0393 -227.783 29.4313 -227.207 28.9833 cv
-226.631 28.5353 -225.879 28.2953 -224.967 28.2953 cv
-224.199 28.2953 -223.559 28.5193 -223.047 28.9673 cv
-222.535 29.4153 -222.279 29.9433 -222.279 30.5833 cv
-222.279 31.1753 -222.439 31.6393 -222.743 31.9913 cv
-223.047 32.3433 -223.607 32.7433 -224.423 33.1753 cv
-223.463 33.8153 -222.823 34.3913 -222.471 34.8873 cv
-222.119 35.3993 -221.943 35.9753 -221.943 36.6313 cv
-223.383 30.5833 mo
-223.383 30.0393 -223.543 29.5913 -223.847 29.2553 cv
-224.167 28.9193 -224.583 28.7433 -225.127 28.7433 cv
-225.671 28.7433 -226.103 28.8873 -226.423 29.1753 cv
-226.743 29.4633 -226.887 29.8473 -226.887 30.3273 cv
-226.887 30.8233 -226.743 31.2713 -226.423 31.6713 cv
-226.103 32.0713 -225.591 32.4713 -224.887 32.8873 cv
-224.343 32.5673 -223.959 32.2313 -223.735 31.8793 cv
-223.511 31.5273 -223.383 31.0953 -223.383 30.5833 cv
-224.727 34.7593 mo
-225.671 34.1193 li
-226.151 34.5033 -226.471 34.8873 -226.663 35.2553 cv
-226.855 35.6233 -226.951 36.0713 -226.951 36.5833 cv
-226.951 37.3193 -226.775 37.8793 -226.407 38.2793 cv
-226.039 38.6953 -225.543 38.8873 -224.919 38.8873 cv
-224.407 38.8873 -223.975 38.7273 -223.655 38.4073 cv
-223.335 38.0873 -223.159 37.6553 -223.159 37.1273 cv
-223.159 36.6473 -223.287 36.2313 -223.527 35.8633 cv
-223.783 35.5113 -224.183 35.1433 -224.727 34.7593 cv
f
-194.343 54.08 mo
-194.343 50.58 li
f
-194.343 54.08 mo
-194.343 50.58 li
@
-197.399 39.4473 mo
-197.447 39.1273 li
-196.231 38.9353 -195.191 38.4233 -194.343 37.5913 cv
-193.495 36.7753 -192.903 35.7193 -192.583 34.4073 cv
-193.207 35.0153 -194.007 35.3193 -194.983 35.3193 cv
-195.847 35.3193 -196.551 35.0313 -197.079 34.4233 cv
-197.607 33.8313 -197.863 33.0473 -197.863 32.0713 cv
-197.863 30.9993 -197.559 30.1033 -196.919 29.3833 cv
-196.279 28.6633 -195.495 28.2953 -194.535 28.2953 cv
-193.527 28.2953 -192.695 28.7113 -192.023 29.5113 cv
-191.351 30.3753 -190.999 31.4633 -190.999 32.8073 cv
-190.999 33.7513 -191.175 34.6313 -191.495 35.4633 cv
-191.815 36.2953 -192.295 36.9833 -192.919 37.5593 cv
-193.591 38.1673 -194.231 38.5833 -194.855 38.8393 cv
-195.495 39.0953 -196.343 39.2873 -197.399 39.4473 cv
-192.551 33.4313 mo
-192.551 32.8073 li
-192.551 30.1033 -193.255 28.7433 -194.663 28.7433 cv
-195.175 28.7433 -195.559 28.9353 -195.831 29.2873 cv
-195.991 29.5113 -196.135 29.8313 -196.231 30.2473 cv
-196.343 30.6793 -196.391 31.1113 -196.391 31.5273 cv
-196.391 32.4873 -196.215 33.2393 -195.863 33.7993 cv
-195.511 34.3593 -195.031 34.6313 -194.423 34.6313 cv
-194.007 34.6313 -193.591 34.5353 -193.175 34.3273 cv
-192.759 34.1193 -192.551 33.8153 -192.551 33.4313 cv
f
-163.623 54.08 mo
-163.623 50.58 li
f
-163.623 54.08 mo
-163.623 50.58 li
@
-165.319 39.1113 mo
-169.735 39.1113 li
-169.735 38.8713 li
-169.159 38.8393 -168.759 38.7433 -168.535 38.5513 cv
-168.327 38.3593 -168.215 38.0393 -168.215 37.5913 cv
-168.215 30.4073 li
-168.215 29.8953 -168.375 29.6233 -168.695 29.6233 cv
-168.855 29.6233 -169.095 29.6873 -169.415 29.8153 cv
-169.847 29.9753 li
-169.847 29.7513 li
-166.983 28.2953 li
-166.839 28.3433 li
-166.839 37.8953 li
-166.839 38.2473 -166.743 38.5033 -166.519 38.6473 cv
-166.311 38.8073 -165.911 38.8713 -165.319 38.8713 cv
-165.319 39.1113 li
f
-156.007 33.8313 mo
-156.007 34.5513 -156.087 35.2233 -156.215 35.8633 cv
-156.359 36.5033 -156.567 37.0793 -156.839 37.6073 cv
-157.111 38.1513 -157.479 38.5673 -157.959 38.8713 cv
-158.439 39.1593 -158.999 39.3193 -159.623 39.3193 cv
-160.279 39.3193 -160.855 39.1593 -161.335 38.8393 cv
-161.831 38.5193 -162.215 38.0713 -162.471 37.5113 cv
-162.743 36.9673 -162.935 36.3753 -163.063 35.7353 cv
-163.191 35.1113 -163.239 34.4393 -163.239 33.7353 cv
-163.239 32.7433 -163.127 31.8633 -162.871 31.0633 cv
-162.631 30.2633 -162.231 29.6073 -161.655 29.0793 cv
-161.079 28.5673 -160.391 28.2953 -159.559 28.2953 cv
-158.519 28.2953 -157.671 28.8073 -156.999 29.8313 cv
-156.343 30.8553 -156.007 32.1993 -156.007 33.8313 cv
-157.543 33.9113 mo
-157.543 32.2313 -157.735 30.9513 -158.087 30.0553 cv
-158.439 29.1593 -158.967 28.7113 -159.655 28.7113 cv
-160.327 28.7113 -160.823 29.1593 -161.175 30.0553 cv
-161.527 30.9513 -161.703 32.2153 -161.703 33.8473 cv
-161.703 35.4953 -161.527 36.7593 -161.175 37.6233 cv
-160.823 38.4873 -160.311 38.9193 -159.623 38.9193 cv
-158.951 38.9193 -158.439 38.4873 -158.087 37.6233 cv
-157.735 36.7593 -157.543 35.5113 -157.543 33.9113 cv
f
-132.903 54.08 mo
-132.903 50.58 li
f
-132.903 54.08 mo
-132.903 50.58 li
@
-134.599 39.1113 mo
-139.015 39.1113 li
-139.015 38.8713 li
-138.439 38.8393 -138.039 38.7433 -137.815 38.5513 cv
-137.607 38.3593 -137.495 38.0393 -137.495 37.5913 cv
-137.495 30.4073 li
-137.495 29.8953 -137.655 29.6233 -137.975 29.6233 cv
-138.135 29.6233 -138.375 29.6873 -138.695 29.8153 cv
-139.127 29.9753 li
-139.127 29.7513 li
-136.263 28.2953 li
-136.119 28.3433 li
-136.119 37.8953 li
-136.119 38.2473 -136.023 38.5033 -135.799 38.6473 cv
-135.591 38.8073 -135.191 38.8713 -134.599 38.8713 cv
-134.599 39.1113 li
f
-126.599 39.1113 mo
-131.015 39.1113 li
-131.015 38.8713 li
-130.439 38.8393 -130.039 38.7433 -129.815 38.5513 cv
-129.607 38.3593 -129.495 38.0393 -129.495 37.5913 cv
-129.495 30.4073 li
-129.495 29.8953 -129.655 29.6233 -129.975 29.6233 cv
-130.135 29.6233 -130.375 29.6873 -130.695 29.8153 cv
-131.127 29.9753 li
-131.127 29.7513 li
-128.263 28.2953 li
-128.119 28.3433 li
-128.119 37.8953 li
-128.119 38.2473 -128.023 38.5033 -127.799 38.6473 cv
-127.591 38.8073 -127.191 38.8713 -126.599 38.8713 cv
-126.599 39.1113 li
f
-102.183 54.08 mo
-102.183 50.58 li
f
-102.183 54.08 mo
-102.183 50.58 li
@
-103.879 39.1113 mo
-108.295 39.1113 li
-108.295 38.8713 li
-107.719 38.8393 -107.319 38.7433 -107.095 38.5513 cv
-106.887 38.3593 -106.775 38.0393 -106.775 37.5913 cv
-106.775 30.4073 li
-106.775 29.8953 -106.935 29.6233 -107.255 29.6233 cv
-107.415 29.6233 -107.655 29.6873 -107.975 29.8153 cv
-108.407 29.9753 li
-108.407 29.7513 li
-105.543 28.2953 li
-105.399 28.3433 li
-105.399 37.8953 li
-105.399 38.2473 -105.303 38.5033 -105.079 38.6473 cv
-104.871 38.8073 -104.471 38.8713 -103.879 38.8713 cv
-103.879 39.1113 li
f
-94.599 36.9193 mo
-95.463 39.1113 li
-101.719 39.1113 li
-101.719 38.9193 li
-98.871 35.8953 li
-98.135 35.1273 -97.591 34.4073 -97.271 33.7513 cv
-96.951 33.1113 -96.791 32.4393 -96.791 31.7353 cv
-96.791 31.0313 -96.999 30.4713 -97.383 30.0713 cv
-97.783 29.6873 -98.327 29.4793 -99.015 29.4793 cv
-99.591 29.4793 -100.055 29.6393 -100.391 29.9273 cv
-100.727 30.2313 -101.047 30.7753 -101.367 31.5593 cv
-101.703 31.4793 li
-101.527 30.4873 -101.159 29.7193 -100.615 29.1433 cv
-100.071 28.5833 -99.319 28.2953 -98.375 28.2953 cv
-97.495 28.2953 -96.775 28.5673 -96.231 29.0953 cv
-95.687 29.6393 -95.415 30.3113 -95.415 31.1113 cv
-95.415 32.3273 -96.103 33.6393 -97.463 35.0793 cv
-100.103 37.8953 li
-96.359 37.8953 li
-96.007 37.8953 -95.735 37.8313 -95.527 37.6873 cv
-95.319 37.5593 -95.079 37.2713 -94.823 36.8233 cv
-94.599 36.9193 li
f
-71.463 54.08 mo
-71.463 50.58 li
f
-71.463 54.08 mo
-71.463 50.58 li
@
-73.159 39.1113 mo
-77.575 39.1113 li
-77.575 38.8713 li
-76.999 38.8393 -76.599 38.7433 -76.375 38.5513 cv
-76.167 38.3593 -76.055 38.0393 -76.055 37.5913 cv
-76.055 30.4073 li
-76.055 29.8953 -76.215 29.6233 -76.535 29.6233 cv
-76.695 29.6233 -76.935 29.6873 -77.255 29.8153 cv
-77.687 29.9753 li
-77.687 29.7513 li
-74.823 28.2953 li
-74.679 28.3433 li
-74.679 37.8953 li
-74.679 38.2473 -74.583 38.5033 -74.359 38.6473 cv
-74.151 38.8073 -73.751 38.8713 -73.159 38.8713 cv
-73.159 39.1113 li
f
-70.487 30.9513 mo
-70.743 30.8873 li
-70.503 30.0873 -70.119 29.4633 -69.591 28.9993 cv
-69.079 28.5353 -68.407 28.2953 -67.607 28.2953 cv
-66.871 28.2953 -66.263 28.5033 -65.799 28.9033 cv
-65.351 29.3193 -65.111 29.8473 -65.111 30.4873 cv
-65.111 31.3673 -65.607 32.1033 -66.599 32.6953 cv
-66.023 32.9513 -65.575 33.2393 -65.271 33.5433 cv
-64.807 34.0713 -64.567 34.7593 -64.567 35.6073 cv
-64.567 36.4713 -64.823 37.2073 -65.303 37.8473 cv
-65.671 38.3433 -66.199 38.7113 -66.871 38.9513 cv
-67.543 39.1913 -68.263 39.3193 -69.015 39.3193 cv
-70.215 39.3193 -70.807 39.0313 -70.807 38.4233 cv
-70.807 38.2633 -70.743 38.1193 -70.615 38.0073 cv
-70.487 37.9113 -70.343 37.8473 -70.151 37.8473 cv
-69.895 37.8473 -69.559 37.9913 -69.175 38.2633 cv
-68.711 38.5993 -68.247 38.7593 -67.799 38.7593 cv
-67.223 38.7593 -66.727 38.5353 -66.327 38.0553 cv
-65.927 37.5753 -65.719 36.9993 -65.719 36.3113 cv
-65.719 35.0953 -66.279 34.3113 -67.383 33.9913 cv
-67.719 33.8953 -68.263 33.8313 -69.015 33.8313 cv
-69.015 33.6073 li
-68.423 33.4153 -67.975 33.2233 -67.671 33.0313 cv
-66.807 32.5513 -66.375 31.8313 -66.375 30.8873 cv
-66.375 30.3593 -66.535 29.9593 -66.839 29.6713 cv
-67.143 29.3993 -67.559 29.2553 -68.103 29.2553 cv
-69.063 29.2553 -69.863 29.8313 -70.487 30.9513 cv
f
-40.743 54.08 mo
-40.743 50.58 li
f
-40.743 54.08 mo
-40.743 50.58 li
@
-42.439 39.1113 mo
-46.855 39.1113 li
-46.855 38.8713 li
-46.279 38.8393 -45.879 38.7433 -45.655 38.5513 cv
-45.447 38.3593 -45.335 38.0393 -45.335 37.5913 cv
-45.335 30.4073 li
-45.335 29.8953 -45.495 29.6233 -45.815 29.6233 cv
-45.975 29.6233 -46.215 29.6873 -46.535 29.8153 cv
-46.967 29.9753 li
-46.967 29.7513 li
-44.103 28.2953 li
-43.959 28.3433 li
-43.959 37.8953 li
-43.959 38.2473 -43.863 38.5033 -43.639 38.6473 cv
-43.431 38.8073 -43.031 38.8713 -42.439 38.8713 cv
-42.439 39.1113 li
f
-33.175 36.4393 mo
-34.823 36.4393 li
-34.823 39.1113 li
-36.071 39.1113 li
-36.071 36.4393 li
-40.551 36.4393 li
-40.551 35.4153 li
-35.527 28.2953 li
-34.823 28.2953 li
-34.823 35.4153 li
-33.175 35.4153 li
-33.175 36.4393 li
-36.071 35.4153 mo
-36.071 29.9273 li
-39.911 35.4153 li
-36.071 35.4153 li
f
-270.349 15.0294 mo
-270.349 16.8694 li
-269.849 16.1494 -269.429 15.6694 -269.089 15.3894 cv
-268.749 15.1294 -268.369 14.9894 -267.949 14.9894 cv
-267.609 14.9894 -267.349 15.0894 -267.149 15.2694 cv
-266.949 15.4694 -266.849 15.7294 -266.849 16.0494 cv
-266.849 16.3294 -266.929 16.5494 -267.069 16.7094 cv
-267.209 16.8694 -267.389 16.9494 -267.629 16.9494 cv
-267.889 16.9494 -268.149 16.8294 -268.429 16.5494 cv
-268.649 16.3494 -268.829 16.2494 -268.949 16.2494 cv
-269.229 16.2494 -269.549 16.4494 -269.869 16.8294 cv
-270.189 17.2294 -270.349 17.5694 -270.349 17.8894 cv
-270.349 22.3894 li
-270.349 22.9694 -270.249 23.3494 -270.009 23.5494 cv
-269.789 23.7494 -269.329 23.8694 -268.649 23.8894 cv
-268.649 24.1894 li
-273.449 24.1894 li
-273.449 23.8894 li
-272.809 23.7694 -272.429 23.6494 -272.269 23.4894 cv
-272.109 23.3494 -272.029 23.0294 -272.029 22.5094 cv
-272.029 17.5094 li
-272.029 17.0694 -272.089 16.7694 -272.189 16.5894 cv
-272.289 16.4094 -272.469 16.3094 -272.709 16.3094 cv
-272.929 16.3094 -273.169 16.3494 -273.409 16.3894 cv
-273.409 16.0694 li
-272.569 15.8094 -271.589 15.4494 -270.449 14.9894 cv
-270.349 15.0294 li
f
-258.049 22.8694 mo
-258.049 23.4294 li
-258.569 24.0694 -259.169 24.3694 -259.849 24.3694 cv
-260.609 24.3694 -261.049 23.8894 -261.129 22.9294 cv
-261.149 22.9294 li
-262.009 23.8894 -262.969 24.3694 -264.049 24.3694 cv
-264.689 24.3694 -265.189 24.1894 -265.569 23.8294 cv
-265.969 23.4694 -266.149 22.9694 -266.149 22.3094 cv
-266.149 21.3894 -265.689 20.6094 -264.749 19.9694 cv
-264.109 19.5494 -262.909 19.0094 -261.149 18.3494 cv
-261.149 17.2694 li
-261.149 16.6694 -261.309 16.2294 -261.589 15.9294 cv
-261.869 15.6294 -262.249 15.4694 -262.709 15.4694 cv
-263.109 15.4694 -263.449 15.5694 -263.709 15.7694 cv
-263.989 15.9694 -264.109 16.1894 -264.109 16.4494 cv
-264.109 16.5694 -264.089 16.7094 -264.049 16.8494 cv
-264.009 17.0094 -263.989 17.1494 -263.989 17.2894 cv
-263.989 17.4894 -264.089 17.6894 -264.269 17.8494 cv
-264.449 18.0294 -264.669 18.1094 -264.909 18.1094 cv
-265.149 18.1094 -265.349 18.0294 -265.509 17.8494 cv
-265.689 17.6894 -265.769 17.4694 -265.769 17.1894 cv
-265.769 16.5494 -265.429 16.0294 -264.749 15.5894 cv
-264.129 15.1894 -263.369 14.9894 -262.449 14.9894 cv
-261.369 14.9894 -260.589 15.2894 -260.089 15.8894 cv
-259.849 16.1694 -259.709 16.4694 -259.629 16.7494 cv
-259.569 17.0294 -259.529 17.4894 -259.529 18.1094 cv
-259.529 21.9294 li
-259.529 22.8094 -259.329 23.2494 -258.909 23.2494 cv
-258.649 23.2494 -258.369 23.1294 -258.049 22.8694 cv
-261.149 21.6494 mo
-261.149 18.8294 li
-262.389 19.2694 -263.229 19.7094 -263.709 20.1494 cv
-264.169 20.5694 -264.389 21.0894 -264.389 21.6894 cv
-264.389 22.2094 -264.269 22.5894 -264.009 22.8494 cv
-263.769 23.1094 -263.429 23.2294 -263.009 23.2294 cv
-262.569 23.2294 -262.189 23.1294 -261.849 22.9094 cv
-261.569 22.7094 -261.389 22.5294 -261.289 22.3494 cv
-261.209 22.1894 -261.149 21.9494 -261.149 21.6494 cv
f
-248.309 24.1894 mo
-252.469 24.1894 li
-252.449 23.8894 li
-251.969 23.8494 -251.629 23.7094 -251.469 23.4694 cv
-251.309 23.2294 -251.209 22.7694 -251.209 22.0894 cv
-251.209 18.1094 li
-251.209 16.7694 -251.709 16.0894 -252.669 16.0894 cv
-253.009 16.0894 -253.329 16.1694 -253.609 16.3294 cv
-253.909 16.4894 -254.289 16.7894 -254.729 17.2294 cv
-254.729 22.7494 li
-254.729 23.1494 -254.649 23.4294 -254.469 23.5894 cv
-254.289 23.7494 -253.949 23.8494 -253.429 23.8894 cv
-253.429 24.1894 li
-257.649 24.1894 li
-257.649 23.8894 li
-257.149 23.8494 -256.809 23.7294 -256.649 23.5294 cv
-256.489 23.3294 -256.409 22.9094 -256.409 22.3094 cv
-256.409 17.4494 li
-256.409 16.9694 -256.469 16.6294 -256.549 16.4294 cv
-256.649 16.2494 -256.829 16.1494 -257.109 16.1494 cv
-257.389 16.1494 -257.569 16.1894 -257.689 16.2294 cv
-257.689 15.8894 li
-256.769 15.6294 -255.849 15.3294 -254.949 14.9894 cv
-254.789 15.0494 li
-254.789 16.6094 li
-254.769 16.6094 li
-253.829 15.5294 -252.869 14.9894 -251.889 14.9894 cv
-251.129 14.9894 -250.549 15.2694 -250.149 15.7894 cv
-249.749 16.3294 -249.529 17.0894 -249.529 18.0694 cv
-249.529 22.4894 li
-249.529 23.0294 -249.449 23.3894 -249.289 23.5494 cv
-249.129 23.7294 -248.809 23.8494 -248.309 23.8894 cv
-248.309 24.1894 li
f
-237.909 24.1894 mo
-242.269 24.1894 li
-242.269 23.8894 li
-241.889 23.8894 li
-241.609 23.8894 -241.469 23.7894 -241.469 23.5894 cv
-241.469 23.4694 -241.549 23.3294 -241.689 23.1294 cv
-244.689 19.1694 li
-244.689 22.8494 li
-244.689 23.2094 -244.609 23.4494 -244.449 23.6094 cv
-244.289 23.7694 -243.989 23.8694 -243.589 23.8694 cv
-243.189 23.8894 li
-243.189 24.1894 li
-247.869 24.1894 li
-247.869 23.8894 li
-247.149 23.7694 -246.729 23.6494 -246.589 23.5294 cv
-246.449 23.4094 -246.369 23.0694 -246.369 22.5494 cv
-246.369 12.9094 li
-246.369 12.4294 -246.429 12.1094 -246.549 11.9494 cv
-246.669 11.7894 -246.909 11.6894 -247.229 11.6894 cv
-247.309 11.6894 -247.529 11.7094 -247.869 11.7294 cv
-247.869 11.4094 li
-247.269 11.2494 li
-246.469 11.0494 -245.649 10.8094 -244.769 10.5294 cv
-244.689 10.5694 li
-244.689 18.9694 li
-241.949 16.5294 li
-241.649 16.2494 -241.489 16.0294 -241.489 15.8294 cv
-241.489 15.7094 -241.569 15.6094 -241.709 15.5694 cv
-241.849 15.5294 -242.109 15.4894 -242.489 15.4694 cv
-242.489 15.1894 li
-238.409 15.1894 li
-238.409 15.4894 li
-239.089 15.4894 -239.669 15.6494 -240.189 15.9294 cv
-240.709 16.2094 -241.549 16.9094 -242.729 18.0094 cv
-243.309 18.5494 li
-240.249 22.4294 li
-239.529 23.3494 -238.749 23.8494 -237.909 23.8894 cv
-237.909 24.1894 li
f
0 lj
-486.183 65.6 mo
-455.463 65.6 li
-56.103 65.6 li
-25.383 65.6 li
-25.383 54.08 li
-56.103 54.08 li
-455.463 54.08 li
-486.183 54.08 li
cp
@
51.417 526.4 mo
512.217 526.4 li
512.217 65.6 li
51.417 65.6 li
51.417 526.4 li
1 1 1 rgb
f
51.4171 526.4 mo
51.4171 529.9 li
.162506 .156372 .158264 rgb
f
1 lj
51.4171 526.4 mo
51.4171 529.9 li
@
49.0331 543.542 mo
49.0331 544.262 48.9531 544.934 48.8251 545.574 cv
48.6811 546.214 48.4731 546.79 48.2011 547.318 cv
47.9291 547.862 47.5611 548.278 47.0811 548.582 cv
46.6011 548.87 46.0411 549.03 45.4171 549.03 cv
44.7611 549.03 44.1851 548.87 43.7051 548.55 cv
43.2091 548.23 42.8251 547.782 42.5691 547.222 cv
42.2971 546.678 42.1051 546.086 41.9771 545.446 cv
41.8491 544.822 41.8011 544.15 41.8011 543.446 cv
41.8011 542.454 41.9131 541.574 42.1691 540.774 cv
42.4091 539.974 42.8091 539.318 43.3851 538.79 cv
43.9611 538.278 44.6491 538.006 45.4811 538.006 cv
46.5211 538.006 47.3691 538.518 48.0411 539.542 cv
48.6971 540.566 49.0331 541.91 49.0331 543.542 cv
47.4971 543.622 mo
47.4971 541.942 47.3051 540.662 46.9531 539.766 cv
46.6011 538.87 46.0731 538.422 45.3851 538.422 cv
44.7131 538.422 44.2171 538.87 43.8651 539.766 cv
43.5131 540.662 43.3371 541.926 43.3371 543.558 cv
43.3371 545.206 43.5131 546.47 43.8651 547.334 cv
44.2171 548.198 44.7291 548.63 45.4171 548.63 cv
46.0891 548.63 46.6011 548.198 46.9531 547.334 cv
47.3051 546.47 47.4971 545.222 47.4971 543.622 cv
f
52.3131 548.134 mo
52.3131 548.374 52.2171 548.582 52.0411 548.742 cv
51.8651 548.902 51.6571 548.982 51.4171 548.982 cv
51.1611 548.982 50.9531 548.902 50.7931 548.742 cv
50.6171 548.582 50.5371 548.374 50.5371 548.118 cv
50.5371 547.878 50.6171 547.67 50.7931 547.494 cv
50.9691 547.318 51.1771 547.222 51.4331 547.222 cv
51.6571 547.222 51.8651 547.318 52.0411 547.494 cv
52.2171 547.686 52.3131 547.894 52.3131 548.134 cv
f
61.0331 543.542 mo
61.0331 544.262 60.9531 544.934 60.8251 545.574 cv
60.6811 546.214 60.4731 546.79 60.2011 547.318 cv
59.9291 547.862 59.5611 548.278 59.0811 548.582 cv
58.6011 548.87 58.0411 549.03 57.4171 549.03 cv
56.7611 549.03 56.1851 548.87 55.7051 548.55 cv
55.2091 548.23 54.8251 547.782 54.5691 547.222 cv
54.2971 546.678 54.1051 546.086 53.9771 545.446 cv
53.8491 544.822 53.8011 544.15 53.8011 543.446 cv
53.8011 542.454 53.9131 541.574 54.1691 540.774 cv
54.4091 539.974 54.8091 539.318 55.3851 538.79 cv
55.9611 538.278 56.6491 538.006 57.4811 538.006 cv
58.5211 538.006 59.3691 538.518 60.0411 539.542 cv
60.6971 540.566 61.0331 541.91 61.0331 543.542 cv
59.4971 543.622 mo
59.4971 541.942 59.3051 540.662 58.9531 539.766 cv
58.6011 538.87 58.0731 538.422 57.3851 538.422 cv
56.7131 538.422 56.2171 538.87 55.8651 539.766 cv
55.5131 540.662 55.3371 541.926 55.3371 543.558 cv
55.3371 545.206 55.5131 546.47 55.8651 547.334 cv
56.2171 548.198 56.7291 548.63 57.4171 548.63 cv
58.0891 548.63 58.6011 548.198 58.9531 547.334 cv
59.3051 546.47 59.4971 545.222 59.4971 543.622 cv
f
143.577 526.4 mo
143.577 529.9 li
f
143.577 526.4 mo
143.577 529.9 li
@
141.193 543.542 mo
141.193 544.262 141.113 544.934 140.985 545.574 cv
140.841 546.214 140.633 546.79 140.361 547.318 cv
140.089 547.862 139.721 548.278 139.241 548.582 cv
138.761 548.87 138.201 549.03 137.577 549.03 cv
136.921 549.03 136.345 548.87 135.865 548.55 cv
135.369 548.23 134.985 547.782 134.729 547.222 cv
134.457 546.678 134.265 546.086 134.137 545.446 cv
134.009 544.822 133.961 544.15 133.961 543.446 cv
133.961 542.454 134.073 541.574 134.329 540.774 cv
134.569 539.974 134.969 539.318 135.545 538.79 cv
136.121 538.278 136.809 538.006 137.641 538.006 cv
138.681 538.006 139.529 538.518 140.201 539.542 cv
140.857 540.566 141.193 541.91 141.193 543.542 cv
139.657 543.622 mo
139.657 541.942 139.465 540.662 139.113 539.766 cv
138.761 538.87 138.233 538.422 137.545 538.422 cv
136.873 538.422 136.377 538.87 136.025 539.766 cv
135.673 540.662 135.497 541.926 135.497 543.558 cv
135.497 545.206 135.673 546.47 136.025 547.334 cv
136.377 548.198 136.889 548.63 137.577 548.63 cv
138.249 548.63 138.761 548.198 139.113 547.334 cv
139.465 546.47 139.657 545.222 139.657 543.622 cv
f
144.473 548.134 mo
144.473 548.374 144.377 548.582 144.201 548.742 cv
144.025 548.902 143.817 548.982 143.577 548.982 cv
143.321 548.982 143.113 548.902 142.953 548.742 cv
142.777 548.582 142.697 548.374 142.697 548.118 cv
142.697 547.878 142.777 547.67 142.953 547.494 cv
143.129 547.318 143.337 547.222 143.593 547.222 cv
143.817 547.222 144.025 547.318 144.201 547.494 cv
144.377 547.686 144.473 547.894 144.473 548.134 cv
f
153.161 546.63 mo
152.297 548.822 li
146.041 548.822 li
146.041 548.63 li
148.889 545.606 li
149.625 544.838 150.169 544.118 150.489 543.462 cv
150.809 542.822 150.969 542.15 150.969 541.446 cv
150.969 540.742 150.761 540.182 150.377 539.782 cv
149.977 539.398 149.433 539.19 148.745 539.19 cv
148.169 539.19 147.705 539.35 147.369 539.638 cv
147.033 539.942 146.713 540.486 146.393 541.27 cv
146.057 541.19 li
146.233 540.198 146.601 539.43 147.145 538.854 cv
147.689 538.294 148.441 538.006 149.385 538.006 cv
150.265 538.006 150.985 538.278 151.529 538.806 cv
152.073 539.35 152.345 540.022 152.345 540.822 cv
152.345 542.038 151.657 543.35 150.297 544.79 cv
147.657 547.606 li
151.401 547.606 li
151.753 547.606 152.025 547.542 152.233 547.398 cv
152.441 547.27 152.681 546.982 152.937 546.534 cv
153.161 546.63 li
f
235.737 526.4 mo
235.737 529.9 li
f
235.737 526.4 mo
235.737 529.9 li
@
233.353 543.542 mo
233.353 544.262 233.273 544.934 233.145 545.574 cv
233.001 546.214 232.793 546.79 232.521 547.318 cv
232.249 547.862 231.881 548.278 231.401 548.582 cv
230.921 548.87 230.361 549.03 229.737 549.03 cv
229.081 549.03 228.505 548.87 228.025 548.55 cv
227.529 548.23 227.145 547.782 226.889 547.222 cv
226.617 546.678 226.425 546.086 226.297 545.446 cv
226.169 544.822 226.121 544.15 226.121 543.446 cv
226.121 542.454 226.233 541.574 226.489 540.774 cv
226.729 539.974 227.129 539.318 227.705 538.79 cv
228.281 538.278 228.969 538.006 229.801 538.006 cv
230.841 538.006 231.689 538.518 232.361 539.542 cv
233.017 540.566 233.353 541.91 233.353 543.542 cv
231.817 543.622 mo
231.817 541.942 231.625 540.662 231.273 539.766 cv
230.921 538.87 230.393 538.422 229.705 538.422 cv
229.033 538.422 228.537 538.87 228.185 539.766 cv
227.833 540.662 227.657 541.926 227.657 543.558 cv
227.657 545.206 227.833 546.47 228.185 547.334 cv
228.537 548.198 229.049 548.63 229.737 548.63 cv
230.409 548.63 230.921 548.198 231.273 547.334 cv
231.625 546.47 231.817 545.222 231.817 543.622 cv
f
236.633 548.134 mo
236.633 548.374 236.537 548.582 236.361 548.742 cv
236.185 548.902 235.977 548.982 235.737 548.982 cv
235.481 548.982 235.273 548.902 235.113 548.742 cv
234.937 548.582 234.857 548.374 234.857 548.118 cv
234.857 547.878 234.937 547.67 235.113 547.494 cv
235.289 547.318 235.497 547.222 235.753 547.222 cv
235.977 547.222 236.185 547.318 236.361 547.494 cv
236.537 547.686 236.633 547.894 236.633 548.134 cv
f
245.305 546.15 mo
243.657 546.15 li
243.657 548.822 li
242.409 548.822 li
242.409 546.15 li
237.929 546.15 li
237.929 545.126 li
242.953 538.006 li
243.657 538.006 li
243.657 545.126 li
245.305 545.126 li
245.305 546.15 li
242.409 545.126 mo
242.409 539.638 li
238.569 545.126 li
242.409 545.126 li
f
327.897 526.4 mo
327.897 529.9 li
f
327.897 526.4 mo
327.897 529.9 li
@
325.513 543.542 mo
325.513 544.262 325.433 544.934 325.305 545.574 cv
325.161 546.214 324.953 546.79 324.681 547.318 cv
324.409 547.862 324.041 548.278 323.561 548.582 cv
323.081 548.87 322.521 549.03 321.897 549.03 cv
321.241 549.03 320.665 548.87 320.185 548.55 cv
319.689 548.23 319.305 547.782 319.049 547.222 cv
318.777 546.678 318.585 546.086 318.457 545.446 cv
318.329 544.822 318.281 544.15 318.281 543.446 cv
318.281 542.454 318.393 541.574 318.649 540.774 cv
318.889 539.974 319.289 539.318 319.865 538.79 cv
320.441 538.278 321.129 538.006 321.961 538.006 cv
323.001 538.006 323.849 538.518 324.521 539.542 cv
325.177 540.566 325.513 541.91 325.513 543.542 cv
323.977 543.622 mo
323.977 541.942 323.785 540.662 323.433 539.766 cv
323.081 538.87 322.553 538.422 321.865 538.422 cv
321.193 538.422 320.697 538.87 320.345 539.766 cv
319.993 540.662 319.817 541.926 319.817 543.558 cv
319.817 545.206 319.993 546.47 320.345 547.334 cv
320.697 548.198 321.209 548.63 321.897 548.63 cv
322.569 548.63 323.081 548.198 323.433 547.334 cv
323.785 546.47 323.977 545.222 323.977 543.622 cv
f
328.793 548.134 mo
328.793 548.374 328.697 548.582 328.521 548.742 cv
328.345 548.902 328.137 548.982 327.897 548.982 cv
327.641 548.982 327.433 548.902 327.273 548.742 cv
327.097 548.582 327.017 548.374 327.017 548.118 cv
327.017 547.878 327.097 547.67 327.273 547.494 cv
327.449 547.318 327.657 547.222 327.913 547.222 cv
328.137 547.222 328.345 547.318 328.521 547.494 cv
328.697 547.686 328.793 547.894 328.793 548.134 cv
f
337.033 537.878 mo
337.065 538.134 li
335.801 538.342 334.745 538.854 333.913 539.67 cv
333.065 540.486 332.537 541.494 332.329 542.694 cv
332.937 542.214 333.625 541.974 334.361 541.974 cv
335.289 541.974 336.025 542.278 336.569 542.87 cv
337.113 543.478 337.385 544.294 337.385 545.318 cv
337.385 546.374 337.113 547.222 336.569 547.878 cv
335.929 548.646 335.081 549.03 334.025 549.03 cv
332.713 549.03 331.769 548.502 331.193 547.43 cv
330.681 546.518 330.441 545.494 330.441 544.358 cv
330.441 542.614 331.017 541.142 332.185 539.942 cv
332.841 539.27 333.513 538.79 334.217 538.502 cv
334.921 538.214 335.849 538.006 337.033 537.878 cv
335.945 545.814 mo
335.945 543.75 335.225 542.71 333.785 542.71 cv
333.241 542.71 332.809 542.854 332.457 543.142 cv
332.105 543.43 331.929 543.894 331.929 544.566 cv
331.929 545.814 332.121 546.806 332.505 547.526 cv
332.889 548.246 333.465 548.598 334.201 548.598 cv
334.761 548.598 335.193 548.358 335.497 547.846 cv
335.785 547.334 335.945 546.662 335.945 545.814 cv
f
420.057 526.4 mo
420.057 529.9 li
f
420.057 526.4 mo
420.057 529.9 li
@
417.673 543.542 mo
417.673 544.262 417.593 544.934 417.465 545.574 cv
417.321 546.214 417.113 546.79 416.841 547.318 cv
416.569 547.862 416.201 548.278 415.721 548.582 cv
415.241 548.87 414.681 549.03 414.057 549.03 cv
413.401 549.03 412.825 548.87 412.345 548.55 cv
411.849 548.23 411.465 547.782 411.209 547.222 cv
410.937 546.678 410.745 546.086 410.617 545.446 cv
410.489 544.822 410.441 544.15 410.441 543.446 cv
410.441 542.454 410.553 541.574 410.809 540.774 cv
411.049 539.974 411.449 539.318 412.025 538.79 cv
412.601 538.278 413.289 538.006 414.121 538.006 cv
415.161 538.006 416.009 538.518 416.681 539.542 cv
417.337 540.566 417.673 541.91 417.673 543.542 cv
416.137 543.622 mo
416.137 541.942 415.945 540.662 415.593 539.766 cv
415.241 538.87 414.713 538.422 414.025 538.422 cv
413.353 538.422 412.857 538.87 412.505 539.766 cv
412.153 540.662 411.977 541.926 411.977 543.558 cv
411.977 545.206 412.153 546.47 412.505 547.334 cv
412.857 548.198 413.369 548.63 414.057 548.63 cv
414.729 548.63 415.241 548.198 415.593 547.334 cv
415.945 546.47 416.137 545.222 416.137 543.622 cv
f
420.953 548.134 mo
420.953 548.374 420.857 548.582 420.681 548.742 cv
420.505 548.902 420.297 548.982 420.057 548.982 cv
419.801 548.982 419.593 548.902 419.433 548.742 cv
419.257 548.582 419.177 548.374 419.177 548.118 cv
419.177 547.878 419.257 547.67 419.433 547.494 cv
419.609 547.318 419.817 547.222 420.073 547.222 cv
420.297 547.222 420.505 547.318 420.681 547.494 cv
420.857 547.686 420.953 547.894 420.953 548.134 cv
f
429.177 546.342 mo
429.177 547.174 428.889 547.83 428.313 548.31 cv
427.737 548.79 426.985 549.03 426.025 549.03 cv
425.129 549.03 424.393 548.79 423.817 548.31 cv
423.241 547.83 422.953 547.206 422.953 546.438 cv
422.953 545.878 423.081 545.398 423.369 544.998 cv
423.641 544.598 424.201 544.102 425.033 543.51 cv
424.233 542.854 423.689 542.326 423.433 541.91 cv
423.177 541.51 423.049 541.046 423.049 540.502 cv
423.049 539.75 423.337 539.142 423.913 538.694 cv
424.489 538.246 425.241 538.006 426.153 538.006 cv
426.921 538.006 427.561 538.23 428.073 538.678 cv
428.585 539.126 428.841 539.654 428.841 540.294 cv
428.841 540.886 428.681 541.35 428.377 541.702 cv
428.073 542.054 427.513 542.454 426.697 542.886 cv
427.657 543.526 428.297 544.102 428.649 544.598 cv
429.001 545.11 429.177 545.686 429.177 546.342 cv
427.737 540.294 mo
427.737 539.75 427.577 539.302 427.273 538.966 cv
426.953 538.63 426.537 538.454 425.993 538.454 cv
425.449 538.454 425.017 538.598 424.697 538.886 cv
424.377 539.174 424.233 539.558 424.233 540.038 cv
424.233 540.534 424.377 540.982 424.697 541.382 cv
425.017 541.782 425.529 542.182 426.233 542.598 cv
426.777 542.278 427.161 541.942 427.385 541.59 cv
427.609 541.238 427.737 540.806 427.737 540.294 cv
426.393 544.47 mo
425.449 543.83 li
424.969 544.214 424.649 544.598 424.457 544.966 cv
424.265 545.334 424.169 545.782 424.169 546.294 cv
424.169 547.03 424.345 547.59 424.713 547.99 cv
425.081 548.406 425.577 548.598 426.201 548.598 cv
426.713 548.598 427.145 548.438 427.465 548.118 cv
427.785 547.798 427.961 547.366 427.961 546.838 cv
427.961 546.358 427.833 545.942 427.593 545.574 cv
427.337 545.222 426.937 544.854 426.393 544.47 cv
f
512.217 526.4 mo
512.217 529.9 li
f
512.217 526.4 mo
512.217 529.9 li
@
508.521 548.822 mo
504.105 548.822 li
504.105 548.582 li
504.681 548.55 505.081 548.454 505.305 548.262 cv
505.513 548.07 505.625 547.75 505.625 547.302 cv
505.625 540.118 li
505.625 539.606 505.465 539.334 505.145 539.334 cv
504.985 539.334 504.745 539.398 504.425 539.526 cv
503.993 539.686 li
503.993 539.462 li
506.857 538.006 li
507.001 538.054 li
507.001 547.606 li
507.001 547.958 507.097 548.214 507.321 548.358 cv
507.529 548.518 507.929 548.582 508.521 548.582 cv
508.521 548.822 li
f
513.113 548.134 mo
513.113 548.374 513.017 548.582 512.841 548.742 cv
512.665 548.902 512.457 548.982 512.217 548.982 cv
511.961 548.982 511.753 548.902 511.593 548.742 cv
511.417 548.582 511.337 548.374 511.337 548.118 cv
511.337 547.878 511.417 547.67 511.593 547.494 cv
511.769 547.318 511.977 547.222 512.233 547.222 cv
512.457 547.222 512.665 547.318 512.841 547.494 cv
513.017 547.686 513.113 547.894 513.113 548.134 cv
f
521.833 543.542 mo
521.833 544.262 521.753 544.934 521.625 545.574 cv
521.481 546.214 521.273 546.79 521.001 547.318 cv
520.729 547.862 520.361 548.278 519.881 548.582 cv
519.401 548.87 518.841 549.03 518.217 549.03 cv
517.561 549.03 516.985 548.87 516.505 548.55 cv
516.009 548.23 515.625 547.782 515.369 547.222 cv
515.097 546.678 514.905 546.086 514.777 545.446 cv
514.649 544.822 514.601 544.15 514.601 543.446 cv
514.601 542.454 514.713 541.574 514.969 540.774 cv
515.209 539.974 515.609 539.318 516.185 538.79 cv
516.761 538.278 517.449 538.006 518.281 538.006 cv
519.321 538.006 520.169 538.518 520.841 539.542 cv
521.497 540.566 521.833 541.91 521.833 543.542 cv
520.297 543.622 mo
520.297 541.942 520.105 540.662 519.753 539.766 cv
519.401 538.87 518.873 538.422 518.185 538.422 cv
517.513 538.422 517.017 538.87 516.665 539.766 cv
516.313 540.662 516.137 541.926 516.137 543.558 cv
516.137 545.206 516.313 546.47 516.665 547.334 cv
517.017 548.198 517.529 548.63 518.217 548.63 cv
518.889 548.63 519.401 548.198 519.753 547.334 cv
520.105 546.47 520.297 545.222 520.297 543.622 cv
f
269.356 568.407 mo
269.616 568.627 li
268.976 569.627 268.156 570.127 267.196 570.127 cv
266.016 570.127 265.436 569.287 265.436 567.607 cv
265.436 561.587 li
264.376 561.587 li
264.296 561.447 li
264.296 561.347 264.396 561.227 264.636 561.067 cv
265.136 560.787 265.776 560.067 266.576 558.927 cv
266.596 558.887 266.656 558.807 266.756 558.687 cv
266.856 558.567 266.936 558.447 266.976 558.367 cv
267.056 558.367 267.116 558.467 267.116 558.627 cv
267.116 560.947 li
269.136 560.947 li
269.136 561.587 li
267.116 561.587 li
267.116 567.307 li
267.116 567.947 267.196 568.407 267.356 568.687 cv
267.516 568.967 267.776 569.107 268.156 569.107 cv
268.556 569.107 268.956 568.887 269.356 568.407 cv
f
273.196 557.307 mo
273.196 557.607 273.096 557.847 272.896 558.047 cv
272.696 558.247 272.436 558.327 272.156 558.327 cv
271.876 558.327 271.636 558.247 271.436 558.047 cv
271.236 557.847 271.156 557.607 271.156 557.307 cv
271.156 557.027 271.256 556.787 271.456 556.587 cv
271.656 556.387 271.896 556.287 272.176 556.287 cv
272.456 556.287 272.696 556.387 272.896 556.587 cv
273.096 556.787 273.196 557.027 273.196 557.307 cv
274.656 569.947 mo
269.916 569.947 li
269.916 569.647 li
270.596 569.607 271.036 569.487 271.216 569.287 cv
271.396 569.087 271.496 568.627 271.496 567.867 cv
271.496 563.327 li
271.496 562.867 271.436 562.547 271.356 562.347 cv
271.256 562.167 271.076 562.067 270.836 562.067 cv
270.516 562.067 270.236 562.107 269.996 562.167 cv
269.996 561.847 li
273.096 560.747 li
273.176 560.827 li
273.176 567.847 li
273.176 568.607 273.256 569.067 273.416 569.267 cv
273.576 569.467 273.996 569.607 274.656 569.647 cv
274.656 569.947 li
f
290.656 569.947 mo
286.296 569.947 li
286.296 569.647 li
286.856 569.607 287.196 569.487 287.356 569.307 cv
287.516 569.127 287.596 568.747 287.596 568.147 cv
287.596 564.027 li
287.596 563.227 287.476 562.667 287.236 562.307 cv
286.996 561.967 286.616 561.787 286.056 561.787 cv
285.576 561.787 285.176 561.887 284.856 562.067 cv
284.536 562.267 284.216 562.567 283.916 563.007 cv
283.916 568.047 li
283.916 568.687 283.996 569.127 284.196 569.327 cv
284.396 569.527 284.776 569.647 285.356 569.647 cv
285.356 569.947 li
280.876 569.947 li
280.876 569.647 li
281.456 569.607 281.836 569.527 281.996 569.367 cv
282.156 569.207 282.236 568.827 282.236 568.227 cv
282.236 564.007 li
282.236 562.527 281.796 561.787 280.936 561.787 cv
280.556 561.787 280.156 561.887 279.736 562.047 cv
279.316 562.207 279.016 562.407 278.816 562.647 cv
278.636 562.847 278.556 562.967 278.556 562.987 cv
278.556 568.547 li
278.556 568.987 278.636 569.267 278.836 569.407 cv
279.016 569.547 279.376 569.627 279.916 569.647 cv
279.916 569.947 li
275.476 569.947 li
275.476 569.647 li
276.036 569.647 276.396 569.547 276.596 569.347 cv
276.776 569.147 276.876 568.767 276.876 568.187 cv
276.876 563.227 li
276.876 562.747 276.816 562.407 276.716 562.207 cv
276.596 562.007 276.416 561.907 276.176 561.907 cv
275.976 561.907 275.756 561.947 275.536 561.987 cv
275.536 561.647 li
276.436 561.407 277.356 561.107 278.316 560.747 cv
278.476 560.807 li
278.476 562.287 li
278.516 562.287 li
279.116 561.667 279.636 561.247 280.096 561.047 cv
280.556 560.847 281.056 560.747 281.576 560.747 cv
282.616 560.747 283.336 561.307 283.696 562.427 cv
284.736 561.307 285.816 560.747 286.956 560.747 cv
288.496 560.747 289.276 561.947 289.276 564.347 cv
289.276 568.407 li
289.276 568.847 289.336 569.167 289.476 569.327 cv
289.596 569.487 289.816 569.587 290.136 569.607 cv
290.656 569.647 li
290.656 569.947 li
f
298.876 566.667 mo
299.196 566.807 li
298.396 569.027 296.996 570.127 295.016 570.127 cv
293.836 570.127 292.916 569.727 292.236 568.907 cv
291.556 568.107 291.216 567.007 291.216 565.607 cv
291.216 564.187 291.596 563.027 292.356 562.107 cv
293.116 561.207 294.116 560.747 295.356 560.747 cv
296.556 560.747 297.476 561.207 298.136 562.127 cv
298.516 562.667 298.736 563.427 298.816 564.407 cv
292.656 564.407 li
292.696 565.247 292.776 565.887 292.896 566.327 cv
293.016 566.767 293.236 567.227 293.576 567.667 cv
294.136 568.407 294.876 568.767 295.796 568.767 cv
296.436 568.767 296.996 568.607 297.436 568.287 cv
297.876 567.967 298.356 567.427 298.876 566.667 cv
292.696 563.767 mo
296.776 563.767 li
296.656 562.927 296.456 562.347 296.176 561.987 cv
295.896 561.647 295.456 561.467 294.816 561.467 cv
294.256 561.467 293.776 561.667 293.416 562.067 cv
293.036 562.467 292.796 563.027 292.696 563.767 cv
f
51.4171 526.4 mo
47.9171 526.4 li
f
51.4171 526.4 mo
47.9171 526.4 li
@
39.5331 526.581 mo
39.5331 527.301 39.4531 527.973 39.3251 528.613 cv
39.1811 529.253 38.9731 529.829 38.7011 530.357 cv
38.4291 530.901 38.0611 531.317 37.5811 531.621 cv
37.1011 531.909 36.5411 532.069 35.9171 532.069 cv
35.2611 532.069 34.6851 531.909 34.2051 531.589 cv
33.7091 531.269 33.3251 530.821 33.0691 530.261 cv
32.7971 529.717 32.6051 529.125 32.4771 528.485 cv
32.3491 527.861 32.3011 527.189 32.3011 526.485 cv
32.3011 525.493 32.4131 524.613 32.6691 523.813 cv
32.9091 523.013 33.3091 522.357 33.8851 521.829 cv
34.4611 521.317 35.1491 521.045 35.9811 521.045 cv
37.0211 521.045 37.8691 521.557 38.5411 522.581 cv
39.1971 523.605 39.5331 524.949 39.5331 526.581 cv
37.9971 526.661 mo
37.9971 524.981 37.8051 523.701 37.4531 522.805 cv
37.1011 521.909 36.5731 521.461 35.8851 521.461 cv
35.2131 521.461 34.7171 521.909 34.3651 522.805 cv
34.0131 523.701 33.8371 524.965 33.8371 526.597 cv
33.8371 528.245 34.0131 529.509 34.3651 530.373 cv
34.7171 531.237 35.2291 531.669 35.9171 531.669 cv
36.5891 531.669 37.1011 531.237 37.4531 530.373 cv
37.8051 529.509 37.9971 528.261 37.9971 526.661 cv
f
51.4171 464.96 mo
47.9171 464.96 li
f
51.4171 464.96 mo
47.9171 464.96 li
@
39.5011 468.229 mo
38.6371 470.421 li
32.3811 470.421 li
32.3811 470.229 li
35.2291 467.205 li
35.9651 466.437 36.5091 465.717 36.8291 465.061 cv
37.1491 464.421 37.3091 463.749 37.3091 463.045 cv
37.3091 462.341 37.1011 461.781 36.7171 461.381 cv
36.3171 460.997 35.7731 460.789 35.0851 460.789 cv
34.5091 460.789 34.0451 460.949 33.7091 461.237 cv
33.3731 461.541 33.0531 462.085 32.7331 462.869 cv
32.3971 462.789 li
32.5731 461.797 32.9411 461.029 33.4851 460.453 cv
34.0291 459.893 34.7811 459.605 35.7251 459.605 cv
36.6051 459.605 37.3251 459.877 37.8691 460.405 cv
38.4131 460.949 38.6851 461.621 38.6851 462.421 cv
38.6851 463.637 37.9971 464.949 36.6371 466.389 cv
33.9971 469.205 li
37.7411 469.205 li
38.0931 469.205 38.3651 469.141 38.5731 468.997 cv
38.7811 468.869 39.0211 468.581 39.2771 468.133 cv
39.5011 468.229 li
f
51.4171 403.52 mo
47.9171 403.52 li
f
51.4171 403.52 mo
47.9171 403.52 li
@
39.4851 406.309 mo
37.8371 406.309 li
37.8371 408.981 li
36.5891 408.981 li
36.5891 406.309 li
32.1091 406.309 li
32.1091 405.285 li
37.1331 398.165 li
37.8371 398.165 li
37.8371 405.285 li
39.4851 405.285 li
39.4851 406.309 li
36.5891 405.285 mo
36.5891 399.797 li
32.7491 405.285 li
36.5891 405.285 li
f
51.4171 342.08 mo
47.9171 342.08 li
f
51.4171 342.08 mo
47.9171 342.08 li
@
39.0531 336.597 mo
39.0851 336.853 li
37.8211 337.061 36.7651 337.573 35.9331 338.389 cv
35.0851 339.205 34.5571 340.213 34.3491 341.413 cv
34.9571 340.933 35.6451 340.693 36.3811 340.693 cv
37.3091 340.693 38.0451 340.997 38.5891 341.589 cv
39.1331 342.197 39.4051 343.013 39.4051 344.037 cv
39.4051 345.093 39.1331 345.941 38.5891 346.597 cv
37.9491 347.365 37.1011 347.749 36.0451 347.749 cv
34.7331 347.749 33.7891 347.221 33.2131 346.149 cv
32.7011 345.237 32.4611 344.213 32.4611 343.077 cv
32.4611 341.333 33.0371 339.861 34.2051 338.661 cv
34.8611 337.989 35.5331 337.509 36.2371 337.221 cv
36.9411 336.933 37.8691 336.725 39.0531 336.597 cv
37.9651 344.533 mo
37.9651 342.469 37.2451 341.429 35.8051 341.429 cv
35.2611 341.429 34.8291 341.573 34.4771 341.861 cv
34.1251 342.149 33.9491 342.613 33.9491 343.285 cv
33.9491 344.533 34.1411 345.525 34.5251 346.245 cv
34.9091 346.965 35.4851 347.317 36.2211 347.317 cv
36.7811 347.317 37.2131 347.077 37.5171 346.565 cv
37.8051 346.053 37.9651 345.381 37.9651 344.533 cv
f
51.4171 280.64 mo
47.9171 280.64 li
f
51.4171 280.64 mo
47.9171 280.64 li
@
39.0371 283.621 mo
39.0371 284.453 38.7491 285.109 38.1731 285.589 cv
37.5971 286.069 36.8451 286.309 35.8851 286.309 cv
34.9891 286.309 34.2531 286.069 33.6771 285.589 cv
33.1011 285.109 32.8131 284.485 32.8131 283.717 cv
32.8131 283.157 32.9411 282.677 33.2291 282.277 cv
33.5011 281.877 34.0611 281.381 34.8931 280.789 cv
34.0931 280.133 33.5491 279.605 33.2931 279.189 cv
33.0371 278.789 32.9091 278.325 32.9091 277.781 cv
32.9091 277.029 33.1971 276.421 33.7731 275.973 cv
34.3491 275.525 35.1011 275.285 36.0131 275.285 cv
36.7811 275.285 37.4211 275.509 37.9331 275.957 cv
38.4451 276.405 38.7011 276.933 38.7011 277.573 cv
38.7011 278.165 38.5411 278.629 38.2371 278.981 cv
37.9331 279.333 37.3731 279.733 36.5571 280.165 cv
37.5171 280.805 38.1571 281.381 38.5091 281.877 cv
38.8611 282.389 39.0371 282.965 39.0371 283.621 cv
37.5971 277.573 mo
37.5971 277.029 37.4371 276.581 37.1331 276.245 cv
36.8131 275.909 36.3971 275.733 35.8531 275.733 cv
35.3091 275.733 34.8771 275.877 34.5571 276.165 cv
34.2371 276.453 34.0931 276.837 34.0931 277.317 cv
34.0931 277.813 34.2371 278.261 34.5571 278.661 cv
34.8771 279.061 35.3891 279.461 36.0931 279.877 cv
36.6371 279.557 37.0211 279.221 37.2451 278.869 cv
37.4691 278.517 37.5971 278.085 37.5971 277.573 cv
36.2531 281.749 mo
35.3091 281.109 li
34.8291 281.493 34.5091 281.877 34.3171 282.245 cv
34.1251 282.613 34.0291 283.061 34.0291 283.573 cv
34.0291 284.309 34.2051 284.869 34.5731 285.269 cv
34.9411 285.685 35.4371 285.877 36.0611 285.877 cv
36.5731 285.877 37.0051 285.717 37.3251 285.397 cv
37.6451 285.077 37.8211 284.645 37.8211 284.117 cv
37.8211 283.637 37.6931 283.221 37.4531 282.853 cv
37.1971 282.501 36.7971 282.133 36.2531 281.749 cv
f
51.4171 219.2 mo
47.9171 219.2 li
f
51.4171 219.2 mo
47.9171 219.2 li
@
30.2211 224.661 mo
25.8051 224.661 li
25.8051 224.421 li
26.3811 224.389 26.7811 224.293 27.0051 224.101 cv
27.2131 223.909 27.3251 223.589 27.3251 223.141 cv
27.3251 215.957 li
27.3251 215.445 27.1651 215.173 26.8451 215.173 cv
26.6851 215.173 26.4451 215.237 26.1251 215.365 cv
25.6931 215.525 li
25.6931 215.301 li
28.5571 213.845 li
28.7011 213.893 li
28.7011 223.445 li
28.7011 223.797 28.7971 224.053 29.0211 224.197 cv
29.2291 224.357 29.6291 224.421 30.2211 224.421 cv
30.2211 224.661 li
f
39.5331 219.381 mo
39.5331 220.101 39.4531 220.773 39.3251 221.413 cv
39.1811 222.053 38.9731 222.629 38.7011 223.157 cv
38.4291 223.701 38.0611 224.117 37.5811 224.421 cv
37.1011 224.709 36.5411 224.869 35.9171 224.869 cv
35.2611 224.869 34.6851 224.709 34.2051 224.389 cv
33.7091 224.069 33.3251 223.621 33.0691 223.061 cv
32.7971 222.517 32.6051 221.925 32.4771 221.285 cv
32.3491 220.661 32.3011 219.989 32.3011 219.285 cv
32.3011 218.293 32.4131 217.413 32.6691 216.613 cv
32.9091 215.813 33.3091 215.157 33.8851 214.629 cv
34.4611 214.117 35.1491 213.845 35.9811 213.845 cv
37.0211 213.845 37.8691 214.357 38.5411 215.381 cv
39.1971 216.405 39.5331 217.749 39.5331 219.381 cv
37.9971 219.461 mo
37.9971 217.781 37.8051 216.501 37.4531 215.605 cv
37.1011 214.709 36.5731 214.261 35.8851 214.261 cv
35.2131 214.261 34.7171 214.709 34.3651 215.605 cv
34.0131 216.501 33.8371 217.765 33.8371 219.397 cv
33.8371 221.045 34.0131 222.309 34.3651 223.173 cv
34.7171 224.037 35.2291 224.469 35.9171 224.469 cv
36.5891 224.469 37.1011 224.037 37.4531 223.173 cv
37.8051 222.309 37.9971 221.061 37.9971 219.461 cv
f
51.4171 157.76 mo
47.9171 157.76 li
f
51.4171 157.76 mo
47.9171 157.76 li
@
30.2211 163.221 mo
25.8051 163.221 li
25.8051 162.981 li
26.3811 162.949 26.7811 162.853 27.0051 162.661 cv
27.2131 162.469 27.3251 162.149 27.3251 161.701 cv
27.3251 154.517 li
27.3251 154.005 27.1651 153.733 26.8451 153.733 cv
26.6851 153.733 26.4451 153.797 26.1251 153.925 cv
25.6931 154.085 li
25.6931 153.861 li
28.5571 152.405 li
28.7011 152.453 li
28.7011 162.005 li
28.7011 162.357 28.7971 162.613 29.0211 162.757 cv
29.2291 162.917 29.6291 162.981 30.2211 162.981 cv
30.2211 163.221 li
f
39.5011 161.029 mo
38.6371 163.221 li
32.3811 163.221 li
32.3811 163.029 li
35.2291 160.005 li
35.9651 159.237 36.5091 158.517 36.8291 157.861 cv
37.1491 157.221 37.3091 156.549 37.3091 155.845 cv
37.3091 155.141 37.1011 154.581 36.7171 154.181 cv
36.3171 153.797 35.7731 153.589 35.0851 153.589 cv
34.5091 153.589 34.0451 153.749 33.7091 154.037 cv
33.3731 154.341 33.0531 154.885 32.7331 155.669 cv
32.3971 155.589 li
32.5731 154.597 32.9411 153.829 33.4851 153.253 cv
34.0291 152.693 34.7811 152.405 35.7251 152.405 cv
36.6051 152.405 37.3251 152.677 37.8691 153.205 cv
38.4131 153.749 38.6851 154.421 38.6851 155.221 cv
38.6851 156.437 37.9971 157.749 36.6371 159.189 cv
33.9971 162.005 li
37.7411 162.005 li
38.0931 162.005 38.3651 161.941 38.5731 161.797 cv
38.7811 161.669 39.0211 161.381 39.2771 160.933 cv
39.5011 161.029 li
f
51.4171 96.32 mo
47.9171 96.32 li
f
51.4171 96.32 mo
47.9171 96.32 li
@
30.2211 101.781 mo
25.8051 101.781 li
25.8051 101.541 li
26.3811 101.509 26.7811 101.413 27.0051 101.221 cv
27.2131 101.029 27.3251 100.709 27.3251 100.261 cv
27.3251 93.0769 li
27.3251 92.5649 27.1651 92.2929 26.8451 92.2929 cv
26.6851 92.2929 26.4451 92.3569 26.1251 92.4849 cv
25.6931 92.6449 li
25.6931 92.4209 li
28.5571 90.9649 li
28.7011 91.0129 li
28.7011 100.565 li
28.7011 100.917 28.7971 101.173 29.0211 101.317 cv
29.2291 101.477 29.6291 101.541 30.2211 101.541 cv
30.2211 101.781 li
f
39.4851 99.1089 mo
37.8371 99.1089 li
37.8371 101.781 li
36.5891 101.781 li
36.5891 99.1089 li
32.1091 99.1089 li
32.1091 98.0849 li
37.1331 90.9649 li
37.8371 90.9649 li
37.8371 98.0849 li
39.4851 98.0849 li
39.4851 99.1089 li
36.5891 98.0849 mo
36.5891 92.5969 li
32.7491 98.0849 li
36.5891 98.0849 li
f
6.4133 310.566 mo
8.2533 310.566 li
7.5333 310.066 7.0533 309.646 6.7733 309.306 cv
6.5133 308.966 6.3733 308.586 6.3733 308.166 cv
6.3733 307.826 6.4733 307.566 6.6533 307.366 cv
6.8533 307.166 7.1133 307.066 7.4333 307.066 cv
7.7133 307.066 7.9333 307.146 8.0933 307.286 cv
8.2533 307.426 8.3333 307.606 8.3333 307.846 cv
8.3333 308.106 8.2133 308.366 7.9333 308.646 cv
7.7333 308.866 7.6333 309.046 7.6333 309.166 cv
7.6333 309.446 7.8333 309.766 8.2133 310.086 cv
8.6133 310.406 8.9533 310.566 9.2733 310.566 cv
13.7733 310.566 li
14.3533 310.566 14.7333 310.466 14.9333 310.226 cv
15.1333 310.006 15.2533 309.546 15.2733 308.866 cv
15.5733 308.866 li
15.5733 313.666 li
15.2733 313.666 li
15.1533 313.026 15.0333 312.646 14.8733 312.486 cv
14.7333 312.326 14.4133 312.246 13.8933 312.246 cv
8.8933 312.246 li
8.4533 312.246 8.1533 312.306 7.9733 312.406 cv
7.7933 312.506 7.6933 312.686 7.6933 312.926 cv
7.6933 313.146 7.7333 313.386 7.7733 313.626 cv
7.4533 313.626 li
7.1933 312.786 6.8333 311.806 6.3733 310.666 cv
6.4133 310.566 li
f
14.2533 298.266 mo
14.8133 298.266 li
15.4533 298.786 15.7533 299.386 15.7533 300.066 cv
15.7533 300.826 15.2733 301.266 14.3133 301.346 cv
14.3133 301.366 li
15.2733 302.226 15.7533 303.186 15.7533 304.266 cv
15.7533 304.906 15.5733 305.406 15.2133 305.786 cv
14.8533 306.186 14.3533 306.366 13.6933 306.366 cv
12.7733 306.366 11.9933 305.906 11.3533 304.966 cv
10.9333 304.326 10.3933 303.126 9.7333 301.366 cv
8.6533 301.366 li
8.0533 301.366 7.6133 301.526 7.3133 301.806 cv
7.0133 302.086 6.8533 302.466 6.8533 302.926 cv
6.8533 303.326 6.9533 303.666 7.1533 303.926 cv
7.3533 304.206 7.5733 304.326 7.8333 304.326 cv
7.9533 304.326 8.0933 304.306 8.2333 304.266 cv
8.3933 304.226 8.5333 304.206 8.6733 304.206 cv
8.8733 304.206 9.0733 304.306 9.2333 304.486 cv
9.4133 304.666 9.4933 304.886 9.4933 305.126 cv
9.4933 305.366 9.4133 305.566 9.2333 305.726 cv
9.0733 305.906 8.8533 305.986 8.5733 305.986 cv
7.9333 305.986 7.4133 305.646 6.9733 304.966 cv
6.5733 304.346 6.3733 303.586 6.3733 302.666 cv
6.3733 301.586 6.6733 300.806 7.2733 300.306 cv
7.5533 300.066 7.8533 299.926 8.1333 299.846 cv
8.4133 299.786 8.8733 299.746 9.4933 299.746 cv
13.3133 299.746 li
14.1933 299.746 14.6333 299.546 14.6333 299.126 cv
14.6333 298.866 14.5133 298.586 14.2533 298.266 cv
13.0333 301.366 mo
10.2133 301.366 li
10.6533 302.606 11.0933 303.446 11.5333 303.926 cv
11.9533 304.386 12.4733 304.606 13.0733 304.606 cv
13.5933 304.606 13.9733 304.486 14.2333 304.226 cv
14.4933 303.986 14.6133 303.646 14.6133 303.226 cv
14.6133 302.786 14.5133 302.406 14.2933 302.066 cv
14.0933 301.786 13.9133 301.606 13.7333 301.506 cv
13.5733 301.426 13.3333 301.366 13.0333 301.366 cv
f
15.5733 288.526 mo
15.5733 292.686 li
15.2733 292.666 li
15.2333 292.186 15.0933 291.846 14.8533 291.686 cv
14.6133 291.526 14.1533 291.426 13.4733 291.426 cv
9.4933 291.426 li
8.1533 291.426 7.4733 291.926 7.4733 292.886 cv
7.4733 293.226 7.5533 293.546 7.7133 293.826 cv
7.8733 294.126 8.1733 294.506 8.6133 294.946 cv
14.1333 294.946 li
14.5333 294.946 14.8133 294.866 14.9733 294.686 cv
15.1333 294.506 15.2333 294.166 15.2733 293.646 cv
15.5733 293.646 li
15.5733 297.866 li
15.2733 297.866 li
15.2333 297.366 15.1133 297.026 14.9133 296.866 cv
14.7133 296.706 14.2933 296.626 13.6933 296.626 cv
8.8333 296.626 li
8.3533 296.626 8.0133 296.686 7.8133 296.766 cv
7.6333 296.866 7.5333 297.046 7.5333 297.326 cv
7.5333 297.606 7.5733 297.786 7.6133 297.906 cv
7.2733 297.906 li
7.0133 296.986 6.7133 296.066 6.3733 295.166 cv
6.4333 295.006 li
7.9933 295.006 li
7.9933 294.986 li
6.9133 294.046 6.3733 293.086 6.3733 292.106 cv
6.3733 291.346 6.6533 290.766 7.1733 290.366 cv
7.7133 289.966 8.4733 289.746 9.4533 289.746 cv
13.8733 289.746 li
14.4133 289.746 14.7733 289.666 14.9333 289.506 cv
15.1133 289.346 15.2333 289.026 15.2733 288.526 cv
15.5733 288.526 li
f
15.5733 278.126 mo
15.5733 282.486 li
15.2733 282.486 li
15.2733 282.106 li
15.2733 281.826 15.1733 281.686 14.9733 281.686 cv
14.8533 281.686 14.7133 281.766 14.5133 281.906 cv
10.5533 284.906 li
14.2333 284.906 li
14.5933 284.906 14.8333 284.826 14.9933 284.666 cv
15.1533 284.506 15.2533 284.206 15.2533 283.806 cv
15.2733 283.406 li
15.5733 283.406 li
15.5733 288.086 li
15.2733 288.086 li
15.1533 287.366 15.0333 286.946 14.9133 286.806 cv
14.7933 286.666 14.4533 286.586 13.9333 286.586 cv
4.2933 286.586 li
3.8133 286.586 3.4933 286.646 3.3333 286.766 cv
3.1733 286.886 3.0733 287.126 3.0733 287.446 cv
3.0733 287.526 3.0933 287.746 3.1133 288.086 cv
2.7933 288.086 li
2.6333 287.486 li
2.4333 286.686 2.1933 285.866 1.9133 284.986 cv
1.9533 284.906 li
10.3533 284.906 li
7.9133 282.166 li
7.6333 281.866 7.4133 281.706 7.2133 281.706 cv
7.0933 281.706 6.9933 281.786 6.9533 281.926 cv
6.9133 282.066 6.8733 282.326 6.8533 282.706 cv
6.5733 282.706 li
6.5733 278.626 li
6.8733 278.626 li
6.8733 279.306 7.0333 279.886 7.3133 280.406 cv
7.5933 280.926 8.2933 281.766 9.3933 282.946 cv
9.9333 283.526 li
13.8133 280.466 li
14.7333 279.746 15.2333 278.966 15.2733 278.126 cv
15.5733 278.126 li
f
gsave
51.417 526.4 mo
512.217 526.4 li
512.217 65.6 li
51.417 65.6 li
51.417 526.4 li
clp
52.4476 6.99995 mo
52.5321 525.4 li
53.6464 525.4 li
53.7578 495.676 li
53.7598 495.124 54.2055 494.68 54.7579 494.68 cv
62.4762 494.68 li
63.0284 494.68 63.4742 495.124 63.4763 495.676 cv
63.5876 525.4 li
71.6175 525.4 li
71.729 495.676 li
71.731 495.124 72.1766 494.68 72.729 494.68 cv
74.8027 494.68 li
75.3549 494.68 75.8005 495.124 75.8025 495.676 cv
75.914 525.4 li
513.102 525.4 li
513.102 527.4 li
74.9178 527.4 li
74.3656 527.4 73.9198 526.956 73.9178 526.404 cv
73.8063 496.68 li
73.7252 496.68 li
73.6137 526.404 li
73.6117 526.956 73.1661 527.4 72.6138 527.4 cv
62.5914 527.4 li
62.0392 527.4 61.5934 526.956 61.5915 526.404 cv
61.48 496.68 li
55.7539 496.68 li
55.6426 526.404 li
55.6405 526.956 55.1949 527.4 54.6426 527.4 cv
51.5322 527.4 li
50.9799 527.4 50.5323 526.952 50.5321 526.4 cv
50.4473 6.00006 li
52.4474 5.99977 li
52.4476 6.99995 li
.121569 .466667 .705882 rgb
f
grestore
gsave
51.417 526.4 mo
512.217 526.4 li
512.217 65.6 li
51.417 65.6 li
51.417 526.4 li
clp
53.9252 6.99626 mo
54.2602 96.3162 li
54.2611 96.5834 54.1573 96.8364 53.9687 97.0258 cv
53.7801 97.2151 53.5274 97.32 53.2602 97.32 cv
52.993 97.32 52.7404 97.2151 52.5518 97.0258 cv
52.3632 96.8366 52.2593 96.5834 52.2603 96.3162 cv
52.3755 65.5962 li
52.3774 65.044 52.8231 64.6 53.3755 64.6 cv
53.9277 64.6 54.3733 65.044 54.3754 65.5962 cv
54.4905 96.3162 li
53.4907 96.3201 li
53.4907 95.32 li
53.6058 95.32 li
54.158 95.32 54.6036 95.764 54.6057 96.3162 cv
54.721 127.036 li
53.721 127.04 li
53.721 126.04 li
53.8363 126.04 li
53.8363 127.04 li
52.8363 127.036 li
52.9514 96.3162 li
52.9535 95.764 53.3991 95.32 53.9514 95.32 cv
54.5037 95.32 54.9493 95.764 54.9513 96.3162 cv
55.0666 127.036 li
54.0666 127.04 li
54.0666 126.04 li
54.4122 126.04 li
54.4122 127.04 li
53.4122 127.036 li
53.5274 96.3162 li
53.5294 95.764 53.975 95.32 54.5274 95.32 cv
55.0796 95.32 55.5252 95.764 55.5273 96.3162 cv
55.7578 157.756 li
54.7579 157.76 li
54.7579 156.76 li
55.449 156.76 li
56.0012 156.76 56.447 157.204 56.449 157.756 cv
56.5642 188.476 li
55.5642 188.48 li
55.5642 187.48 li
55.7946 187.48 li
56.3468 187.48 56.7924 187.924 56.7945 188.476 cv
57.0211 248.92 li
58.7899 248.92 li
59.3421 248.92 59.7877 249.364 59.7897 249.916 cv
59.9012 279.64 li
62.5914 279.64 li
63.1437 279.64 63.5894 280.084 63.5914 280.636 cv
63.7066 311.356 li
62.7065 311.36 li
62.7065 310.36 li
63.1675 310.36 li
63.7197 310.36 64.1653 310.804 64.1674 311.356 cv
64.2788 341.08 li
69.4288 341.08 li
69.5402 311.356 li
69.5422 310.804 69.988 310.36 70.5402 310.36 cv
71.0924 310.36 71.538 310.804 71.5402 311.356 cv
71.6554 342.076 li
70.6555 342.08 li
70.6555 341.08 li
70.8858 341.08 li
70.8858 342.08 li
69.8858 342.078 li
70.0011 280.638 li
70.002 280.086 70.4488 279.64 71.001 279.64 cv
71.5532 279.64 72 280.086 72.001 280.638 cv
72.1162 342.078 li
72.1166 342.345 72.0124 342.598 71.8236 342.787 cv
71.6349 342.976 71.3825 343.08 71.1153 343.08 cv
70.8481 343.08 70.5959 342.975 70.4073 342.785 cv
70.2189 342.596 70.1152 342.344 70.1163 342.076 cv
70.2314 311.356 li
70.2335 310.804 70.6791 310.36 71.2315 310.36 cv
71.7837 310.36 72.2293 310.804 72.2313 311.356 cv
72.3465 342.076 li
72.3475 342.343 72.2439 342.596 72.0553 342.785 cv
71.8668 342.975 71.6147 343.08 71.3475 343.08 cv
71.0803 343.08 70.828 342.976 70.6391 342.787 cv
70.4502 342.598 70.346 342.345 70.3466 342.078 cv
70.4619 280.638 li
70.4628 280.086 70.9096 279.64 71.4618 279.64 cv
74.457 279.64 li
75.0092 279.64 75.4548 280.084 75.4569 280.636 cv
75.5721 311.356 li
75.5731 311.623 75.4691 311.876 75.2807 312.066 cv
75.0921 312.255 74.8394 312.36 74.5722 312.36 cv
74.305 312.36 74.0523 312.255 73.8638 312.066 cv
73.6752 311.876 73.5711 311.623 73.5722 311.356 cv
73.6875 280.636 li
73.6894 280.084 74.1351 279.64 74.6875 279.64 cv
75.2397 279.64 75.6853 280.084 75.6874 280.636 cv
75.8025 311.356 li
74.8027 311.36 li
74.8027 310.36 li
75.1483 310.36 li
75.1483 311.36 li
74.1483 311.356 li
74.2634 280.636 li
74.2655 280.084 74.7111 279.64 75.2635 279.64 cv
75.8157 279.64 76.2613 280.084 76.2633 280.636 cv
76.3785 311.356 li
75.3786 311.36 li
75.3786 310.36 li
75.4938 310.36 li
75.4938 311.36 li
74.4939 311.356 li
74.609 280.636 li
74.611 280.084 75.0567 279.64 75.6089 279.64 cv
77.7979 279.64 li
78.3501 279.64 78.7957 280.084 78.7978 280.636 cv
78.9091 310.36 li
80.793 310.36 li
81.3452 310.36 81.791 310.804 81.793 311.356 cv
81.9044 341.08 li
87.5899 341.08 li
88.1421 341.08 88.5877 341.524 88.5898 342.076 cv
88.7011 371.8 li
89.3178 371.8 li
89.3178 372.8 li
88.3179 372.796 li
88.433 342.076 li
88.4351 341.524 88.8807 341.08 89.4331 341.08 cv
91.5067 341.08 li
92.0589 341.08 92.5045 341.524 92.5066 342.076 cv
92.6218 372.796 li
91.6219 372.8 li
91.6219 371.8 li
92.5435 371.8 li
93.0957 371.8 93.5413 372.244 93.5434 372.796 cv
93.6548 402.52 li
93.8105 402.52 li
93.8105 403.52 li
92.8107 403.516 li
92.9258 372.796 li
92.9279 372.244 93.3735 371.8 93.9258 371.8 cv
96.5755 371.8 li
97.1277 371.8 97.5733 372.244 97.5753 372.796 cv
97.6868 402.52 li
125.26 402.52 li
125.813 402.52 126.258 402.964 126.26 403.516 cv
126.372 433.24 li
224.908 433.24 li
225.46 433.24 225.906 433.684 225.908 434.236 cv
226.02 463.96 li
366.028 463.96 li
366.581 463.96 367.026 464.404 367.028 464.956 cv
367.14 494.68 li
481.574 494.68 li
482.126 494.68 482.572 495.124 482.574 495.676 cv
482.685 525.4 li
513.102 525.4 li
513.102 527.4 li
481.689 527.4 li
481.137 527.4 480.691 526.956 480.689 526.404 cv
480.577 496.68 li
366.143 496.68 li
365.591 496.68 365.145 496.236 365.143 495.684 cv
365.032 465.96 li
225.023 465.96 li
224.471 465.96 224.025 465.516 224.023 464.964 cv
223.912 435.24 li
125.375 435.24 li
124.823 435.24 124.377 434.796 124.375 434.244 cv
124.264 404.52 li
96.6906 404.52 li
96.1383 404.52 95.6926 404.076 95.6906 403.524 cv
95.5791 373.8 li
94.9221 373.8 li
94.8106 403.524 li
94.8085 404.076 94.3629 404.52 93.8105 404.52 cv
92.6586 404.52 li
92.1063 404.52 91.6607 404.076 91.6586 403.524 cv
91.5434 372.804 li
92.5435 372.8 li
92.5435 373.8 li
91.6219 373.8 li
91.0695 373.8 90.6239 373.356 90.6218 372.804 cv
90.5104 343.08 li
90.4293 343.08 li
90.3178 372.804 li
90.3157 373.356 89.8701 373.8 89.3178 373.8 cv
87.705 373.8 li
87.1527 373.8 86.7071 373.356 86.705 372.804 cv
86.5935 343.08 li
80.9081 343.08 li
80.3559 343.08 79.9102 342.636 79.9083 342.084 cv
79.7968 312.36 li
77.9131 312.36 li
77.3607 312.36 76.9151 311.916 76.913 311.364 cv
76.8015 281.64 li
76.6051 281.64 li
76.4938 311.364 li
76.4917 311.916 76.0461 312.36 75.4938 312.36 cv
75.3786 312.36 li
74.8262 312.36 74.3806 311.916 74.3786 311.364 cv
74.2634 280.644 li
74.2624 280.377 74.3663 280.124 74.5549 279.934 cv
74.7435 279.745 74.9963 279.64 75.2635 279.64 cv
75.5306 279.64 75.7834 279.745 75.9718 279.934 cv
76.1604 280.124 76.2644 280.377 76.2633 280.644 cv
76.1482 311.364 li
76.1461 311.916 75.7005 312.36 75.1483 312.36 cv
74.8027 312.36 li
74.2503 312.36 73.8047 311.916 73.8026 311.364 cv
73.6875 280.644 li
73.6864 280.377 73.7904 280.124 73.979 279.934 cv
74.1676 279.745 74.4202 279.64 74.6875 279.64 cv
74.9545 279.64 75.2073 279.745 75.3959 279.934 cv
75.5845 280.124 75.6884 280.377 75.6874 280.644 cv
75.5721 311.364 li
75.57 311.916 75.1244 312.36 74.5722 312.36 cv
74.0198 312.36 73.5742 311.916 73.5722 311.364 cv
73.4608 281.64 li
72.4599 281.64 li
72.3465 342.082 li
72.3455 342.634 71.8999 343.079 71.3475 343.08 cv
70.7953 343.08 70.3487 342.636 70.3466 342.084 cv
70.2314 311.364 li
70.2304 311.097 70.3344 310.843 70.5229 310.654 cv
70.7115 310.465 70.9643 310.36 71.2315 310.36 cv
71.4986 310.36 71.7514 310.465 71.9398 310.654 cv
72.1284 310.843 72.2324 311.097 72.2313 311.364 cv
72.1162 342.084 li
72.1141 342.636 71.6675 343.08 71.1153 343.08 cv
70.5629 343.079 70.1171 342.634 70.1163 342.082 cv
70.0011 280.642 li
70.0005 280.375 70.1045 280.123 70.2932 279.934 cv
70.4819 279.744 70.7338 279.64 71.001 279.64 cv
71.2682 279.64 71.52 279.744 71.7088 279.934 cv
71.8975 280.123 72.0015 280.375 72.001 280.642 cv
71.8857 342.082 li
71.8847 342.634 71.438 343.08 70.8858 343.08 cv
70.6555 343.08 li
70.1031 343.08 69.6575 342.636 69.6555 342.084 cv
69.5402 311.364 li
69.5391 311.097 69.6432 310.843 69.8318 310.654 cv
70.0203 310.465 70.273 310.36 70.5402 310.36 cv
70.8074 310.36 71.0601 310.465 71.2487 310.654 cv
71.4372 310.843 71.5411 311.097 71.5402 311.364 cv
71.4249 342.084 li
71.4229 342.636 70.9772 343.08 70.425 343.08 cv
63.2826 343.08 li
62.7303 343.08 62.2847 342.636 62.2826 342.084 cv
62.1674 311.364 li
63.1675 311.36 li
63.1675 312.36 li
62.7065 312.36 li
62.1543 312.36 61.7086 311.916 61.7067 311.364 cv
61.5952 281.64 li
58.905 281.64 li
58.3527 281.64 57.9071 281.196 57.905 280.644 cv
57.7935 250.92 li
56.0251 250.92 li
55.4727 250.92 55.027 250.476 55.0251 249.924 cv
54.7946 188.484 li
55.7946 188.48 li
55.7946 189.48 li
55.5642 189.48 li
55.0119 189.48 54.5662 189.036 54.5643 188.484 cv
54.4491 157.764 li
55.449 157.76 li
55.449 158.76 li
54.7579 158.76 li
54.2055 158.76 53.7598 158.316 53.7578 157.764 cv
53.5274 96.3238 li
53.5263 96.0566 53.6304 95.8035 53.819 95.6142 cv
54.0075 95.425 54.2602 95.32 54.5274 95.32 cv
54.7946 95.32 55.0473 95.425 55.2358 95.6142 cv
55.4244 95.8035 55.5283 96.0566 55.5273 96.3238 cv
55.4121 127.044 li
55.4101 127.596 54.9645 128.04 54.4122 128.04 cv
54.0666 128.04 li
53.5144 128.04 53.0686 127.596 53.0667 127.044 cv
52.9514 96.3238 li
52.9504 96.0566 53.0543 95.8035 53.2429 95.6142 cv
53.4315 95.425 53.6843 95.32 53.9514 95.32 cv
54.2186 95.32 54.4714 95.425 54.6598 95.6142 cv
54.8484 95.8035 54.9524 96.0566 54.9513 96.3238 cv
54.8362 127.044 li
54.8341 127.596 54.3885 128.04 53.8363 128.04 cv
53.721 128.04 li
53.1688 128.04 52.723 127.596 52.7209 127.044 cv
52.6058 96.3238 li
53.6058 96.3201 li
53.6058 97.32 li
53.4907 97.32 li
52.9383 97.32 52.4927 96.8761 52.4906 96.3238 cv
52.3755 65.6037 li
52.3744 65.3365 52.4784 65.0835 52.667 64.8942 cv
52.8556 64.705 53.1082 64.6 53.3755 64.6 cv
53.6425 64.6 53.8953 64.705 54.0839 64.8943 cv
54.2725 65.0835 54.3764 65.3367 54.3754 65.6037 cv
54.2602 96.3238 li
54.2582 96.876 53.8125 97.32 53.2602 97.32 cv
52.708 97.32 52.2622 96.8761 52.2603 96.3238 cv
51.9214 6.00375 li
53.9215 5.99623 li
53.9252 6.99626 li
1 .498039 .054902 rgb
f
grestore
gsave
51.417 526.4 mo
512.217 526.4 li
512.217 65.6 li
51.417 65.6 li
51.417 526.4 li
clp
52.454 6.99965 mo
52.6469 494.68 li
53.0704 494.68 li
53.1819 464.956 li
53.1838 464.404 53.6296 463.96 54.1818 463.96 cv
63.513 463.96 li
64.0652 463.96 64.5108 464.404 64.513 464.956 cv
64.6282 495.676 li
63.6283 495.68 li
63.6283 494.68 li
63.9738 494.68 li
63.9738 495.68 li
62.9739 495.676 li
63.089 464.956 li
63.0911 464.404 63.5367 463.96 64.0891 463.96 cv
71.8074 463.96 li
72.3596 463.96 72.8052 464.404 72.8073 464.956 cv
72.9226 495.676 li
71.9226 495.68 li
71.9226 494.68 li
72.2682 494.68 li
72.2682 495.68 li
71.2682 495.676 li
71.3835 464.956 li
71.3854 464.404 71.8312 463.96 72.3834 463.96 cv
99.9162 463.96 li
100.468 463.96 100.914 464.404 100.916 464.956 cv
101.028 494.68 li
101.875 494.68 li
101.875 495.68 li
100.875 495.676 li
100.99 464.956 li
100.992 464.404 101.437 463.96 101.99 463.96 cv
110.284 463.96 li
110.836 463.96 111.282 464.404 111.284 464.956 cv
111.395 494.68 li
115.278 494.68 li
115.39 464.956 li
115.392 464.404 115.838 463.96 116.39 463.96 cv
120.307 463.96 li
120.859 463.96 121.305 464.404 121.307 464.956 cv
121.418 494.68 li
213.503 494.68 li
214.056 494.68 214.501 495.124 214.503 495.676 cv
214.615 525.4 li
513.102 525.4 li
513.102 527.4 li
213.619 527.4 li
213.066 527.4 212.621 526.956 212.619 526.404 cv
212.507 496.68 li
120.422 496.68 li
119.87 496.68 119.424 496.236 119.422 495.684 cv
119.31 465.96 li
117.386 465.96 li
117.275 495.684 li
117.273 496.236 116.827 496.68 116.275 496.68 cv
110.399 496.68 li
109.847 496.68 109.401 496.236 109.399 495.684 cv
109.288 465.96 li
102.986 465.96 li
102.875 495.684 li
102.872 496.236 102.427 496.68 101.875 496.68 cv
100.031 496.68 li
99.4791 496.68 99.0334 496.236 99.0315 495.684 cv
98.92 465.96 li
73.3796 465.96 li
73.2682 495.684 li
73.2662 496.236 72.8204 496.68 72.2682 496.68 cv
71.9226 496.68 li
71.3704 496.68 70.9246 496.236 70.9225 495.684 cv
70.8112 465.96 li
65.0853 465.96 li
64.9738 495.684 li
64.9717 496.236 64.5261 496.68 63.9738 496.68 cv
63.6283 496.68 li
63.0759 496.68 62.6303 496.236 62.6282 495.684 cv
62.5168 465.96 li
55.178 465.96 li
55.0666 495.684 li
55.0646 496.236 54.6188 496.68 54.0666 496.68 cv
51.6473 496.68 li
51.0951 496.68 50.6476 496.233 50.6474 495.68 cv
50.4537 6.00036 li
52.4538 5.99962 li
52.454 6.99965 li
.172549 .627451 .172549 rgb
f
grestore
gsave
51.417 526.4 mo
512.217 526.4 li
512.217 65.6 li
51.417 65.6 li
51.417 526.4 li
clp
2 lw
2 lc
53.0405 7 mo
53.2603 65.6 li
53.721 65.6 li
53.8362 96.32 li
54.4122 96.32 li
54.5274 127.04 li
55.1035 127.04 li
55.3338 188.48 li
56.4858 188.48 li
56.601 219.2 li
56.9467 219.2 li
57.0618 249.92 li
58.329 249.92 li
58.4442 280.64 li
59.1354 280.64 li
59.2506 311.36 li
59.481 311.36 li
59.5963 342.08 li
59.7114 342.08 li
59.8266 311.36 li
59.9418 342.08 li
60.057 342.08 li
60.1722 311.36 li
60.2874 342.08 li
60.4026 311.36 li
60.5178 342.08 li
60.6331 311.36 li
62.7066 311.36 li
62.8218 280.64 li
62.937 311.36 li
63.0522 311.36 li
63.1674 280.64 li
63.2827 311.36 li
63.513 311.36 li
63.6282 280.64 li
64.665 280.64 li
64.7802 249.92 li
65.817 249.92 li
65.9323 219.2 li
67.6602 219.2 li
67.7755 157.76 li
68.697 157.76 li
68.8123 188.48 li
70.1946 188.48 li
70.3098 157.76 li
71.3466 157.76 li
71.4619 188.48 li
72.2682 188.48 li
72.3834 157.76 li
72.6138 157.76 li
72.729 127.04 li
75.609 127.04 li
75.7242 96.32 li
76.1851 96.32 li
76.3002 127.04 li
76.761 127.04 li
76.8762 157.76 li
77.6826 157.76 li
77.7979 127.04 li
78.6042 127.04 li
78.7194 157.76 li
83.7882 157.76 li
83.9034 188.48 li
84.4794 188.48 li
84.5946 157.76 li
91.6218 157.76 li
91.737 188.48 li
94.1563 188.48 li
94.2714 157.76 li
96.6906 157.76 li
96.8058 188.48 li
98.649 188.48 li
98.7642 219.2 li
99.1098 219.2 li
99.225 188.48 li
101.875 188.48 li
101.99 157.76 li
102.105 188.48 li
104.87 188.48 li
104.985 219.2 li
106.137 219.2 li
106.252 188.48 li
106.713 188.48 li
106.828 219.2 li
108.095 219.2 li
108.211 188.48 li
110.515 188.48 li
110.63 157.76 li
111.897 157.76 li
112.012 188.48 li
112.127 188.48 li
112.243 219.2 li
112.358 188.48 li
112.473 188.48 li
112.588 157.76 li
112.703 188.48 li
112.819 157.76 li
114.777 157.76 li
114.892 188.48 li
115.238 188.48 li
115.353 219.2 li
116.735 219.2 li
116.851 188.48 li
118.233 188.48 li
118.348 219.2 li
123.417 219.2 li
123.532 188.48 li
124.454 188.48 li
124.569 219.2 li
125.836 219.2 li
125.951 188.48 li
126.067 219.2 li
128.255 219.2 li
128.371 188.48 li
131.596 188.48 li
131.711 219.2 li
132.979 219.2 li
133.094 188.48 li
135.743 188.48 li
135.859 219.2 li
138.163 219.2 li
138.278 188.48 li
140.582 188.48 li
140.697 219.2 li
140.812 188.48 li
140.927 219.2 li
141.043 188.48 li
141.158 219.2 li
141.273 188.48 li
141.388 219.2 li
141.503 188.48 li
141.619 219.2 li
141.734 188.48 li
141.849 219.2 li
141.964 188.48 li
142.079 219.2 li
142.655 219.2 li
142.771 249.92 li
144.268 249.92 li
144.383 219.2 li
145.766 219.2 li
145.881 249.92 li
148.415 249.92 li
148.531 219.2 li
151.987 219.2 li
152.102 249.92 li
152.447 249.92 li
152.563 219.2 li
152.793 219.2 li
152.908 249.92 li
153.023 219.2 li
153.139 249.92 li
153.254 219.2 li
153.369 249.92 li
153.484 249.92 li
153.599 280.64 li
153.715 249.92 li
153.83 280.64 li
153.945 249.92 li
154.06 280.64 li
154.175 249.92 li
154.291 280.64 li
154.406 249.92 li
154.521 280.64 li
154.636 249.92 li
157.055 249.92 li
157.171 280.64 li
157.286 249.92 li
157.401 280.64 li
157.631 280.64 li
157.747 249.92 li
157.862 280.64 li
157.977 280.64 li
158.092 311.36 li
158.207 280.64 li
158.323 311.36 li
158.438 280.64 li
158.553 311.36 li
158.668 280.64 li
158.783 311.36 li
158.899 249.92 li
159.014 311.36 li
159.129 280.64 li
159.244 311.36 li
159.359 280.64 li
159.475 311.36 li
159.59 280.64 li
159.82 280.64 li
159.935 311.36 li
160.166 249.92 li
160.281 280.64 li
160.396 249.92 li
160.511 280.64 li
160.627 249.92 li
163.276 249.92 li
163.391 280.64 li
163.507 249.92 li
163.622 280.64 li
163.737 249.92 li
163.967 311.36 li
164.083 249.92 li
164.198 311.36 li
164.313 280.64 li
164.543 280.64 li
164.659 311.36 li
164.774 280.64 li
165.004 280.64 li
165.119 311.36 li
165.235 280.64 li
165.35 280.64 li
165.465 249.92 li
165.58 280.64 li
166.041 280.64 li
166.156 249.92 li
166.271 280.64 li
166.732 280.64 li
166.847 249.92 li
166.963 280.64 li
167.308 280.64 li
167.423 249.92 li
167.539 280.64 li
167.884 280.64 li
167.999 249.92 li
168.115 280.64 li
168.691 280.64 li
168.806 249.92 li
168.921 280.64 li
169.382 280.64 li
169.497 311.36 li
169.612 280.64 li
169.727 311.36 li
170.073 311.36 li
170.188 280.64 li
170.303 311.36 li
170.649 311.36 li
170.764 280.64 li
170.879 311.36 li
170.995 311.36 li
171.11 280.64 li
171.225 311.36 li
171.34 249.92 li
171.455 311.36 li
171.571 280.64 li
172.147 280.64 li
172.262 249.92 li
172.377 280.64 li
172.607 280.64 li
172.723 249.92 li
172.953 311.36 li
173.068 280.64 li
173.183 311.36 li
173.299 311.36 li
173.414 280.64 li
173.529 311.36 li
173.759 311.36 li
173.875 342.08 li
174.22 342.08 li
174.335 311.36 li
174.566 311.36 li
174.681 342.08 li
174.796 311.36 li
174.911 342.08 li
175.027 311.36 li
175.142 311.36 li
175.257 280.64 li
175.372 311.36 li
175.833 311.36 li
175.948 280.64 li
176.063 311.36 li
176.409 311.36 li
176.524 280.64 li
176.639 311.36 li
176.755 280.64 li
176.87 280.64 li
176.985 311.36 li
177.215 249.92 li
177.331 280.64 li
177.446 249.92 li
177.561 280.64 li
177.676 249.92 li
177.791 249.92 li
177.907 280.64 li
178.713 280.64 li
178.828 311.36 li
180.211 311.36 li
180.326 280.64 li
180.441 280.64 li
180.556 342.08 li
180.671 280.64 li
180.787 342.08 li
180.902 280.64 li
181.017 342.08 li
181.132 280.64 li
181.247 280.64 li
181.363 311.36 li
181.478 280.64 li
181.593 280.64 li
181.708 311.36 li
181.823 280.64 li
181.939 280.64 li
182.054 311.36 li
182.169 311.36 li
182.284 249.92 li
182.399 311.36 li
182.515 280.64 li
182.63 311.36 li
182.745 280.64 li
182.86 311.36 li
182.975 249.92 li
183.091 311.36 li
183.206 280.64 li
183.321 311.36 li
183.436 280.64 li
183.782 280.64 li
183.897 311.36 li
185.625 311.36 li
185.74 342.08 li
185.855 311.36 li
185.971 342.08 li
186.086 342.08 li
186.201 372.8 li
186.316 342.08 li
186.892 342.08 li
187.007 311.36 li
188.275 311.36 li
188.39 280.64 li
188.62 342.08 li
188.735 311.36 li
188.966 311.36 li
189.081 342.08 li
189.196 280.64 li
189.311 342.08 li
189.427 280.64 li
190.003 280.64 li
190.118 311.36 li
190.233 280.64 li
190.348 342.08 li
191.27 342.08 li
191.385 372.8 li
191.5 342.08 li
191.615 372.8 li
191.731 342.08 li
192.076 342.08 li
192.191 311.36 li
192.307 342.08 li
193.228 342.08 li
193.343 311.36 li
193.459 342.08 li
193.689 342.08 li
193.804 311.36 li
193.919 342.08 li
194.035 311.36 li
194.15 342.08 li
194.265 311.36 li
194.38 342.08 li
194.495 280.64 li
194.611 311.36 li
194.841 311.36 li
194.956 342.08 li
195.071 342.08 li
195.187 311.36 li
195.302 342.08 li
195.417 342.08 li
195.532 311.36 li
195.647 342.08 li
195.763 311.36 li
195.878 342.08 li
195.993 311.36 li
196.108 342.08 li
196.223 311.36 li
196.339 372.8 li
196.454 311.36 li
196.569 372.8 li
196.684 342.08 li
196.915 342.08 li
197.03 372.8 li
197.145 342.08 li
197.26 372.8 li
197.375 372.8 li
197.491 342.08 li
197.606 372.8 li
198.758 372.8 li
198.873 342.08 li
199.103 342.08 li
199.219 372.8 li
199.679 372.8 li
199.795 342.08 li
199.91 372.8 li
200.255 372.8 li
200.371 342.08 li
200.486 372.8 li
200.716 372.8 li
200.831 342.08 li
200.947 372.8 li
201.062 372.8 li
201.177 342.08 li
201.292 372.8 li
201.407 372.8 li
201.523 342.08 li
201.638 372.8 li
201.753 342.08 li
201.868 372.8 li
201.983 342.08 li
202.099 372.8 li
202.214 342.08 li
202.329 372.8 li
202.444 342.08 li
202.559 372.8 li
202.675 372.8 li
202.79 342.08 li
202.905 372.8 li
203.827 372.8 li
203.942 342.08 li
204.979 342.08 li
205.094 372.8 li
205.555 372.8 li
205.67 342.08 li
206.246 342.08 li
206.361 311.36 li
206.476 342.08 li
206.591 342.08 li
206.707 372.8 li
206.822 311.36 li
206.937 372.8 li
207.052 342.08 li
207.167 342.08 li
207.283 372.8 li
207.398 372.8 li
207.513 342.08 li
207.628 372.8 li
207.743 372.8 li
207.859 342.08 li
207.974 372.8 li
208.089 372.8 li
208.204 342.08 li
208.319 372.8 li
212.351 372.8 li
212.467 342.08 li
212.582 372.8 li
213.043 372.8 li
213.158 342.08 li
213.273 372.8 li
213.503 372.8 li
213.619 342.08 li
213.734 372.8 li
213.964 372.8 li
214.079 342.08 li
214.195 372.8 li
214.655 372.8 li
214.771 342.08 li
214.886 372.8 li
215.462 372.8 li
215.577 342.08 li
215.692 372.8 li
216.268 372.8 li
216.383 342.08 li
216.499 372.8 li
216.844 372.8 li
216.959 311.36 li
217.075 372.8 li
217.42 372.8 li
217.535 342.08 li
217.651 372.8 li
217.881 372.8 li
217.996 342.08 li
218.111 372.8 li
218.687 372.8 li
218.803 342.08 li
218.918 372.8 li
223.065 372.8 li
223.18 342.08 li
223.295 403.52 li
223.411 403.52 li
223.526 372.8 li
223.641 403.52 li
223.756 403.52 li
223.871 372.8 li
223.987 403.52 li
224.332 403.52 li
224.447 372.8 li
224.908 372.8 li
225.023 342.08 li
225.139 372.8 li
225.599 372.8 li
225.715 342.08 li
225.83 372.8 li
236.083 372.8 li
236.198 403.52 li
236.659 403.52 li
236.774 372.8 li
236.889 403.52 li
237.58 403.52 li
237.695 372.8 li
239.078 372.8 li
239.193 342.08 li
239.423 403.52 li
239.769 403.52 li
239.884 372.8 li
239.999 403.52 li
241.612 403.52 li
241.727 372.8 li
247.027 372.8 li
247.142 403.52 li
247.257 403.52 li
247.372 434.24 li
250.022 434.24 li
250.137 403.52 li
250.252 434.24 li
250.828 434.24 li
250.943 403.52 li
251.059 403.52 li
251.174 372.8 li
251.289 403.52 li
253.132 403.52 li
253.247 372.8 li
257.971 372.8 li
258.201 434.24 li
263.846 434.24 li
263.961 403.52 li
284.582 403.52 li
284.697 434.24 li
287.577 434.24 li
287.692 403.52 li
293.798 403.52 li
293.913 434.24 li
300.019 434.24 li
300.134 403.52 li
304.857 403.52 li
304.972 434.24 li
313.036 434.24 li
313.151 403.52 li
314.649 403.52 li
314.764 434.24 li
494.937 434.24 li
495.052 464.96 li
512.102 464.96 li
.839216 .152941 .156863 rgb
@
grestore
gsave
51.417 526.4 mo
512.217 526.4 li
512.217 65.6 li
51.417 65.6 li
51.417 526.4 li
clp
2 lw
2 lc
53.0405 7 mo
53.2603 65.6 li
53.721 65.6 li
53.8362 96.32 li
54.1818 96.32 li
54.2971 127.04 li
54.873 127.04 li
54.9882 157.76 li
55.1035 157.76 li
55.2186 188.48 li
56.2554 188.48 li
56.3706 219.2 li
56.4858 219.2 li
56.601 249.92 li
57.177 249.92 li
57.2922 280.64 li
57.9834 280.64 li
58.0986 311.36 li
59.2506 311.36 li
59.3658 342.08 li
59.7114 342.08 li
59.8266 311.36 li
59.9418 342.08 li
60.057 342.08 li
60.1722 311.36 li
60.2874 342.08 li
60.4026 311.36 li
60.5178 342.08 li
60.6331 311.36 li
62.5914 311.36 li
62.7066 280.64 li
62.8218 311.36 li
63.0522 311.36 li
63.1674 342.08 li
63.2827 311.36 li
63.3978 311.36 li
63.513 280.64 li
64.4346 280.64 li
64.5498 249.92 li
65.5866 249.92 li
65.7018 219.2 li
67.4298 219.2 li
67.545 188.48 li
69.0426 188.48 li
69.1578 157.76 li
72.4987 157.76 li
72.6138 127.04 li
75.609 127.04 li
75.7242 157.76 li
75.9547 157.76 li
76.0698 127.04 li
78.8347 127.04 li
78.9498 157.76 li
79.8714 157.76 li
79.9866 188.48 li
80.9082 188.48 li
81.0234 157.76 li
81.1386 188.48 li
81.2538 157.76 li
81.369 188.48 li
81.4843 188.48 li
81.5994 157.76 li
81.7146 188.48 li
82.0602 188.48 li
82.1754 157.76 li
82.2906 188.48 li
82.4058 188.48 li
82.5211 219.2 li
82.6362 188.48 li
82.7514 219.2 li
82.8666 219.2 li
82.9818 188.48 li
83.097 219.2 li
83.2122 188.48 li
83.7882 188.48 li
83.9034 157.76 li
84.1339 157.76 li
84.249 188.48 li
84.5946 188.48 li
84.7098 219.2 li
84.825 188.48 li
84.9402 219.2 li
85.0554 219.2 li
85.1707 249.92 li
85.401 249.92 li
85.5162 219.2 li
85.6314 249.92 li
86.0922 249.92 li
86.2075 219.2 li
86.3226 249.92 li
86.6682 249.92 li
86.7834 219.2 li
86.8986 249.92 li
87.0139 249.92 li
87.129 219.2 li
87.2442 249.92 li
87.3594 249.92 li
87.4746 219.2 li
87.5898 249.92 li
87.705 219.2 li
87.8203 249.92 li
87.9354 188.48 li
88.0507 219.2 li
88.1658 188.48 li
88.281 219.2 li
88.3962 188.48 li
88.5114 219.2 li
88.6266 157.76 li
88.7418 188.48 li
88.8571 188.48 li
88.9722 219.2 li
89.0874 188.48 li
89.2026 219.2 li
89.3178 219.2 li
89.433 188.48 li
89.5482 219.2 li
89.7786 219.2 li
89.8938 188.48 li
90.1242 249.92 li
93.6954 249.92 li
93.8106 219.2 li
93.9258 249.92 li
94.041 249.92 li
94.1563 219.2 li
94.2714 249.92 li
94.3867 219.2 li
94.5018 249.92 li
94.617 249.92 li
94.7322 219.2 li
94.8474 249.92 li
95.0778 249.92 li
95.1931 219.2 li
95.3082 249.92 li
98.5338 249.92 li
98.649 219.2 li
98.7642 249.92 li
98.8795 249.92 li
98.9946 219.2 li
99.1098 249.92 li
99.225 219.2 li
99.3402 249.92 li
99.4554 219.2 li
99.5706 219.2 li
99.6859 249.92 li
99.801 249.92 li
99.9162 219.2 li
103.257 219.2 li
103.372 249.92 li
105.446 249.92 li
105.561 280.64 li
105.676 249.92 li
105.791 280.64 li
105.907 249.92 li
106.022 280.64 li
106.137 249.92 li
106.252 280.64 li
106.367 249.92 li
106.483 280.64 li
106.598 249.92 li
106.713 280.64 li
106.828 249.92 li
106.943 280.64 li
107.059 249.92 li
107.174 280.64 li
107.289 249.92 li
107.404 280.64 li
107.519 249.92 li
107.75 249.92 li
107.865 280.64 li
109.823 280.64 li
109.939 311.36 li
110.054 280.64 li
110.169 311.36 li
110.399 311.36 li
110.515 280.64 li
113.164 280.64 li
113.279 311.36 li
113.971 311.36 li
114.086 280.64 li
115.007 280.64 li
115.123 311.36 li
123.071 311.36 li
123.187 342.08 li
123.417 342.08 li
123.532 311.36 li
124.454 311.36 li
124.569 342.08 li
124.684 311.36 li
124.799 342.08 li
124.915 342.08 li
125.03 311.36 li
125.145 342.08 li
125.26 311.36 li
125.375 342.08 li
125.491 311.36 li
127.564 311.36 li
127.679 342.08 li
129.177 342.08 li
129.292 311.36 li
134.131 311.36 li
134.246 342.08 li
134.361 311.36 li
134.476 342.08 li
134.591 311.36 li
134.707 342.08 li
134.822 342.08 li
134.937 311.36 li
135.052 342.08 li
135.283 342.08 li
135.398 311.36 li
135.513 342.08 li
135.628 342.08 li
135.743 311.36 li
135.859 342.08 li
135.974 311.36 li
136.089 342.08 li
136.204 311.36 li
136.319 342.08 li
136.435 311.36 li
138.393 311.36 li
138.508 372.8 li
138.623 342.08 li
138.739 372.8 li
138.854 342.08 li
138.969 372.8 li
139.084 342.08 li
139.199 372.8 li
139.315 342.08 li
144.844 342.08 li
144.959 372.8 li
145.075 342.08 li
145.19 372.8 li
145.305 342.08 li
145.42 372.8 li
145.535 342.08 li
145.651 372.8 li
145.766 372.8 li
145.881 342.08 li
145.996 372.8 li
146.227 372.8 li
146.342 342.08 li
146.457 372.8 li
146.572 372.8 li
146.687 311.36 li
146.803 342.08 li
146.918 311.36 li
147.033 342.08 li
147.148 311.36 li
147.263 342.08 li
147.379 311.36 li
147.494 342.08 li
147.609 311.36 li
148.3 311.36 li
148.415 372.8 li
148.531 342.08 li
148.646 372.8 li
148.761 342.08 li
148.876 372.8 li
148.991 372.8 li
149.107 403.52 li
149.222 372.8 li
149.337 403.52 li
149.452 372.8 li
149.567 403.52 li
149.683 372.8 li
149.798 403.52 li
149.913 403.52 li
150.028 372.8 li
150.143 403.52 li
150.259 403.52 li
150.374 372.8 li
150.489 403.52 li
150.604 403.52 li
150.719 372.8 li
150.835 403.52 li
150.95 403.52 li
151.065 372.8 li
151.18 403.52 li
151.295 372.8 li
151.411 403.52 li
151.526 372.8 li
151.641 403.52 li
151.756 372.8 li
151.871 403.52 li
151.987 342.08 li
152.102 372.8 li
152.217 342.08 li
152.332 372.8 li
152.447 342.08 li
152.563 372.8 li
152.678 342.08 li
152.793 372.8 li
152.908 342.08 li
153.023 372.8 li
153.139 342.08 li
154.982 342.08 li
155.097 372.8 li
155.212 342.08 li
155.327 372.8 li
155.443 342.08 li
155.558 372.8 li
155.673 342.08 li
155.788 372.8 li
155.903 342.08 li
156.019 372.8 li
156.134 342.08 li
156.249 372.8 li
156.364 372.8 li
156.479 342.08 li
156.595 372.8 li
156.71 372.8 li
156.825 342.08 li
156.94 372.8 li
157.286 372.8 li
157.401 342.08 li
157.516 372.8 li
158.323 372.8 li
158.438 342.08 li
158.553 372.8 li
159.014 372.8 li
159.129 342.08 li
159.244 372.8 li
159.59 372.8 li
159.705 342.08 li
159.82 372.8 li
160.166 372.8 li
160.281 342.08 li
160.396 372.8 li
160.972 372.8 li
161.087 403.52 li
161.663 403.52 li
161.779 372.8 li
161.894 403.52 li
162.47 403.52 li
162.585 372.8 li
162.7 403.52 li
163.161 403.52 li
163.276 372.8 li
163.391 403.52 li
163.737 403.52 li
163.852 372.8 li
163.967 403.52 li
164.198 403.52 li
164.313 372.8 li
164.428 403.52 li
164.659 403.52 li
164.774 372.8 li
164.889 403.52 li
165.004 403.52 li
165.119 372.8 li
165.235 403.52 li
165.465 403.52 li
165.58 372.8 li
165.695 403.52 li
166.041 403.52 li
166.156 372.8 li
166.271 403.52 li
170.534 403.52 li
170.649 372.8 li
170.764 403.52 li
187.468 403.52 li
187.583 434.24 li
352.435 434.24 li
352.55 464.96 li
512.102 464.96 li
.580392 .403922 .741176 rgb
@
grestore
gsave
51.417 526.4 mo
512.217 526.4 li
512.217 65.6 li
51.417 65.6 li
51.417 526.4 li
clp
gsave
512.217 496.68 mo
482.577 496.68 li
482.574 495.676 li
482.572 495.124 482.126 494.68 481.574 494.68 cv
512.217 494.68 li
512.217 496.68 li
480.577 496.68 mo
214.507 496.68 li
214.503 495.676 li
214.501 495.124 214.056 494.68 213.503 494.68 cv
365.14 494.68 li
365.143 495.684 li
365.145 496.236 365.591 496.68 366.143 496.68 cv
480.577 496.68 li
clp
213.503 494.68 mo
512.217 494.68 li
512.217 496.68 li
213.503 496.68 li
cp
.498039 .498039 .498039 rgb
f
grestore
482.577 496.68 mo
480.577 496.68 li
366.143 496.68 li
365.591 496.68 365.145 496.236 365.143 495.684 cv
365.14 494.68 li
481.574 494.68 li
482.126 494.68 482.572 495.124 482.574 495.676 cv
482.577 496.68 li
.498039 .247059 .027451 rgb
f
212.507 496.68 mo
75.8063 496.68 li
75.8025 495.676 li
75.8005 495.124 75.3549 494.68 74.8027 494.68 cv
99.0277 494.68 li
99.0315 495.684 li
99.0334 496.236 99.4791 496.68 100.031 496.68 cv
101.875 496.68 li
102.427 496.68 102.872 496.236 102.875 495.684 cv
102.878 494.68 li
109.396 494.68 li
109.399 495.684 li
109.401 496.236 109.847 496.68 110.399 496.68 cv
116.275 496.68 li
116.827 496.68 117.273 496.236 117.275 495.684 cv
117.278 494.68 li
119.418 494.68 li
119.422 495.684 li
119.424 496.236 119.87 496.68 120.422 496.68 cv
212.507 496.68 li
71.7252 496.68 mo
63.48 496.68 li
63.48 496.669 li
63.5283 496.676 63.5779 496.68 63.6283 496.68 cv
63.9738 496.68 li
64.5261 496.68 64.9717 496.236 64.9738 495.684 cv
64.9776 494.68 li
70.9188 494.68 li
70.9225 495.684 li
70.9244 496.168 71.2679 496.57 71.7253 496.661 cv
71.7252 496.68 li
62.6245 494.691 mo
62.5761 494.684 62.5266 494.68 62.4762 494.68 cv
62.6245 494.68 li
62.6245 494.691 li
.498039 .498039 .498039 rgb
f
75.8063 496.68 mo
73.8063 496.68 li
73.7252 496.68 li
71.7252 496.68 li
71.7253 496.661 li
71.789 496.673 71.855 496.68 71.9226 496.68 cv
72.2682 496.68 li
72.8204 496.68 73.2662 496.236 73.2682 495.684 cv
73.272 494.68 li
74.8027 494.68 li
75.3549 494.68 75.8005 495.124 75.8025 495.676 cv
75.8063 496.68 li
63.48 496.68 mo
61.48 496.68 li
55.7539 496.68 li
53.7541 496.68 li
54.0666 496.68 li
54.6188 496.68 55.0646 496.236 55.0666 495.684 cv
55.0704 494.68 li
62.4762 494.68 li
62.5266 494.68 62.5761 494.684 62.6245 494.691 cv
62.6282 495.684 li
62.6301 496.186 62.9983 496.598 63.48 496.669 cv
63.48 496.68 li
52.5274 496.68 mo
51.417 496.68 li
51.417 496.653 li
51.4909 496.671 51.5681 496.68 51.6473 496.68 cv
52.5274 496.68 li
.0588235 .231373 .352941 rgb
f
52.6469 494.68 mo
52.6469 494.68 li
53.0704 494.68 li
52.6469 494.68 li
.498039 .498039 .498039 rgb
f
214.507 496.68 mo
212.507 496.68 li
120.422 496.68 li
119.87 496.68 119.424 496.236 119.422 495.684 cv
119.418 494.68 li
213.503 494.68 li
214.056 494.68 214.501 495.124 214.503 495.676 cv
214.507 496.68 li
116.275 496.68 mo
110.399 496.68 li
109.847 496.68 109.401 496.236 109.399 495.684 cv
109.396 494.68 li
117.278 494.68 li
117.275 495.684 li
117.273 496.236 116.827 496.68 116.275 496.68 cv
101.875 496.68 mo
100.031 496.68 li
99.4791 496.68 99.0334 496.236 99.0315 495.684 cv
99.0277 494.68 li
102.878 494.68 li
102.875 495.684 li
102.872 496.236 102.427 496.68 101.875 496.68 cv
72.2682 496.68 mo
71.9226 496.68 li
71.855 496.68 71.789 496.673 71.7253 496.661 cv
71.2679 496.57 70.9244 496.168 70.9225 495.684 cv
70.9188 494.68 li
73.272 494.68 li
73.2682 495.684 li
73.2662 496.236 72.8204 496.68 72.2682 496.68 cv
63.9738 496.68 mo
63.6283 496.68 li
63.5779 496.68 63.5283 496.676 63.48 496.669 cv
62.9983 496.598 62.6301 496.186 62.6282 495.684 cv
62.6245 494.691 li
62.6245 494.68 li
64.9776 494.68 li
64.9738 495.684 li
64.9717 496.236 64.5261 496.68 63.9738 496.68 cv
54.0666 496.68 mo
53.7541 496.68 li
52.5274 496.68 li
51.6473 496.68 li
51.5681 496.68 51.4909 496.671 51.417 496.653 cv
51.417 494.68 li
52.6469 494.68 li
52.6469 494.68 li
53.0704 494.68 li
55.0704 494.68 li
55.0666 495.684 li
55.0646 496.236 54.6188 496.68 54.0666 496.68 cv
.0862745 .313725 .0862745 rgb
f
grestore
2 lc
0 lj
51.4171 526.4 mo
51.4171 65.6 li
@
512.217 526.4 mo
512.217 65.6 li
@
51.4171 526.4 mo
512.217 526.4 li
@
51.4171 65.6 mo
512.217 65.6 li
@
499.617 214.5 mo
400.017 214.5 li
398.894 214.498 398.146 214.223 397.671 213.746 cv
397.194 213.271 396.919 212.523 396.917 211.4 cv
396.917 78.2 li
396.919 77.0768 397.194 76.3294 397.671 75.8536 cv
398.146 75.3774 398.894 75.1018 400.017 75.1001 cv
499.617 75.1001 li
500.74 75.1018 501.488 75.3774 501.963 75.8536 cv
502.439 76.3294 502.715 77.0768 502.717 78.2 cv
502.717 211.4 li
502.715 212.523 502.439 213.271 501.963 213.746 cv
501.488 214.223 500.74 214.498 499.617 214.5 cv
1 1 1 rgb
f
499.628 215.5 mo
499.624 215.5 499.621 215.5 499.617 215.5 cv
400.017 215.5 li
400.013 215.5 400.009 215.5 400.006 215.5 cv
398.734 215.5 397.686 215.175 396.963 214.453 cv
396.24 213.729 395.915 212.677 395.917 211.4 cv
395.917 78.2 li
395.915 76.9232 396.24 75.8707 396.963 75.1465 cv
397.686 74.4247 398.735 74.1 400.007 74.1 cv
400.01 74.1 400.013 74.1 400.017 74.1 cv
499.617 74.1 li
499.62 74.1 499.624 74.1 499.627 74.1 cv
500.899 74.1 501.948 74.4246 502.671 75.1465 cv
503.394 75.8707 503.719 76.9232 503.717 78.2 cv
503.717 211.4 li
503.719 212.677 503.394 213.729 502.671 214.453 cv
501.949 215.175 500.9 215.5 499.628 215.5 cv
400.017 214.5 mo
499.617 214.5 li
500.74 214.498 501.488 214.223 501.963 213.746 cv
502.439 213.271 502.715 212.523 502.717 211.4 cv
502.717 78.2 li
502.715 77.0768 502.439 76.3294 501.963 75.8536 cv
501.488 75.3774 500.74 75.1018 499.617 75.1001 cv
400.017 75.1001 li
398.894 75.1018 398.146 75.3774 397.671 75.8536 cv
397.194 76.3294 396.919 77.0768 396.917 78.2 cv
396.917 211.4 li
396.919 212.523 397.194 213.271 397.671 213.746 cv
398.146 214.223 398.894 214.498 400.017 214.5 cv
400.017 214.5 li
.835294 .835294 .835294 rgb
f
2 lw
1 lj
403.617 88.5 mo
439.617 88.5 li
.121569 .466667 .705882 rgb
@
462.315 86.3929 mo
462.315 86.6809 li
461.883 86.7169 461.415 86.8969 460.947 87.2209 cv
460.461 87.5449 459.561 88.3009 458.265 89.4529 cv
458.931 91.0369 li
459.579 92.5849 460.065 93.3589 460.389 93.3589 cv
460.641 93.3589 460.911 93.1069 461.199 92.6029 cv
461.253 92.5129 461.343 92.3509 461.469 92.1349 cv
461.739 92.3329 li
461.307 93.0889 460.965 93.6109 460.695 93.8809 cv
460.407 94.1329 460.101 94.2769 459.741 94.2769 cv
459.471 94.2769 459.237 94.1689 459.021 93.9709 cv
458.805 93.7729 458.571 93.3949 458.283 92.8189 cv
457.923 92.1349 457.563 91.2889 457.203 90.2809 cv
456.483 90.8569 li
455.619 94.0969 li
454.269 94.0969 li
456.807 84.5929 li
456.969 83.9989 457.077 83.4769 457.131 83.0089 cv
457.095 82.7209 456.789 82.5769 456.213 82.5769 cv
455.889 82.5769 li
455.889 82.2889 li
456.789 82.1809 457.725 82.0189 458.715 81.8029 cv
458.823 81.9109 li
456.663 90.1189 li
457.437 89.5249 li
459.147 88.2109 460.011 87.3649 460.011 87.0049 cv
460.011 86.7889 459.777 86.6809 459.345 86.6809 cv
459.093 86.6809 li
459.093 86.3929 li
462.315 86.3929 li
.162506 .156372 .158264 rgb
f
482.588 88.3369 mo
471.986 88.3369 li
471.986 87.1489 li
482.588 87.1489 li
482.588 88.3369 li
482.588 91.9369 mo
471.986 91.9369 li
471.986 90.7489 li
482.588 90.7489 li
482.588 91.9369 li
f
493.144 94.0969 mo
488.176 94.0969 li
488.176 93.8269 li
488.824 93.7909 489.274 93.6829 489.526 93.4669 cv
489.76 93.2509 489.886 92.8909 489.886 92.3869 cv
489.886 84.3049 li
489.886 83.7289 489.706 83.4229 489.346 83.4229 cv
489.166 83.4229 488.896 83.4949 488.536 83.6389 cv
488.05 83.8189 li
488.05 83.5669 li
491.272 81.9289 li
491.434 81.9829 li
491.434 92.7289 li
491.434 93.1249 491.542 93.4129 491.794 93.5749 cv
492.028 93.7549 492.478 93.8269 493.144 93.8269 cv
493.144 94.0969 li
f
465.739 87.8723 mo
465.789 88.0739 li
465.172 88.2755 464.869 88.5779 464.869 88.9811 cv
464.869 89.1827 464.983 89.3087 465.235 89.3465 cv
465.991 88.8425 466.595 88.5779 467.036 88.5779 cv
467.427 88.5779 467.629 88.7165 467.629 88.9685 cv
467.629 89.2205 467.452 89.4221 467.125 89.5733 cv
466.797 89.7245 466.306 89.7875 465.663 89.7875 cv
465.348 89.7875 465.096 89.9387 464.894 90.2159 cv
464.693 90.5057 464.592 90.7577 464.592 90.9845 cv
464.592 91.2743 464.693 91.5011 464.92 91.6523 cv
465.411 91.3121 465.991 91.1357 466.658 91.1357 cv
467.099 91.1357 467.326 91.2617 467.326 91.5137 cv
467.326 91.6649 467.263 91.8035 467.162 91.9043 cv
467.049 92.0051 466.91 92.0807 466.747 92.1311 cv
466.57 92.1815 466.419 92.2193 466.28 92.2445 cv
466.129 92.2697 466.003 92.2697 465.877 92.2697 cv
465.625 92.2697 465.323 92.2193 464.97 92.1059 cv
464.516 92.2571 464.075 92.5721 463.66 93.0509 cv
463.244 93.5297 463.03 93.9959 463.03 94.4243 cv
463.03 94.8401 463.143 95.1425 463.37 95.3189 cv
463.597 95.5079 463.949 95.5961 464.403 95.5961 cv
464.453 95.5961 464.542 95.5961 464.668 95.5961 cv
464.781 95.5961 464.857 95.5835 464.882 95.5835 cv
465.411 95.5835 465.814 95.6969 466.104 95.8985 cv
466.381 96.1127 466.532 96.3899 466.532 96.7301 cv
466.532 97.1081 466.406 97.4609 466.18 97.8011 cv
465.991 98.0783 465.739 98.3177 465.411 98.5067 cv
465.083 98.6957 464.768 98.7965 464.491 98.7965 cv
464.252 98.7965 464.05 98.7335 463.886 98.6327 cv
463.723 98.5193 463.647 98.3555 463.647 98.1413 cv
463.647 97.9901 463.697 97.8641 463.798 97.7633 cv
463.899 97.6625 464.025 97.6121 464.189 97.6121 cv
464.315 97.6121 464.466 97.6625 464.617 97.7885 cv
464.768 97.9145 464.907 97.9775 465.008 97.9775 cv
465.285 97.9775 465.524 97.8893 465.726 97.7255 cv
465.928 97.5617 466.028 97.3601 466.028 97.1081 cv
466.028 96.6797 465.701 96.4781 465.071 96.4781 cv
464.957 96.4781 464.768 96.4907 464.504 96.5411 cv
464.239 96.5789 464.05 96.6041 463.924 96.6041 cv
462.891 96.6041 462.387 96.1127 462.387 95.1299 cv
462.387 94.4495 462.601 93.8069 463.004 93.2273 cv
463.408 92.6477 463.937 92.2067 464.592 91.8791 cv
464.277 91.6775 464.126 91.4129 464.126 91.0853 cv
464.126 90.5939 464.365 90.1403 464.857 89.7371 cv
464.743 89.7371 464.617 89.6867 464.479 89.5733 cv
464.327 89.4599 464.264 89.3213 464.264 89.1701 cv
464.264 88.5653 464.756 88.1243 465.739 87.8723 cv
f
403.617 115.5 mo
439.617 115.5 li
1 .498039 .054902 rgb
@
462.315 113.393 mo
462.315 113.681 li
461.883 113.717 461.415 113.897 460.947 114.221 cv
460.461 114.545 459.561 115.301 458.265 116.453 cv
458.931 118.037 li
459.579 119.585 460.065 120.359 460.389 120.359 cv
460.641 120.359 460.911 120.107 461.199 119.603 cv
461.253 119.513 461.343 119.351 461.469 119.135 cv
461.739 119.333 li
461.307 120.089 460.965 120.611 460.695 120.881 cv
460.407 121.133 460.101 121.277 459.741 121.277 cv
459.471 121.277 459.237 121.169 459.021 120.971 cv
458.805 120.773 458.571 120.395 458.283 119.819 cv
457.923 119.135 457.563 118.289 457.203 117.281 cv
456.483 117.857 li
455.619 121.097 li
454.269 121.097 li
456.807 111.593 li
456.969 110.999 457.077 110.477 457.131 110.009 cv
457.095 109.721 456.789 109.577 456.213 109.577 cv
455.889 109.577 li
455.889 109.289 li
456.789 109.181 457.725 109.019 458.715 108.803 cv
458.823 108.911 li
456.663 117.119 li
457.437 116.525 li
459.147 115.211 460.011 114.365 460.011 114.005 cv
460.011 113.789 459.777 113.681 459.345 113.681 cv
459.093 113.681 li
459.093 113.393 li
462.315 113.393 li
.162506 .156372 .158264 rgb
f
482.588 115.337 mo
471.986 115.337 li
471.986 114.149 li
482.588 114.149 li
482.588 115.337 li
482.588 118.937 mo
471.986 118.937 li
471.986 117.749 li
482.588 117.749 li
482.588 118.937 li
f
494.584 118.631 mo
493.612 121.097 li
486.574 121.097 li
486.574 120.881 li
489.778 117.479 li
490.606 116.615 491.218 115.805 491.578 115.067 cv
491.938 114.347 492.118 113.591 492.118 112.799 cv
492.118 112.007 491.884 111.377 491.452 110.927 cv
491.002 110.495 490.39 110.261 489.616 110.261 cv
488.968 110.261 488.446 110.441 488.068 110.765 cv
487.69 111.107 487.33 111.719 486.97 112.601 cv
486.592 112.511 li
486.79 111.395 487.204 110.531 487.816 109.883 cv
488.428 109.253 489.274 108.929 490.336 108.929 cv
491.326 108.929 492.136 109.235 492.748 109.829 cv
493.36 110.441 493.666 111.197 493.666 112.097 cv
493.666 113.465 492.892 114.941 491.362 116.561 cv
488.392 119.729 li
492.604 119.729 li
493 119.729 493.306 119.657 493.54 119.495 cv
493.774 119.351 494.044 119.027 494.332 118.523 cv
494.584 118.631 li
f
465.739 114.872 mo
465.789 115.074 li
465.172 115.276 464.869 115.578 464.869 115.981 cv
464.869 116.183 464.983 116.309 465.235 116.347 cv
465.991 115.843 466.595 115.578 467.036 115.578 cv
467.427 115.578 467.629 115.717 467.629 115.969 cv
467.629 116.221 467.452 116.422 467.125 116.573 cv
466.797 116.725 466.306 116.788 465.663 116.788 cv
465.348 116.788 465.096 116.939 464.894 117.216 cv
464.693 117.506 464.592 117.758 464.592 117.985 cv
464.592 118.274 464.693 118.501 464.92 118.652 cv
465.411 118.312 465.991 118.136 466.658 118.136 cv
467.099 118.136 467.326 118.262 467.326 118.514 cv
467.326 118.665 467.263 118.804 467.162 118.904 cv
467.049 119.005 466.91 119.081 466.747 119.131 cv
466.57 119.182 466.419 119.219 466.28 119.245 cv
466.129 119.27 466.003 119.27 465.877 119.27 cv
465.625 119.27 465.323 119.219 464.97 119.106 cv
464.516 119.257 464.075 119.572 463.66 120.051 cv
463.244 120.53 463.03 120.996 463.03 121.424 cv
463.03 121.84 463.143 122.143 463.37 122.319 cv
463.597 122.508 463.949 122.596 464.403 122.596 cv
464.453 122.596 464.542 122.596 464.668 122.596 cv
464.781 122.596 464.857 122.584 464.882 122.584 cv
465.411 122.584 465.814 122.697 466.104 122.899 cv
466.381 123.113 466.532 123.39 466.532 123.73 cv
466.532 124.108 466.406 124.461 466.18 124.801 cv
465.991 125.078 465.739 125.318 465.411 125.507 cv
465.083 125.696 464.768 125.797 464.491 125.797 cv
464.252 125.797 464.05 125.734 463.886 125.633 cv
463.723 125.519 463.647 125.356 463.647 125.141 cv
463.647 124.99 463.697 124.864 463.798 124.763 cv
463.899 124.663 464.025 124.612 464.189 124.612 cv
464.315 124.612 464.466 124.663 464.617 124.789 cv
464.768 124.915 464.907 124.978 465.008 124.978 cv
465.285 124.978 465.524 124.889 465.726 124.726 cv
465.928 124.562 466.028 124.36 466.028 124.108 cv
466.028 123.68 465.701 123.478 465.071 123.478 cv
464.957 123.478 464.768 123.491 464.504 123.541 cv
464.239 123.579 464.05 123.604 463.924 123.604 cv
462.891 123.604 462.387 123.113 462.387 122.13 cv
462.387 121.45 462.601 120.807 463.004 120.227 cv
463.408 119.648 463.937 119.207 464.592 118.879 cv
464.277 118.678 464.126 118.413 464.126 118.085 cv
464.126 117.594 464.365 117.14 464.857 116.737 cv
464.743 116.737 464.617 116.687 464.479 116.573 cv
464.327 116.46 464.264 116.321 464.264 116.17 cv
464.264 115.565 464.756 115.124 465.739 114.872 cv
f
403.617 142.5 mo
439.617 142.5 li
.172549 .627451 .172549 rgb
@
462.315 140.393 mo
462.315 140.681 li
461.883 140.717 461.415 140.897 460.947 141.221 cv
460.461 141.545 459.561 142.301 458.265 143.453 cv
458.931 145.037 li
459.579 146.585 460.065 147.359 460.389 147.359 cv
460.641 147.359 460.911 147.107 461.199 146.603 cv
461.253 146.513 461.343 146.351 461.469 146.135 cv
461.739 146.333 li
461.307 147.089 460.965 147.611 460.695 147.881 cv
460.407 148.133 460.101 148.277 459.741 148.277 cv
459.471 148.277 459.237 148.169 459.021 147.971 cv
458.805 147.773 458.571 147.395 458.283 146.819 cv
457.923 146.135 457.563 145.289 457.203 144.281 cv
456.483 144.857 li
455.619 148.097 li
454.269 148.097 li
456.807 138.593 li
456.969 137.999 457.077 137.477 457.131 137.009 cv
457.095 136.721 456.789 136.577 456.213 136.577 cv
455.889 136.577 li
455.889 136.289 li
456.789 136.181 457.725 136.019 458.715 135.803 cv
458.823 135.911 li
456.663 144.119 li
457.437 143.525 li
459.147 142.211 460.011 141.365 460.011 141.005 cv
460.011 140.789 459.777 140.681 459.345 140.681 cv
459.093 140.681 li
459.093 140.393 li
462.315 140.393 li
.162506 .156372 .158264 rgb
f
482.588 142.337 mo
471.986 142.337 li
471.986 141.149 li
482.588 141.149 li
482.588 142.337 li
482.588 145.937 mo
471.986 145.937 li
471.986 144.749 li
482.588 144.749 li
482.588 145.937 li
f
487.15 138.917 mo
486.862 138.845 li
487.132 137.945 487.564 137.243 488.158 136.721 cv
488.734 136.199 489.49 135.929 490.39 135.929 cv
491.218 135.929 491.902 136.163 492.424 136.613 cv
492.928 137.081 493.198 137.675 493.198 138.395 cv
493.198 139.385 492.64 140.213 491.524 140.879 cv
492.172 141.167 492.676 141.491 493.018 141.833 cv
493.54 142.427 493.81 143.201 493.81 144.155 cv
493.81 145.127 493.522 145.955 492.982 146.675 cv
492.568 147.233 491.974 147.647 491.218 147.917 cv
490.462 148.187 489.652 148.331 488.806 148.331 cv
487.456 148.331 486.79 148.007 486.79 147.323 cv
486.79 147.143 486.862 146.981 487.006 146.855 cv
487.15 146.747 487.312 146.675 487.528 146.675 cv
487.816 146.675 488.194 146.837 488.626 147.143 cv
489.148 147.521 489.67 147.701 490.174 147.701 cv
490.822 147.701 491.38 147.449 491.83 146.909 cv
492.28 146.369 492.514 145.721 492.514 144.947 cv
492.514 143.579 491.884 142.697 490.642 142.337 cv
490.264 142.229 489.652 142.157 488.806 142.157 cv
488.806 141.905 li
489.472 141.689 489.976 141.473 490.318 141.257 cv
491.29 140.717 491.776 139.907 491.776 138.845 cv
491.776 138.251 491.596 137.801 491.254 137.477 cv
490.912 137.171 490.444 137.009 489.832 137.009 cv
488.752 137.009 487.852 137.657 487.15 138.917 cv
f
465.739 141.872 mo
465.789 142.074 li
465.172 142.276 464.869 142.578 464.869 142.981 cv
464.869 143.183 464.983 143.309 465.235 143.347 cv
465.991 142.843 466.595 142.578 467.036 142.578 cv
467.427 142.578 467.629 142.717 467.629 142.969 cv
467.629 143.221 467.452 143.422 467.125 143.573 cv
466.797 143.725 466.306 143.788 465.663 143.788 cv
465.348 143.788 465.096 143.939 464.894 144.216 cv
464.693 144.506 464.592 144.758 464.592 144.985 cv
464.592 145.274 464.693 145.501 464.92 145.652 cv
465.411 145.312 465.991 145.136 466.658 145.136 cv
467.099 145.136 467.326 145.262 467.326 145.514 cv
467.326 145.665 467.263 145.804 467.162 145.904 cv
467.049 146.005 466.91 146.081 466.747 146.131 cv
466.57 146.182 466.419 146.219 466.28 146.245 cv
466.129 146.27 466.003 146.27 465.877 146.27 cv
465.625 146.27 465.323 146.219 464.97 146.106 cv
464.516 146.257 464.075 146.572 463.66 147.051 cv
463.244 147.53 463.03 147.996 463.03 148.424 cv
463.03 148.84 463.143 149.143 463.37 149.319 cv
463.597 149.508 463.949 149.596 464.403 149.596 cv
464.453 149.596 464.542 149.596 464.668 149.596 cv
464.781 149.596 464.857 149.584 464.882 149.584 cv
465.411 149.584 465.814 149.697 466.104 149.899 cv
466.381 150.113 466.532 150.39 466.532 150.73 cv
466.532 151.108 466.406 151.461 466.18 151.801 cv
465.991 152.078 465.739 152.318 465.411 152.507 cv
465.083 152.696 464.768 152.797 464.491 152.797 cv
464.252 152.797 464.05 152.734 463.886 152.633 cv
463.723 152.519 463.647 152.356 463.647 152.141 cv
463.647 151.99 463.697 151.864 463.798 151.763 cv
463.899 151.663 464.025 151.612 464.189 151.612 cv
464.315 151.612 464.466 151.663 464.617 151.789 cv
464.768 151.915 464.907 151.978 465.008 151.978 cv
465.285 151.978 465.524 151.889 465.726 151.726 cv
465.928 151.562 466.028 151.36 466.028 151.108 cv
466.028 150.68 465.701 150.478 465.071 150.478 cv
464.957 150.478 464.768 150.491 464.504 150.541 cv
464.239 150.579 464.05 150.604 463.924 150.604 cv
462.891 150.604 462.387 150.113 462.387 149.13 cv
462.387 148.45 462.601 147.807 463.004 147.227 cv
463.408 146.648 463.937 146.207 464.592 145.879 cv
464.277 145.678 464.126 145.413 464.126 145.085 cv
464.126 144.594 464.365 144.14 464.857 143.737 cv
464.743 143.737 464.617 143.687 464.479 143.573 cv
464.327 143.46 464.264 143.321 464.264 143.17 cv
464.264 142.565 464.756 142.124 465.739 141.872 cv
f
403.617 169.5 mo
439.617 169.5 li
.839216 .152941 .156863 rgb
@
462.315 167.408 mo
462.315 167.696 li
461.883 167.732 461.415 167.912 460.947 168.236 cv
460.461 168.56 459.561 169.316 458.265 170.468 cv
458.931 172.052 li
459.579 173.6 460.065 174.374 460.389 174.374 cv
460.641 174.374 460.911 174.122 461.199 173.618 cv
461.253 173.528 461.343 173.366 461.469 173.15 cv
461.739 173.348 li
461.307 174.104 460.965 174.626 460.695 174.896 cv
460.407 175.148 460.101 175.292 459.741 175.292 cv
459.471 175.292 459.237 175.184 459.021 174.986 cv
458.805 174.788 458.571 174.41 458.283 173.834 cv
457.923 173.15 457.563 172.304 457.203 171.296 cv
456.483 171.872 li
455.619 175.112 li
454.269 175.112 li
456.807 165.608 li
456.969 165.014 457.077 164.492 457.131 164.024 cv
457.095 163.736 456.789 163.592 456.213 163.592 cv
455.889 163.592 li
455.889 163.304 li
456.789 163.196 457.725 163.034 458.715 162.818 cv
458.823 162.926 li
456.663 171.134 li
457.437 170.54 li
459.147 169.226 460.011 168.38 460.011 168.02 cv
460.011 167.804 459.777 167.696 459.345 167.696 cv
459.093 167.696 li
459.093 167.408 li
462.315 167.408 li
.162506 .156372 .158264 rgb
f
482.588 169.352 mo
471.986 169.352 li
471.986 168.164 li
482.588 168.164 li
482.588 169.352 li
482.588 172.952 mo
471.986 172.952 li
471.986 171.764 li
482.588 171.764 li
482.588 172.952 li
f
494.08 162.8 mo
494.116 163.088 li
492.694 163.322 491.506 163.898 490.57 164.816 cv
489.616 165.734 489.022 166.868 488.788 168.218 cv
489.472 167.678 490.246 167.408 491.074 167.408 cv
492.118 167.408 492.946 167.75 493.558 168.416 cv
494.17 169.1 494.476 170.018 494.476 171.17 cv
494.476 172.358 494.17 173.312 493.558 174.05 cv
492.838 174.914 491.884 175.346 490.696 175.346 cv
489.22 175.346 488.158 174.752 487.51 173.546 cv
486.934 172.52 486.664 171.368 486.664 170.09 cv
486.664 168.128 487.312 166.472 488.626 165.122 cv
489.364 164.366 490.12 163.826 490.912 163.502 cv
491.704 163.178 492.748 162.944 494.08 162.8 cv
492.856 171.728 mo
492.856 169.406 492.046 168.236 490.426 168.236 cv
489.814 168.236 489.328 168.398 488.932 168.722 cv
488.536 169.046 488.338 169.568 488.338 170.324 cv
488.338 171.728 488.554 172.844 488.986 173.654 cv
489.418 174.464 490.066 174.86 490.894 174.86 cv
491.524 174.86 492.01 174.59 492.352 174.014 cv
492.676 173.438 492.856 172.682 492.856 171.728 cv
f
465.739 168.888 mo
465.789 169.09 li
465.172 169.291 464.869 169.594 464.869 169.997 cv
464.869 170.198 464.983 170.324 465.235 170.362 cv
465.991 169.858 466.595 169.594 467.036 169.594 cv
467.427 169.594 467.629 169.732 467.629 169.984 cv
467.629 170.236 467.452 170.438 467.125 170.589 cv
466.797 170.74 466.306 170.803 465.663 170.803 cv
465.348 170.803 465.096 170.954 464.894 171.232 cv
464.693 171.521 464.592 171.773 464.592 172 cv
464.592 172.29 464.693 172.517 464.92 172.668 cv
465.411 172.328 465.991 172.151 466.658 172.151 cv
467.099 172.151 467.326 172.277 467.326 172.529 cv
467.326 172.681 467.263 172.819 467.162 172.92 cv
467.049 173.021 466.91 173.096 466.747 173.147 cv
466.57 173.197 466.419 173.235 466.28 173.26 cv
466.129 173.285 466.003 173.285 465.877 173.285 cv
465.625 173.285 465.323 173.235 464.97 173.122 cv
464.516 173.273 464.075 173.588 463.66 174.067 cv
463.244 174.545 463.03 175.012 463.03 175.44 cv
463.03 175.856 463.143 176.158 463.37 176.335 cv
463.597 176.524 463.949 176.612 464.403 176.612 cv
464.453 176.612 464.542 176.612 464.668 176.612 cv
464.781 176.612 464.857 176.599 464.882 176.599 cv
465.411 176.599 465.814 176.713 466.104 176.914 cv
466.381 177.128 466.532 177.406 466.532 177.746 cv
466.532 178.124 466.406 178.477 466.18 178.817 cv
465.991 179.094 465.739 179.333 465.411 179.522 cv
465.083 179.711 464.768 179.812 464.491 179.812 cv
464.252 179.812 464.05 179.749 463.886 179.648 cv
463.723 179.535 463.647 179.371 463.647 179.157 cv
463.647 179.006 463.697 178.88 463.798 178.779 cv
463.899 178.678 464.025 178.628 464.189 178.628 cv
464.315 178.628 464.466 178.678 464.617 178.804 cv
464.768 178.93 464.907 178.993 465.008 178.993 cv
465.285 178.993 465.524 178.905 465.726 178.741 cv
465.928 178.577 466.028 178.376 466.028 178.124 cv
466.028 177.695 465.701 177.494 465.071 177.494 cv
464.957 177.494 464.768 177.506 464.504 177.557 cv
464.239 177.595 464.05 177.62 463.924 177.62 cv
462.891 177.62 462.387 177.128 462.387 176.146 cv
462.387 175.465 462.601 174.823 463.004 174.243 cv
463.408 173.663 463.937 173.222 464.592 172.895 cv
464.277 172.693 464.126 172.429 464.126 172.101 cv
464.126 171.61 464.365 171.156 464.857 170.753 cv
464.743 170.753 464.617 170.702 464.479 170.589 cv
464.327 170.476 464.264 170.337 464.264 170.186 cv
464.264 169.581 464.756 169.14 465.739 168.888 cv
f
403.617 196.5 mo
439.617 196.5 li
.580392 .403922 .741176 rgb
@
462.315 194.393 mo
462.315 194.681 li
461.883 194.717 461.415 194.897 460.947 195.221 cv
460.461 195.545 459.561 196.301 458.265 197.453 cv
458.931 199.037 li
459.579 200.585 460.065 201.359 460.389 201.359 cv
460.641 201.359 460.911 201.107 461.199 200.603 cv
461.253 200.513 461.343 200.351 461.469 200.135 cv
461.739 200.333 li
461.307 201.089 460.965 201.611 460.695 201.881 cv
460.407 202.133 460.101 202.277 459.741 202.277 cv
459.471 202.277 459.237 202.169 459.021 201.971 cv
458.805 201.773 458.571 201.395 458.283 200.819 cv
457.923 200.135 457.563 199.289 457.203 198.281 cv
456.483 198.857 li
455.619 202.097 li
454.269 202.097 li
456.807 192.593 li
456.969 191.999 457.077 191.477 457.131 191.009 cv
457.095 190.721 456.789 190.577 456.213 190.577 cv
455.889 190.577 li
455.889 190.289 li
456.789 190.181 457.725 190.019 458.715 189.803 cv
458.823 189.911 li
456.663 198.119 li
457.437 197.525 li
459.147 196.211 460.011 195.365 460.011 195.005 cv
460.011 194.789 459.777 194.681 459.345 194.681 cv
459.093 194.681 li
459.093 194.393 li
462.315 194.393 li
.162506 .156372 .158264 rgb
f
482.588 196.337 mo
471.986 196.337 li
471.986 195.149 li
482.588 195.149 li
482.588 196.337 li
482.588 199.937 mo
471.986 199.937 li
471.986 198.749 li
482.588 198.749 li
482.588 199.937 li
f
494.062 199.307 mo
494.062 200.243 493.738 200.981 493.09 201.521 cv
492.442 202.061 491.596 202.331 490.516 202.331 cv
489.508 202.331 488.68 202.061 488.032 201.521 cv
487.384 200.981 487.06 200.279 487.06 199.415 cv
487.06 198.785 487.204 198.245 487.528 197.795 cv
487.834 197.345 488.464 196.787 489.4 196.121 cv
488.5 195.383 487.888 194.789 487.6 194.321 cv
487.312 193.871 487.168 193.349 487.168 192.737 cv
487.168 191.891 487.492 191.207 488.14 190.703 cv
488.788 190.199 489.634 189.929 490.66 189.929 cv
491.524 189.929 492.244 190.181 492.82 190.685 cv
493.396 191.189 493.684 191.783 493.684 192.503 cv
493.684 193.169 493.504 193.691 493.162 194.087 cv
492.82 194.483 492.19 194.933 491.272 195.419 cv
492.352 196.139 493.072 196.787 493.468 197.345 cv
493.864 197.921 494.062 198.569 494.062 199.307 cv
492.442 192.503 mo
492.442 191.891 492.262 191.387 491.92 191.009 cv
491.56 190.631 491.092 190.433 490.48 190.433 cv
489.868 190.433 489.382 190.595 489.022 190.919 cv
488.662 191.243 488.5 191.675 488.5 192.215 cv
488.5 192.773 488.662 193.277 489.022 193.727 cv
489.382 194.177 489.958 194.627 490.75 195.095 cv
491.362 194.735 491.794 194.357 492.046 193.961 cv
492.298 193.565 492.442 193.079 492.442 192.503 cv
490.93 197.201 mo
489.868 196.481 li
489.328 196.913 488.968 197.345 488.752 197.759 cv
488.536 198.173 488.428 198.677 488.428 199.253 cv
488.428 200.081 488.626 200.711 489.04 201.161 cv
489.454 201.629 490.012 201.845 490.714 201.845 cv
491.29 201.845 491.776 201.665 492.136 201.305 cv
492.496 200.945 492.694 200.459 492.694 199.865 cv
492.694 199.325 492.55 198.857 492.28 198.443 cv
491.992 198.047 491.542 197.633 490.93 197.201 cv
f
465.739 195.872 mo
465.789 196.074 li
465.172 196.276 464.869 196.578 464.869 196.981 cv
464.869 197.183 464.983 197.309 465.235 197.347 cv
465.991 196.843 466.595 196.578 467.036 196.578 cv
467.427 196.578 467.629 196.717 467.629 196.969 cv
467.629 197.221 467.452 197.422 467.125 197.573 cv
466.797 197.725 466.306 197.788 465.663 197.788 cv
465.348 197.788 465.096 197.939 464.894 198.216 cv
464.693 198.506 464.592 198.758 464.592 198.985 cv
464.592 199.274 464.693 199.501 464.92 199.652 cv
465.411 199.312 465.991 199.136 466.658 199.136 cv
467.099 199.136 467.326 199.262 467.326 199.514 cv
467.326 199.665 467.263 199.804 467.162 199.904 cv
467.049 200.005 466.91 200.081 466.747 200.131 cv
466.57 200.182 466.419 200.219 466.28 200.245 cv
466.129 200.27 466.003 200.27 465.877 200.27 cv
465.625 200.27 465.323 200.219 464.97 200.106 cv
464.516 200.257 464.075 200.572 463.66 201.051 cv
463.244 201.53 463.03 201.996 463.03 202.424 cv
463.03 202.84 463.143 203.143 463.37 203.319 cv
463.597 203.508 463.949 203.596 464.403 203.596 cv
464.453 203.596 464.542 203.596 464.668 203.596 cv
464.781 203.596 464.857 203.584 464.882 203.584 cv
465.411 203.584 465.814 203.697 466.104 203.899 cv
466.381 204.113 466.532 204.39 466.532 204.73 cv
466.532 205.108 466.406 205.461 466.18 205.801 cv
465.991 206.078 465.739 206.318 465.411 206.507 cv
465.083 206.696 464.768 206.797 464.491 206.797 cv
464.252 206.797 464.05 206.734 463.886 206.633 cv
463.723 206.519 463.647 206.356 463.647 206.141 cv
463.647 205.99 463.697 205.864 463.798 205.763 cv
463.899 205.663 464.025 205.612 464.189 205.612 cv
464.315 205.612 464.466 205.663 464.617 205.789 cv
464.768 205.915 464.907 205.978 465.008 205.978 cv
465.285 205.978 465.524 205.889 465.726 205.726 cv
465.928 205.562 466.028 205.36 466.028 205.108 cv
466.028 204.68 465.701 204.478 465.071 204.478 cv
464.957 204.478 464.768 204.491 464.504 204.541 cv
464.239 204.579 464.05 204.604 463.924 204.604 cv
462.891 204.604 462.387 204.113 462.387 203.13 cv
462.387 202.45 462.601 201.807 463.004 201.227 cv
463.408 200.648 463.937 200.207 464.592 199.879 cv
464.277 199.678 464.126 199.413 464.126 199.085 cv
464.126 198.594 464.365 198.14 464.857 197.737 cv
464.743 197.737 464.617 197.687 464.479 197.573 cv
464.327 197.46 464.264 197.321 464.264 197.17 cv
464.264 196.565 464.756 196.124 465.739 195.872 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
